<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ININ.IceLib.Interactions</name>
    </assembly>
    <members>
        <member name="T:ININ.IceLib.Interactions.ActionParameterNames">
            <summary>
            Parameter name strings used with the <see cref="T:ININ.IceLib.Interactions.PerformingActionEventArgs"/> 
            and <see cref="T:ININ.IceLib.Interactions.PerformedActionEventArgs"/> event argument classes.
            </summary>
            <remarks>The parameter names specified in this class are used in conjunction
            with the <see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> and
            <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/> dictionary properties.
            These keys can be used to access the data originally passed into the method that caused each event to be raised.
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.ActionParameterNames.Target">
            <summary>
            The target of an action.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ActionParameterNames.On">
            <summary>
            Specifies whether an action is being turned on or off.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ActionParameterNames.Supervisor">
            <summary>
            Specifies whether an action is being performed in a supervisory manner or not.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ActionParameterNames.ConsultId">
            <summary>
            The <see cref="T:ININ.IceLib.Interactions.InteractionId"/> of the 
            <see cref="T:ININ.IceLib.Interactions.Interaction"/> representing the consult transfer target.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ActionParameterNames.Message">
            <summary>
            The user message entered when requesting assistance.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentAssistanceList">
            <summary>
            This class represents a collection of assistance request items belonging to an agent.
            <seealso cref="T:ININ.IceLib.Interactions.AssistanceList"/>
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceList">
            <summary>
            This class represents the list of assistance request items that belong to an agent and/or supervisor.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceList.ItemAdded">
            <summary>
            Event that occurs when a new assistance item is added to the assistance list.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceList.ItemRemoved">
            <summary>
            Event that occurs when an assistance item is removed from the assistance list.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceList.ItemStateChanged">
            <summary>
            Event that occurs when an assistance item's state changes in the assistance list.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.GetAssistanceRequests">
            <summary>
            Gets the list of assistance request items associated with this list.
            </summary>
            <returns>A collection of assistance request items.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.Accept(System.String,System.String)">
            <summary>
            Accepts an assistance request.
            </summary>
            <param name="assistanceItemId">The assistance request ID to accept.</param>
            <param name="message">The message to send while accepting the assistance request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.AcceptAsync(System.String,System.String,System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously accepts an assistance request.
            </summary>
            <param name="assistanceItemId">The assistance request ID to accept.</param>
            <param name="message">The message to send while accepting the assistance request.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.Ignore(System.String,System.String)">
            <summary>
            Ignores an assistance request.
            </summary>
            <param name="assistanceItemId">The assistance request ID to Ignore.</param>
            <param name="message">The message to send while Ignoreing the assistance request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.IgnoreAsync(System.String,System.String,System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously Ignores an assistance request.
            </summary>
            <param name="assistanceItemId">The assistance request ID to Ignore.</param>
            <param name="message">The message to send while Ignoreing the assistance request.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.StartWatching">
            <summary>
            Starts watching the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
            <exception cref="T:System.InvalidOperationException">The object is already being watched or cannot perform this operation on the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.</exception>
            <remarks>
            <note>All event handlers should be added before calling <see cref="M:ININ.IceLib.Interactions.AssistanceList.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.AssistanceList.StartWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>        
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.StartWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously starts watching the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.InvalidOperationException">The object is already being watched or cannot perform this operation on the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.</exception>
            <remarks>
            <note>All event handlers should be added before calling <see cref="M:ININ.IceLib.Interactions.AssistanceList.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.AssistanceList.StartWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)"/>.</note>
            <ininHowWatchesWork/>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.StopWatching">
            <summary>
            Stops watching the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The object is not being watched or cannot perform this operation on the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.</exception>
            <remarks>
            <see cref="M:ININ.IceLib.Interactions.AssistanceList.StopWatching"/> or <see cref="M:ININ.IceLib.Interactions.AssistanceList.StopWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)"/>.
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceList.StopWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously stops watching the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.InvalidOperationException">The object is not being watched or cannot perform this operation on the <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.</exception>
            <remarks>
            <see cref="M:ININ.IceLib.Interactions.AssistanceList.StopWatching"/> or <see cref="M:ININ.IceLib.Interactions.AssistanceList.StopWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)"/>.
            <ininHowWatchesWork/>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceList.Item(System.String)">
            <summary>
            Gets an assistance request item with the associated ID.
            </summary>
            <param name="assistanceItemId">The assistance request ID.</param>
            <returns>The assistance item.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentAssistanceList.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentAssistanceList"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentHelpRequest">
            <summary>
            This class represents an agent's request for help from a supervisor.
            </summary>
            <remarks>Agents sometimes need to obtain help with an interaction. For example, an agent 
            might request help when a caller asks a question that the agent cannot answer.
            <para>When the request is sent, all supervisors of the workgroup from which the call originated receive 
            an assistance request stating that the agent needs help. When one supervisor accepts the assistance request, 
            the request is automatically dismissed from all other supervisors' IC systems.</para>
            <para>Objects of this class contain data about an a agent's help request. These data items 
            (agent, problem description, station, extension, etc.) are sent to the supervisor and are returned in 
            the <see cref="T:ININ.IceLib.Interactions.AgentHelpResponse"/> object when the supervisor responds.</para></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpRequest.#ctor(System.String,System.String,System.String,System.String,System.String,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentHelpRequest"/> class.
            </summary>
            <param name="workgroup">The workgroup.</param>
            <param name="agent">The agent.</param>
            <param name="station">The station.</param>
            <param name="extension">The extension.</param>
            <param name="problemDescription">The problem description.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.Workgroup">
            <summary>
            Gets the workgroup.
            </summary>
            <value>The workgroup.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.Agent">
            <summary>
            Gets the agent.
            </summary>
            <value>The agent.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.Station">
            <summary>
            Gets the station.
            </summary>
            <value>The station.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.Extension">
            <summary>
            Gets the extension.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.ProblemDescription">
            <summary>
            Gets the problem description.
            </summary>
            <value>The problem description.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.InteractionId">
            <summary>
            Gets the interaction ID.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentHelpRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.AgentHelpResponse.AgentHelpRequested"/> event. The
            <see cref="P:ININ.IceLib.Interactions.AgentHelpRequestEventArgs.AgentHelpRequest"/> object is contained in objects of this class.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpRequestEventArgs.#ctor(ININ.IceLib.Interactions.AgentHelpRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentHelpRequestEventArgs"/> class with the specified values.
            </summary>
            <param name="agentHelpRequest">The agent help request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequestEventArgs.AgentHelpRequest">
            <summary>
            Gets the agent help request.
            </summary>
            <value>The agent help request.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentHelpResponse">
            <summary>
            This class represents a supervisor's response to an agent's help request.
            </summary>
            <remarks>This class provides support for sending a response to an agent's supervisor help request.
            <para>To send a response to a help request call <see cref="M:ININ.IceLib.Interactions.AgentHelpResponse.SendResponse(ININ.IceLib.Interactions.AgentHelpRequest,System.Boolean,System.String)"/> or <see cref="M:ININ.IceLib.Interactions.AgentHelpResponse.SendResponseAsync(ININ.IceLib.Interactions.AgentHelpRequest,System.Boolean,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing
            the <see cref="T:ININ.IceLib.Interactions.AgentHelpRequest"/> object and a flag indicating whether the supervisor will help. When the asynchronous
            send-response operation completes, it invokes the <c>completedCallback</c> delegate.<br/><br/></para>
            <note>The asynchronous version of the method is preferred since sending a response
            can be a lengthy operation.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpResponse.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentHelpResponse"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpResponse.SendResponse(ININ.IceLib.Interactions.AgentHelpRequest,System.Boolean,System.String)">
            <summary>
            Sends a response to an <see cref="T:ININ.IceLib.Interactions.AgentHelpRequest"/>.
            </summary>
            <param name="agentHelpRequest">The agent help request.</param>
            <param name="willHelp">If set to <see langword="true"/> will help.</param>
            <param name="response">The response, if one is provided.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpResponse.SendResponseAsync(ININ.IceLib.Interactions.AgentHelpRequest,System.Boolean,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a response to an <see cref="T:ININ.IceLib.Interactions.AgentHelpRequest"/>.
            </summary>
            <param name="agentHelpRequest">The agent help request.</param>
            <param name="willHelp">If set to <see langword="true"/> will help.</param>
            <param name="response">The response, if one is provided.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpResponse.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.AgentHelpResponse.AgentHelpRequested">
            <summary>
            Occurs when an Agent requests help.
            </summary>
            <remarks>This event will only occur while the Session is connected. (See 
            <see cref="M:ININ.IceLib.Connection.Session.Connect(ININ.IceLib.Connection.SessionSettings,ININ.IceLib.Connection.HostSettings,ININ.IceLib.Connection.AuthSettings,ININ.IceLib.Connection.StationSettings)"/> or <see cref="M:ININ.IceLib.Connection.Session.ConnectAsync(ININ.IceLib.Connection.SessionSettings,ININ.IceLib.Connection.HostSettings,ININ.IceLib.Connection.AuthSettings,ININ.IceLib.Connection.StationSettings,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.)</remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.AgentHelpResponse.AgentHelpResponseReceived">
            <summary>
            Occurs when an Agent help request is answered.
            </summary>
            <remarks>This event will only occur while the Session is connected. (See 
            <see cref="M:ININ.IceLib.Connection.Session.Connect(ININ.IceLib.Connection.SessionSettings,ININ.IceLib.Connection.HostSettings,ININ.IceLib.Connection.AuthSettings,ININ.IceLib.Connection.StationSettings)"/> or <see cref="M:ININ.IceLib.Connection.Session.ConnectAsync(ININ.IceLib.Connection.SessionSettings,ININ.IceLib.Connection.HostSettings,ININ.IceLib.Connection.AuthSettings,ININ.IceLib.Connection.StationSettings,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.)</remarks>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentHelpResponseEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.AgentHelpResponse.AgentHelpResponseReceived"/> event.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpResponseEventArgs.#ctor(ININ.IceLib.Interactions.AgentHelpRequest,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentHelpRequestEventArgs"/> class with the specified values.
            </summary>
            <param name="agentHelpRequest">The agent help request.</param>
            <param name="responder">The responder.</param>
            <param name="willHelp">If set to <see langword="true"/> will help.</param>
            <param name="response">The response.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpResponseEventArgs.Responder">
            <summary>
            Gets the responder.
            </summary>
            <value>The responder.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpResponseEventArgs.WillHelp">
            <summary>
            Gets a value indicating whether the supervisor will provide help.
            </summary>
            <value><see langword="true"/> if will provide help; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpResponseEventArgs.Response">
            <summary>
            Gets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceItem">
            <summary>
            This class represents an Agent Assistance Request Item.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItem.MessageAdded">
            <summary>
            Event that occurs when a new message is added to the assistance request.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItem.ItemChanged">
            <summary>
            Event that occurs when the assistance request changes.
            <note>
            This event will be invoked on the resulting <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/> for the first time after a call to 
            <see cref="M:ININ.IceLib.Interactions.InteractionsManager.SendAssistanceRequest(ININ.IceLib.Interactions.SendAssistanceRequestParameters)"/>.
            </note>
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItem.StateChanged">
            <summary>
            Event that occurs when the state of the assistance request changes.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItem.ParticipantAdded">
            <summary>
            Event that occurs when a new participant becomes involved in the assistance request.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItem.ParticipantChanged">
            <summary>
            Event that occurs when a participant's action changes.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItem.ParticipantRemoved">
            <summary>
            Event that occurs when a participant is no longer involved in the assistance request.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.SendMessage(System.String)">
            <summary>
            Sends a message to the assistance request.
            </summary>
            <param name="message">The message to send.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.SendMessageAsync(System.String,System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously sends a message to the assistance request.
            </summary>
            <param name="message">The message to send.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.Complete">
            <summary>
            Completes the assistance request.
            </summary>
            <exception cref="T:System.InvalidOperationException">The state of the assistance request is already <see cref="F:ININ.IceLib.Interactions.AssistanceItemState.Completed"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.CompleteAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously completes the assistance request.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
            <exception cref="T:System.InvalidOperationException">The state of the assistance request is already <see cref="F:ININ.IceLib.Interactions.AssistanceItemState.Completed"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.StartWatching">
            <summary>
            Starts watching the <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
            <exception cref="T:System.InvalidOperationException">The object is already being watched or cannot perform this operation on the <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.</exception>
            <remarks>
            <note>All event handlers should be added before calling <see cref="M:ININ.IceLib.Interactions.AssistanceItem.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.AssistanceItem.StartWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.StartWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously starts watching the <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.InvalidOperationException">The object is already being watched or cannot perform this operation on the <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.</exception>
            <remarks>
            <note>All event handlers should be added before calling <see cref="M:ININ.IceLib.Interactions.AssistanceItem.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.AssistanceItem.StartWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)"/>.</note>
            <ininHowWatchesWork/>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.StopWatching">
            <summary>
            Stops watching the <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The object is not being watched or cannot perform this operation on the <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.</exception>
            <remarks>
            <see cref="M:ININ.IceLib.Interactions.AssistanceItem.StopWatching"/> or <see cref="M:ININ.IceLib.Interactions.AssistanceItem.StopWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)"/>.
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.StopWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously stops watching the <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.InvalidOperationException">The object is not being watched or cannot perform this operation on the <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.</exception>
            <remarks>
            <see cref="M:ININ.IceLib.Interactions.AssistanceItem.StopWatching"/> or <see cref="M:ININ.IceLib.Interactions.AssistanceItem.StopWatchingAsync(System.EventHandler{System.ComponentModel.AsyncCompletedEventArgs},System.Object)"/>.
            <ininHowWatchesWork/>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItem.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.Participants">
            <summary>
            Gets the participants involved in the assistance request.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.Messages">
            <summary>
            Gets the messages associated with the assistance request.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.State">
            <summary>
            Gets the state of the assistance request.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.AssistanceItemId">
            <summary>
            Gets the ID of the assistance request.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.Station">
            <summary>
            Gets the agent's station.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.Workgroup">
            <summary>
            Gets the workgroup that the assistance request belongs to.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.Extension">
            <summary>
            Gets the agent's extension.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.InteractionId">
            <summary>
            Gets the interaction ID associated with the assistance request.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.InitiationTime">
            <summary>
            Gets the date and time the assistance request was initiated.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.ProblemDescription">
            <summary>
            Gets the problem description for the assistance request.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItem.InitiatingUser">
            <summary>
            Gets the participant that initiated the assistance request.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceItemChangedEventArgs">
            <summary>
            Provides data for the ItemChanged event of an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItemChangedEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemChangedEventArgs.AssistanceItem">
            <summary>
            Gets the assistance item.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceItemMessageAddedEventArgs">
            <summary>
            Provides data for the MessageAdded event of an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItemMessageAddedEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemMessageAddedEventArgs.AssistanceItemId">
            <summary>
            Gets the assistance request ID associated with the message.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemMessageAddedEventArgs.Message">
            <summary>
            Gets the message that was added.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceItemParticipantEventArgs">
            <summary>
            Provides data for the ParticipantAdded and ParticipantChanged event of an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItemParticipantEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemParticipantEventArgs.AssistanceItemId">
            <summary>
            Gets the assistance request ID.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemParticipantEventArgs.Participant">
            <summary>
            Gets the participant that was added.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceItemParticipantRemovedEventArgs">
            <summary>
            Provides data for the ParticipantRemoved event of an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItemParticipantRemovedEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemParticipantRemovedEventArgs.AssistanceItemId">
            <summary>
            Gets the assistance request ID.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemParticipantRemovedEventArgs.Participant">
            <summary>
            Gets the participant that was removed.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceItemState">
            <summary>
            Defines the states for an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItemState.None">
            <summary>
            The assistance item has no state.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItemState.Accepted">
            <summary>
            The assistance item has been accepted by a supervisor.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceItemState.Completed">
            <summary>
            The assistance item has been completed.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceItemStateChangedEventArgs">
            <summary>
            Provides data for the StateChanged event of an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceItemStateChangedEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemStateChangedEventArgs.AssistanceItemId">
            <summary>
            Gets the assistance request ID associated with the message.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceItemStateChangedEventArgs.AssistanceItemState">
            <summary>
            Gets the state of the assistance item.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceListEventArgs">
            <summary>
            Provides data for the ItemAdded/ItemRemoved events of an <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceListEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceListEventArgs.AssistanceItemId">
            <summary>
            Gets the assistance request ID.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceListItemAddedEventArgs">
            <summary>
            Provides data for the ItemAdded event of an <see cref="T:ININ.IceLib.Interactions.AssistanceList"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceListItemAddedEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceListItemAddedEventArgs.AssistanceItem">
            <summary>
            Gets the assistance item.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceMessage">
            <summary>
            Describes data associated with a message for an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceMessage.Participant">
            <summary>
            Gets the participant that initiated the message.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceMessage.TimeAdded">
            <summary>
            Gets the date and time the message was added.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceMessage.Message">
            <summary>
            Gets the message text.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceParticipant">
            <summary>
            Describes a participant associated with an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceParticipant.#ctor(System.String,System.String,ININ.IceLib.Interactions.AssistanceParticipantAction)">
            <summary>
            Initializes a new instance of <see cref="T:ININ.IceLib.Interactions.AssistanceParticipant"/> with the specified parameters.
            </summary>
            <param name="userId">The user ID of the participant.</param>
            <param name="displayName">The display name of the participant.</param>
            <param name="action">The action in regards to the assistance request of the participant.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <param ref="action"/> is not in the valid values of <see cref="T:ININ.IceLib.Interactions.AssistanceParticipantAction"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceParticipant.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceParticipant.UserId">
            <summary>
            Gets the user ID of the participant.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceParticipant.DisplayName">
            <summary>
            Gets the display name of the participant.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceParticipant.Action">
            <summary>
            Gets the action in regards to the assistance request of the participant.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceParticipantAction">
            <summary>
            Describes the action of an <see cref="T:ININ.IceLib.Interactions.AssistanceParticipant"/> in regards to an <see cref="T:ININ.IceLib.Interactions.AssistanceItem"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceParticipantAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceParticipantAction.Initiated">
            <summary>
            The participant initiated the assistance request.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceParticipantAction.Ignored">
            <summary>
            The participant is ignoring the assistance request.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.AssistanceParticipantAction.Accepted">
            <summary>
            The participant has accepted the assistance request.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AssistanceRequestCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.SendAssistanceRequestAsync(ININ.IceLib.Interactions.SendAssistanceRequestParameters,System.EventHandler{ININ.IceLib.Interactions.AssistanceRequestCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.AssistanceRequestCompletedEventArgs.#ctor(ININ.IceLib.Interactions.AssistanceItem,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of <see creaf="ININ.IceLib.Interactions.AssistanceRequestCompletedEventArgs"/> with the specified values.
            </summary>
            <param name="assistanceItem">The assistance request item.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.AssistanceRequestCompletedEventArgs.AssistanceItem">
            <summary>
            Gets the assistance request item.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs">
            <summary>
            Provides data for the <c>completedCallback</c> delegate of <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)"/>,
            <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.String}},System.Object)"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Int32}},System.Object)"/>,
            and <see cref="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.DateTime}},System.Object)"/> events of a
            <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/>.
            </summary>
            <icversion>3.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs.AlertingDetails">
            <summary>
            Gets the initial alerting details.
            </summary>
            <value>The alerting details.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.AttributeMonitorId">
            <summary>
            Identifies an <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> within the Interaction Center system. <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> has more details.
            </summary>
            <icversion>3.0 SU 6</icversion>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.#ctor(System.String,System.String)">
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AttributeMonitorId"/> class.
            </overloads>
            <param name="attributeName">The name of the attribute.</param>
            <param name="attributeValue">The value of the attribute.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:ININ.IceLib.Interactions.AttributeMonitorId"/> instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.Equals(ININ.IceLib.Interactions.AttributeMonitorId)">
            <summary>
            Determines whether the specified AttributeMonitorId is equal to the current QueueId.
            </summary>
            <param name="other">The AttributeMonitorId to compare with the current AttributeMonitorId.</param>
            <returns><see langword="true"/> if the specified AttributeMonitorId is equal to the current AttributeMonitorId; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.op_Equality(ININ.IceLib.Interactions.AttributeMonitorId,ININ.IceLib.Interactions.AttributeMonitorId)">
            <summary>
            Determines whether two instances of <see cref="T:ININ.IceLib.Interactions.AttributeMonitorId"/> are equal.
            </summary>
            <param name="a">The first <see cref="T:ININ.IceLib.Interactions.AttributeMonitorId"/> to compare.</param>
            <param name="b">The second <see cref="T:ININ.IceLib.Interactions.AttributeMonitorId"/> to compare.</param>
            <returns><see langword="true"/> if the instances are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.op_Inequality(ININ.IceLib.Interactions.AttributeMonitorId,ININ.IceLib.Interactions.AttributeMonitorId)">
            <summary>
            Determines whether two instances of <see cref="T:ININ.IceLib.Interactions.AttributeMonitorId"/> are not equal.
            </summary>
            <param name="a">The first <see cref="T:ININ.IceLib.Interactions.AttributeMonitorId"/> to compare.</param>
            <param name="b">The second <see cref="T:ININ.IceLib.Interactions.AttributeMonitorId"/> to compare.</param>
            <returns><see langword="true"/> if the instances are not equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributeMonitorId.CompareTo(ININ.IceLib.Interactions.AttributeMonitorId)">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.AttributeMonitorId.AttributeName">
            <summary>
            Gets the attribute name of the Monitor being identified.
            </summary>
            <value>The Name of the attribute.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AttributeMonitorId.AttributeValue">
            <summary>
            Gets the attribute value of the Monitor being identified.
            </summary>
            <value>The value of the attribute.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.AttributesEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.Interaction.AttributesChanged"/> event of a <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributesEventArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AttributesEventArgs"/> class with the specified values.
            </summary>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributesEventArgs.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AttributesEventArgs"/> class.
            </summary>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.AttributesEventArgs.InteractionAttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The interaction attribute names.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallAnalysisType">
            <summary>
            Used to specify if analysis needs to be performed on a call.
            </summary>
            <icversion>3.0 SU 1</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallAnalysisType.Default">
            <summary>
            Uses Default setting specified for the user.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallAnalysisType.Yes">
            <summary>
            Analysis will be performed on the call.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallAnalysisType.No">
            <summary>
            Analysis will not be performed on the call.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallbackCompletion">
            <summary>
            Specifies constants indicating the completion of a <see cref="T:ININ.IceLib.Interactions.CallbackInteraction"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackCompletion.None">
            <summary>The completion has not been assigned.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackCompletion.Success">
            <summary>The callback succeeded.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackCompletion.Failure">
            <summary>The callback failed.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallbackInteraction">
            <summary>
            Represents a callback interaction within the Interaction Center system. Callback interactions occur when agents call a customer
            in accordance with a callback request.</summary>
            <remarks>To set a callback request to completed, call either the <see cref="M:ININ.IceLib.Interactions.CallbackInteraction.SetCompletion(System.Boolean)"/> or the <see cref="M:ININ.IceLib.Interactions.CallbackInteraction.SetCompletionAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods and provide
            a boolean to indicate success or failure. When the asynchronous method returns it invokes the <c>completedCallback</c> delegate.
            <para>Calling properties on this object without a watch in place raises the <see cref="T:ININ.IceLib.NotCachedException"/>.<br/><br/></para>
            <note>The asynchronous methods are preferred since the stop completion task can be lengthy.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="T:ININ.IceLib.Interactions.Interaction">
             <summary>
             Represents an Interaction within the Interaction Center system.
             </summary>
             <example>The following is an example of retrieving an interaction attribute and returning the string value.
             <code lang="C#" escaped="false">
             private void queryAttributeButton_Click(object sender, System.EventArgs e)
            	{
            		if (_Interaction != null)
            		{
            			_Interaction.GetStringAttributeAsync(attributeNameTextBox.Text, GetStringAttributeCompleted, null);
            		}
            	}
            
             private void GetStringAttributeCompleted(object sender, GetAttributeCompletedEventArgs&lt;string&gt; e)
            	{
            		try
            		{
                      attributeValueTextBox.Text = e.AttributeValue;
            		}
            		catch (Exception ex)
            		{
            			attributeValueTextBox.Text = String.Empty;
            			MessageBox.Show(ex.StackTrace, ex.Message);
            		}
            	}
             </code>
             </example>
             <remarks>Interactions in the Interaction Center system can be calls, chats, emails, email, monitors, or recordings.
             <para>This class allows you to start, stop, and change watches on interaction attributes along with interaction control actions such as
             pickup, hold, disconnect, park, etc.</para>
             <para>To start watching interaction attributes, call <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> passing in an array of 
             attribute names to watch (For built in attributes see <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>). When the asynchronous start watching completes it invokes
             the specified <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"/> delegate.</para>
             <para>To stop watching interaction attributes, call <see cref="M:ININ.IceLib.Interactions.Interaction.StopWatching"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous stop watch action completes,
             it invokes the <c>completedCallback</c> delegate.</para>
             <para>To change the interaction attributes to watch, call <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the 
             asynchronous change watched attributes action completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>Calling <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is in place or <see cref="M:ININ.IceLib.Interactions.Interaction.StopWatching"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
             <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/>, or <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in place raises an <see cref="T:System.InvalidOperationException"/>.</para>
             <para>Accessing interaction properties when a watch is not in place raises a <see cref="T:ININ.IceLib.NotCachedException"/>.</para>
             <para>To retrieve the value of a Boolean attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttribute(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Boolean}},System.Object)"/> and provide an attribute name. When
             the asynchronous get attribute operation completes it invokes the <c>completedCallback</c> delegate returning the value of this attribute.</para>
             <para>To retrieve the value of a integer attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttribute(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Int32}},System.Object)"/> and provide an attribute name. When
             the asynchronous get attribute operation completes it invokes the <c>completedCallback</c> delegate returning the value of this attribute.</para>
             <para>To retrieve the value of a string attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttribute(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.String}},System.Object)"/> and provide an attribute name. When
             the asynchronous get attribute operation completes it invokes the <c>completedCallback</c> delegate returning the value of this attribute.</para>
             <para>To retrieve the value of a <see cref="T:System.DateTime"/> attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttribute(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.DateTime}},System.Object)"/> and provide an attribute name. When
             the asynchronous get attribute operation completes it invokes the <c>completedCallback</c> delegate returning the value of this attribute.</para>
             <para>To set the value of a <see cref="T:System.DateTime"/> attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttribute(System.String,System.DateTime)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttributeAsync(System.String,System.DateTime,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the set attribute value
             completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>To set the value of a string attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.SetStringAttribute(System.String,System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.SetStringAttributeAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the set attribute value
             completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>To append a value to a string attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.AppendStringAttribute(System.String,System.String,System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.AppendStringAttributeAsync(System.String,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> and provide the string to
             append to the attribute value. When the append operation completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>To perform a Pickup operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Pickup"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.PickupAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Pickup operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Disconnect operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Disconnect"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Disconnect operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Hold operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Hold(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.HoldAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Hold operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Record operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Record(System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.RecordAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Record operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a BlindTransfer operation on an interaction, call <c>BlindTransfer</c> or <c>BlindTransferAsync</c>. When the asynchronous BlindTransfer operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a ConsultTransfer operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.ConsultTransfer(ININ.IceLib.Interactions.InteractionId)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.ConsultTransferAsync(ININ.IceLib.Interactions.InteractionId,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous ConsultTransfer operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a TransferToVoicemail operation on an interaction, call <c>TransferToVoicemail</c> or <c>TransferToVoicemailAsync</c>. When the asynchronous TransferToVoicemail operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Park operation on an interaction, call <c>Park</c> or <c>ParkAsync</c>. When the asynchronous Park operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Listen operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Listen(System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.ListenAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Listen operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Coach operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Coach(System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.CoachAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Coach operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Mute operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Mute(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.MuteAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Mute operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Pause operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Pause(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.PauseAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Pause operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Private operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Private(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.PrivateAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Private operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Voicemail operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Voicemail"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.VoicemailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Voicemail operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Join operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Join"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.JoinAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Join operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a RequestHelp operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.RequestHelp(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.RequestHelpAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous RequestHelp operation completes it invokes the
             <c>completedCallback</c> delegate.<br/><br/></para>
             <note>The asynchronous methods are preferred since the above operations can be lengthy.</note>
             <ininGettingStartedInteractions/>
             </remarks>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InteractionCache)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.Interaction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <param name="cache">The cache.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="interactionsManager"/>, <paramref name="interactionId"/>, or <paramref name="cache"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.Interaction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.IsValidCapability(ININ.IceLib.Interactions.InteractionCapabilities)">
            <summary>
            Determines whether the interaction has the specified capabilities.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <param name="interactionCapabilities">The interaction capabilities.</param>
            <returns>
            	<see langword="true"/> if the interaction has the capabilities; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetRemoteName(System.String)">
            <summary>
            Sets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName"/>.
            </summary>
            <param name="remoteName">Remote party name.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetRemoteNameAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName"/>.
            </summary>
            <param name="remoteName">Remote party name.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetRemoteNameAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetRemoteNameAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendNote(System.String)">
            <summary>
            Appends to the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes"/>.
            </summary>
            <param name="appendedText">The appended text.</param>
            <note>The User and Timestamp will be prepended as a new line to the note using the format "User - Timestamp".</note>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendNoteAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously appends to the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes"/>.
            </summary>
            <param name="appendedText">The appended text.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <note>The User and Timestamp will be prepended as a new line to the note using the format "User - Timestamp".</note>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendNoteAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendNoteAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStateDescription(System.String)">
            <summary>
            Sets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription"/>.
            </summary>
            <param name="stateDescription">The state description.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStateDescriptionAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription"/>.
            </summary>
            <param name="stateDescription">The state description.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStateDescriptionAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStateDescriptionAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetAccountCodeId(System.String)">
            <summary>
            Sets the <see cref="P:ININ.IceLib.Interactions.Interaction.AccountCodeId">Account Code ID</see>.
            </summary>
            <param name="accountCodeId">The account code ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetAccountCodeIdAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the <see cref="P:ININ.IceLib.Interactions.Interaction.AccountCodeId">Account Code ID</see>.
            </summary>
            <param name="accountCodeId">The account code ID.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetAccountCodeIdAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetAccountCodeIdAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetWrapUpCodeId(System.String)">
            <summary>
            Sets the <see cref="P:ININ.IceLib.Interactions.Interaction.WrapUpCodeId">WrapUp Code ID</see>.
            </summary>
            <param name="wrapUpCodeId">The WrapUp code ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetWrapUpCodeIdAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the <see cref="P:ININ.IceLib.Interactions.Interaction.WrapUpCodeId">WrapUp Code ID</see>.
            </summary>
            <param name="wrapUpCodeId">The WrapUp code ID.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetWrapUpCodeIdAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetWrapUpCodeIdAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>
            	<see langword="true"/> if a watch is active and the specified value is being watched; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])">
            <summary>
            Starts watching the specified <paramref name="attributeNames"/> for this <see cref="T:ININ.IceLib.Interactions.Interaction"/>. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched or cannot perform this operation on <see cref="T:ININ.IceLib.Interactions.Interaction"/> object obtained from <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <remarks>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <note>Strings for <paramref name="attributeNames"/> are defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the specified <paramref name="attributeNames"/> for this <see cref="T:ININ.IceLib.Interactions.Interaction"/>. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <note>Strings for <paramref name="attributeNames"/> are defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes what attributes of the <see cref="T:ININ.IceLib.Interactions.Interaction"/> are being watched. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <see langword="null"/>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <see langword="null"/>.)</param>
            <param name="replaceExisting">if set to <see langword="true"/>, replace the existing list.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            <note>Strings for <paramref name="attributeNamesToAdd"/> and <paramref name="attributeNamesToRemove"/> are 
            defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The object is not being watched or cannot perform this operation on <see cref="T:ININ.IceLib.Interactions.Interaction"/> object 
            obtained from <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/>.
            </exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes what attributes of the <see cref="T:ININ.IceLib.Interactions.Interaction"/> are being watched. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <see langword="null"/>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <see langword="null"/>.)</param>
            <param name="replaceExisting">if set to <see langword="true"/>, replace the existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove 
            items not being watched.</para>
            <note>Strings for <paramref name="attributeNamesToAdd"/> and <paramref name="attributeNamesToRemove"/> are 
            defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributesAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributesAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StopWatching">
            <summary>
            Stops watching the Interaction.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The object is not being watched or cannot perform this operation on <see cref="T:ININ.IceLib.Interactions.Interaction"/> object 
            obtained from <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/>.
            </exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the Interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <ininAsyncMethodNode />
            <ininHowWatchesWork />
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StopWatchingAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StopWatchingAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetStringAttribute(System.String)">
            <summary>
            Gets the value of an attribute as a string.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The string value.</returns>
            <remarks>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.String}},System.Object)">
            <summary>
            Asynchronously gets the value of an attribute as a string.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetStringAttributes(System.String[])">
            <summary>
            Gets the values of attributes, where each attribute value is returned as a string.
            </summary>
            <param name="attributeNames">A list of the names of the attributes.</param>
            <returns>The attribute values.</returns>
            <remarks>
            This method will return the values from the cache, if the attributes are cached.
            If the attributes are not being cached, it will send a request to the server and get the attributes.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="attributeNames">attributeNames</paramref> is empty.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>3.0 SU 11</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetStringAttributesAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.GetStringAttributesCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously gets the values of attributes, where each attribute value is returned as a string.
            </summary>
            <param name="attributeNames">Names of the attributes.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="attributeNames">attributeNames</paramref> is empty.</exception>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            </remarks>
            <icversion>3.0 SU 11</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedStringAttribute(System.String)">
            <summary>
            Gets a string attribute.
            This method can get values of the attributes that are currently being watched.
            If this method is used to get a unwatched-attribute it will result in a <see cref="T:ININ.IceLib.NotCachedException"/>.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.String"/> that was returned.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <exception cref="T:System.ArgumentNullException">An argument was <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedStringsAttribute(System.String)">
            <summary>
            Gets an attribute containing an array of strings.
            This method can get values of the attributes that are currently being watched.
            If this method is used to get a unwatched-attribute it will result in a <see cref="T:ININ.IceLib.NotCachedException"/>.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.String"/> array that was returned.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <exception cref="T:System.ArgumentNullException">An argument was <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedStringsAttributeImpl(ININ.IceLib.Interactions.Internal.AttributeKey)">
            <summary>
            Gets an attribute containing an array of strings.
            This method can get values of the attributes that are currently being watched.
            If this method is used to get a unwatched-attribute it will result in a <see cref="T:ININ.IceLib.NotCachedException"/>.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <param name="attributeKey">The attribute name.</param>
            <returns>The <see cref="T:System.String"/> array that was returned.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <exception cref="T:System.ArgumentNullException">An argument was <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttribute(System.String)">
            <summary>
            Gets the value of an attribute as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The <see cref="T:System.DateTime"/> value.</returns>
            <remarks>
            <para>This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.</para>
            <para>The return value will be adjusted according to the <see cref="P:ININ.IceLib.Connection.Session.ClockSkew"/> value.</para>
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.DateTime}},System.Object)">
            <summary>
            Asynchronously gets the value of an attribute as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            <para>The return value will be adjusted according to the <see cref="P:ININ.IceLib.Connection.Session.ClockSkew"/> value.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedDateTimeAttribute(System.String)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> attribute.
            </summary>
            <remarks>
            <para>This method can get values of the attributes that are currently being watched.
            If this method is used to get a unwatched-attribute it will result in a <see cref="T:ININ.IceLib.NotCachedException"/>.</para>
            <para>The return value will be adjusted according to the <see cref="P:ININ.IceLib.Connection.Session.ClockSkew"/> value.</para>
            <ininWatchRequired/>
            </remarks>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.DateTime"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttribute(System.String)">
            <summary>
            Gets the value of an attribute as a Boolean.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The Boolean value.</returns>
            <remarks>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Boolean}},System.Object)">
            <summary>
            Asynchronously gets the value of an attribute as a Boolean.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttributeAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttributeAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedBooleanAttribute(System.String)">
            <summary>
            Gets a boolean attribute.
            </summary>
            <remarks>
            This method can get values of the attributes that are currently being watched.
            If this method is used to get an unwatched attribute it will result in a <see cref="T:ININ.IceLib.NotCachedException"/>.
            <ininWatchRequired/>
            </remarks>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.Boolean"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedBooleanAttributeImpl(ININ.IceLib.Interactions.Internal.AttributeKey)">
            <summary>
            Gets a boolean attribute.
            </summary>
            <remarks>
            This method can get values of the attributes that are currently being watched.
            If this method is used to get an unwatched attribute it will result in a <see cref="T:ININ.IceLib.NotCachedException"/>.
            <ininWatchRequired/>
            </remarks>
            <param name="attributeKey">The attribute name.</param>
            <returns>The <see cref="T:System.Boolean"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttribute(System.String)">
            <summary>
            Gets the value of an attribute as a Integer.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The Integer value.</returns>
            <remarks>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Int32}},System.Object)">
            <summary>
            Asynchronously gets the value of an attribute as a Integer.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedIntegerAttribute(System.String)">
            <summary>
            Gets an integer attribute.
            </summary>
            <remarks>
            This method can get values of the attributes that are currently being watched.
            If this method is used to get an unwatched attribute it will result in a <see cref="T:ININ.IceLib.NotCachedException"/>.
            <ininWatchRequired/>
            </remarks>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.Int32"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedIntegerAttributeImpl(ININ.IceLib.Interactions.Internal.AttributeKey)">
            <summary>
            Gets an integer attribute.
            </summary>
            <remarks>
            This method can get values of the attributes that are currently being watched.
            If this method is used to get an unwatched attribute it will result in a <see cref="T:ININ.IceLib.NotCachedException"/>.
            <ininWatchRequired/>
            </remarks>
            <param name="attributeKey">The attribute name.</param>
            <returns>The <see cref="T:System.Int32"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStringAttribute(System.String,System.String)">
            <summary>
            Sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStringAttributeAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStringAttributeAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStringAttributeAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStringAttributes(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the values of a set of string attributes.
            </summary>
            <param name="attributes">The mapping from attribute names to attribute values.</param>
            <exception cref="T:System.ArgumentNullException">A parameter, attribute name, or attribute value is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter is empty.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStringAttributesAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the values of a set of string attributes.
            </summary>
            <param name="attributes">The mapping from attribute names to attribute values.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter, attribute name, or attribute value is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter is empty.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttribute(System.String,System.DateTime)">
            <summary>
            Sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttributeAsync(System.String,System.DateTime,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttributeAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttributeAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendStringAttribute(System.String,System.String,System.String)">
            <summary>
            Sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="appendedValue">The value to append.</param>
            <param name="delimiter">The string used to separate appeneded values.  If <c>delimiter</c> is <see langword="null"/>
            the default delimiter of "|" will be used.  Use <c>String.Empty</c> to specify that no delimter is to be used.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendStringAttribute(ININ.IceLib.Interactions.Internal.AttributeKey,System.String,System.String)">
            <summary>
            Sets the value of a string attribute.
            </summary>
            <param name="attributeKey">The attribute key.</param>
            <param name="appendedValue">The value to append.</param>
            <param name="delimiter">The string used to separate appeneded values.  If <c>delimiter</c> is <see langword="null"/>
            the default delimiter of "|" will be used.  Use <c>String.Empty</c> to specify that no delimter is to be used.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendStringAttributeAsync(System.String,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="appendedValue">The value to append.</param>
            <param name="delimiter">The string used to separate appended values.  If <c>delimiter</c> is <see langword="null"/>
            the default delimiter of "|" will be used.  Use <c>String.Empty</c> to specify that no delimiter is to be used.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendStringAttributeAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendStringAttributeAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Disconnect">
            <summary>
            Disconnects this <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously disconnects this <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.DisconnectAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.DisconnectAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Pickup">
            <summary>
            Picks up this <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PickupAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously picks up this <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PickupAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PickupAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.BlindTransfer(System.String)">
            <overloads>Performs a blind transfer to the specified number.</overloads>
            <summary>
            Performs a blind transfer to the specified number given the number as a <c>string</c>.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </remarks>
            <param name="target">The number to which to transfer.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.BlindTransfer(ININ.IceLib.Interactions.QueueId)">
            <summary>
            Performs a blind transfer to the specified target, given the <see cref="T:ININ.IceLib.Interactions.QueueId"/> of the target.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </remarks>
            <param name="target">The queue to which to transfer.  The <see cref="T:ININ.IceLib.Interactions.QueueType"/> member must be either
            <see cref="F:ININ.IceLib.Interactions.QueueType.User"/>, <see cref="F:ININ.IceLib.Interactions.QueueType.Station"/>, or <see cref="F:ININ.IceLib.Interactions.QueueType.Orbit"/>.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An invalid <see cref="T:ININ.IceLib.Interactions.QueueId"/> was used as a parameter.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.BlindTransferAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <overloads>Asynchronously performs a blind transfer to the specified number.</overloads>
            <summary>
            Asynchronously performs a blind transfer to the specified number, given that number as a string.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.BlindTransferAsync(ININ.IceLib.Interactions.QueueId,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously performs a blind transfer to the specified target, given the <see cref="T:ININ.IceLib.Interactions.QueueId"/> of the target.
            </summary>
            <param name="target">The queue to which to transfer.  The <see cref="T:ININ.IceLib.Interactions.QueueType"/> member must be either
            <see cref="F:ININ.IceLib.Interactions.QueueType.User"/>, <see cref="F:ININ.IceLib.Interactions.QueueType.Station"/>, or <see cref="F:ININ.IceLib.Interactions.QueueType.Orbit"/>.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An invalid <c>QueueId</c> was used as a parameter.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.BlindTransferAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.BlindTransferAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ConsultTransfer(ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Performs a consult transfer with the specified interaction.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.ConsultId"/>.
            </remarks>
            <param name="consultId">The interaction to consult with.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <c>Session</c> has been disposed.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ConsultTransferAsync(ININ.IceLib.Interactions.InteractionId,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously performs a consult transfer with the specified interaction.
            </summary>
            <param name="consultId">The interaction to consult with.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.ConsultId"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ConsultTransferAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ConsultTransferAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemail(System.String)">
            <overloads>Transfers to voicemail at the specified number.</overloads>
            <summary>
            Transfers to voicemail at the specified number, given a <c>string</c>.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </remarks>
            <param name="target">The number to which to transfer.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <seealso cref="M:ININ.IceLib.Interactions.Interaction.Voicemail"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemail(ININ.IceLib.Interactions.QueueId)">
            <summary>
            Transfers to voicemail at the specified number, given a <see cref="T:ININ.IceLib.Interactions.QueueId"/>.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </remarks>
            <param name="target">The number to which to transfer.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <seealso cref="M:ININ.IceLib.Interactions.Interaction.Voicemail"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemailAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <overloads>Asynchronously transfers to voicemail at the specified number.</overloads>
            <summary>
            Asynchronously transfers to voicemail at the specified number, given the target as a <c>string</c>.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <seealso cref="M:ININ.IceLib.Interactions.Interaction.VoicemailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemailAsync(ININ.IceLib.Interactions.QueueId,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously transfers to voicemail at the specified number, given the target as a <see cref="T:ININ.IceLib.Interactions.QueueId"/>.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <seealso cref="M:ININ.IceLib.Interactions.Interaction.VoicemailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemailAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemailAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Park(System.String)">
            <overloads>Parks the <see cref="T:ININ.IceLib.Interactions.Interaction"/> on the specified target.</overloads>
            <summary>
            Parks the <see cref="T:ININ.IceLib.Interactions.Interaction"/> on the specified target, given a <c>string</c>.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </remarks>
            <param name="target">The number to which to transfer.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.ResourceInUseException">Attempt to park to orbit queue failed because the Orbit was already in use.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Park(ININ.IceLib.Interactions.QueueId)">
            <summary>
            Parks the <see cref="T:ININ.IceLib.Interactions.Interaction"/> on the specified target, given the <see cref="T:ININ.IceLib.Interactions.QueueId"/> of the target.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </remarks>
            <param name="target">The queue to which to transfer.  The <see cref="T:ININ.IceLib.Interactions.QueueType"/> member must be either
            <see cref="F:ININ.IceLib.Interactions.QueueType.User"/>, <see cref="F:ININ.IceLib.Interactions.QueueType.Station"/>, or <see cref="F:ININ.IceLib.Interactions.QueueType.Orbit"/>.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An invalid <see cref="T:ININ.IceLib.Interactions.QueueId"/> was used as a parameter.</exception>
            <exception cref="T:ININ.IceLib.ResourceInUseException">Attempt to park to orbit queue failed because the Orbit was already in use.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ArgumentException">The target queue type is not valid for this operation.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ParkAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <overloads>Asynchronously parks the <see cref="T:ININ.IceLib.Interactions.Interaction"/> on the specified target.</overloads>
            <summary>
            Asynchronously parks the <see cref="T:ININ.IceLib.Interactions.Interaction"/> on the specified target, given a <c>string</c>.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ParkAsync(ININ.IceLib.Interactions.QueueId,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously parks the <see cref="T:ININ.IceLib.Interactions.Interaction"/> on the specified target, given the <see cref="T:ININ.IceLib.Interactions.QueueId"/> of the target.
            </summary>
            <param name="target">The queue to which to transfer.  The <see cref="T:ININ.IceLib.Interactions.QueueType"/> member must be either
            <see cref="F:ININ.IceLib.Interactions.QueueType.User"/>, <see cref="F:ININ.IceLib.Interactions.QueueType.Station"/>, or <see cref="F:ININ.IceLib.Interactions.QueueType.Orbit"/>.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Target"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An invalid <see cref="T:ININ.IceLib.Interactions.QueueId"/> was used as a parameter.</exception>
            <exception cref="T:System.ArgumentException">The target queue type is not valid for this operation.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ParkAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ParkAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Listen(System.Boolean,System.Boolean)">
            <summary>
            Changes the listen state of the interaction.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/> and <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Supervisor"/>.
            </remarks>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="supervisor">If set to <see langword="true"/>, supervisory.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ListenAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the listen state of the interaction.
            </summary>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="supervisor">If set to <see langword="true"/>, supervisory.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/> and <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Supervisor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ListenAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ListenAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Coach(System.Boolean,System.Boolean)">
            <summary>
            Changes the coaching state of the interaction.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/> and <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Supervisor"/>.
            </remarks>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="supervisor">If set to <see langword="true"/>, supervisory.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.CoachAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the coaching state of the interaction.
            </summary>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="supervisor">If set to <see langword="true"/>, supervisory.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/> and <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Supervisor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.CoachAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.CoachAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Hold(System.Boolean)">
            <summary>
            Places the interaction on hold or takes it off hold.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </remarks>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.HoldAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously places the interaction on hold or takes it off hold.
            </summary>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.HoldAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.HoldAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Mute(System.Boolean)">
            <summary>
            Changes the mute state.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </remarks>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.MuteAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the mute state.
            </summary>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.MuteAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.MuteAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Pause(System.Boolean)">
            <summary>
            Changes the recording pause state.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </remarks>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PauseAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the recording pause state.
            </summary>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PauseAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PauseAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Private(System.Boolean)">
            <summary>
            Changes the private state.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </remarks>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PrivateAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the private state.
            </summary>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PrivateAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PrivateAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Record(System.Boolean,System.Boolean)">
            <summary>
            Changes the record state.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/> and <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Supervisor"/>.
            </remarks>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="supervisor">If set to <see langword="true"/>, supervisory.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RecordAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the record state.
            </summary>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="supervisor">If set to <see langword="true"/>, supervisory.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/> and <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Supervisor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RecordAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RecordAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SecureRecordingPause(ININ.IceLib.Interactions.SecureRecordingPauseParameters)">
            <summary>
            Pauses or resumes a secure recording. Secure recordings are recordings started by Recorder, which are 
            configured via Interaction Administrator.
            </summary>
            <remarks>
            <note>
            This recording pause has nothing to do with a recording started by <see cref="M:ININ.IceLib.Interactions.Interaction.Record(System.Boolean,System.Boolean)"/> or 
            <see cref="M:ININ.IceLib.Interactions.Interaction.RecordAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.
            </note>
            </remarks>
            <param name="parameters">The parameters specify what type of action with regards to the pause should be 
            taken. <see cref="T:ININ.IceLib.Interactions.SecureRecordingPauseParameters"/> for more details on setting the parameters.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SecureRecordingPause(System.Boolean)">
            <summary>
            Changes the secure recording pause state.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </remarks>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>3.0 SU 15, 4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SecureRecordingPauseAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the secure recording pause state.
            </summary>
            <param name="on">If set to <see langword="true"/>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </para>
            </remarks>
            <icversion>3.0 SU 15, 4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SecureRecordingPauseAsync(ININ.IceLib.Interactions.SecureRecordingPauseParameters,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Pauses or resumes a secure recording. Secure recordings are recordings started by Recorder, which are 
            configured via Interaction Administrator. 
            </summary>
            <param name="parameters">The parameters specify what type of action with regards to the pause should be 
            taken. See <see cref="T:ININ.IceLib.Interactions.SecureRecordingPauseParameters"/> for more details on setting the parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.On"/>.
            </para>
            <note>
            This recording pause has nothing to do with a recording started by <see cref="M:ININ.IceLib.Interactions.Interaction.Record(System.Boolean,System.Boolean)"/> or 
            <see cref="M:ININ.IceLib.Interactions.Interaction.RecordAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.
            </note>
            </remarks>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SecureRecordingPauseAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SecureRecordingPauseAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Voicemail">
            <summary>
            Sends the <see cref="T:ININ.IceLib.Interactions.Interaction"/> to voicemail.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <seealso cref="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemail(System.String)"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.VoicemailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the <see cref="T:ININ.IceLib.Interactions.Interaction"/> to voicemail.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <exception cref="T:System.Exception">Exception encountered during asynchronous call.</exception>
            <seealso cref="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemailAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.VoicemailAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.VoicemailAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Join">
            <summary>
            Joins this <see cref="T:ININ.IceLib.Interactions.Interaction"/> in a conference.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.JoinAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously joins this <see cref="T:ININ.IceLib.Interactions.Interaction"/> in a conference.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
            <exception cref="T:System.Exception">Exception encountered during asynchronous call.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.JoinAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.JoinAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RequestHelp(System.String)">
            <summary>
            Sends a request for help.
            </summary>
            <remarks>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Message"/>.
            </remarks>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RequestHelpAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a request for help.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <para>
            This method will raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event and 
            (if the action was not cancelled) the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/> event.
            When those events are raised, the two events' arguments (<see cref="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters"/> 
            and <see cref="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters"/>, respectively) will contain an 
            entry for <see cref="F:ININ.IceLib.Interactions.ActionParameterNames.Message"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RequestHelpAsyncPerformTask(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RequestHelpAsyncCompleted(ININ.IceLib.Interactions.Interaction.AsyncInteractionState)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.InitiateSecureInput(ININ.IceLib.Interactions.SecureInputParameters)">
            <summary>
            Initiates secure input which allows for confidential information (e.g., credit card number, expiration date, etc) to be securely provided.
            </summary>
            <param name="secureInputParameters">The secure input parameters.</param>
            <returns>The transaction ID that was returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="secureInputParameters"/> is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">An error occurred while initiating secure input.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.InitiateSecureInputAsync(ININ.IceLib.Interactions.SecureInputParameters,System.EventHandler{ININ.IceLib.Interactions.InitiateSecureInputCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously initiates secure input.
            </summary>
            <param name="secureInputParameters">The secure input parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.EndAction(System.IAsyncResult)">
            <exception cref="T:System.ArgumentNullException"><c>asyncResult</c> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ReadAttribute(System.Globalization.CultureInfo,ININ.ThinBridge.Message)">
            <exception cref="T:ININ.IceLib.IceLibException">Unexpected attributes encountered.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ThrowIfInvalidQueueForTransfer(ININ.IceLib.Interactions.QueueId,System.String)">
            <exception cref="T:System.ArgumentException">Invalid queue type.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.OnAttributesChanged(ININ.IceLib.Interactions.AttributesEventArgs)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.OnDeallocated(System.EventArgs)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.OnLostRights(System.EventArgs)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.OnMorphed(ININ.IceLib.Interactions.InteractionEventArgs)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
            <exception cref="T:System.Exception">An unexpected exception was thrown.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
            <exception cref="T:System.Exception">An unexpected exception was thrown.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InteractionIdForInternalUse">
            <summary>
            Provide internal access to interaction ID that doesn't do any logging, for performance reasons.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsShared">
            <summary>
            Gets a value indicating whether this is a shared instance.
            </summary>
            <value><see langword="true"/> if this is a shared instance; otherwise, <see langword="false"/>.</value>
            <remarks>
            <para>IceLib automatically conserves memory by maintaining a shared instance of each unique Interaction that it creates internally.</para>
            <para>A shared instance cannot be watched. This prevents the assignment of conflicting sets of watched attributes. To watch this Interaction, create a new instance using the InteractionId.</para>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.Interaction.AttributesChanged">
            <summary>
            Occurs when an Interaction's watched attributes change.
            </summary>
            <remarks>
            This event will only occur when attributes being watched have changed. To start
            watching for attributes call either the <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> method or
            the <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method. To modify which attributes are
            being watched once the watch has been started, use the 
            <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.Interaction.Deallocated">
            <summary>
            Occurs when an Interaction is deallocated.
            </summary>
            <remarks>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.Interaction"/> is being watched.
            To start watching call either the <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> method
            or the <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.Interaction.LostRights">
            <summary>
            Occurs when the User loses rights for the Interaction.
            </summary>
            <remarks>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.Interaction"/> is being watched.
            To start watching call either the <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> method
            or the <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.Interaction.Morphed">
            <summary>
            Occurs when an Interaction is replaced by another (e.g. during a Consult
            operation).
            </summary>
            <remarks>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.Interaction"/> is being watched.
            To start watching call either the <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> method
            or the <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsConnected">
            <summary>
            Gets a value indicating whether the Interaction is in a connected state.
            IsConnected is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.State"/> 
            attribute is being watched.
            </summary>
            <value>
            	<see langword="true"/> if this instance is connected; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            It is considered connected if its in Connected, Messaging, or System.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsDisconnected">
            <summary>
            Gets a value indicating whether the Interaction is in a disconnected state.
            IsDisconnected is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.State"/> 
            attribute is being watched.
            </summary>
            <value>
            	<see langword="true"/> if this instance is disconnected; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Looks for External or Internal disconnect state.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Capabilities">
            <summary>
            Gets the capabilities of this interaction.  The <see cref="P:ININ.IceLib.Connection.Session.EffectiveStation"/> comes into effect when
            determining the capabilities of this interaction.  Capabilities are only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Capabilities"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The capabilities.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ActualCapabilities">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Capabilities"/>.
            ActualCapabilities is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Capabilities"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <seealso cref="P:ININ.IceLib.Interactions.Interaction.Capabilities"/>
            <value>The actual capabilities.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ConferenceId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ConferenceId"/>.
            ConferenceId is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ConferenceId"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The conference ID, or <see langword="null"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InitiationTime">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InitiationTime"/>.
            InitiationTime is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InitiationTime"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The initiation time.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.DisconnectionTime">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime"/>.
            DisconnectionTime is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The disconnection time.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Duration">
            <summary>
            Gets the duration of the Interaction as of the current time (using <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InitiationTime"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime"/>).
            Duration is only available when <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InitiationTime"/>, <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.State"/> are being watched.
            </summary>
            <value>The duration.</value>
            <remarks>
            <para>This is a helper that returns the duration from the <see cref="P:ININ.IceLib.Interactions.Interaction.InitiationTime"/> until either the <see cref="P:ININ.IceLib.Interactions.Interaction.DisconnectionTime"/> (if disconnected)
            or the current time (if connected).</para>
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.TimeInWorkgroupQueue">
            <summary>
            Gets the duration of the Interaction as of the time it joined a workgroup queue (using <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueTimestamp"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime"/>).
            TimeInWorkgroupQueue is only available when <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueTimestamp"/>, <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.State"/> are being watched.
            </summary>
            <value>The duration.</value>
            <remarks>
            <para>This is a helper that returns the duration from the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueTimestamp"/> until either the <see cref="P:ININ.IceLib.Interactions.Interaction.DisconnectionTime"/> (if disconnected)
            or the current time (if connected).</para>
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0 SU 1</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.DeallocationTime">
            <exclude/><summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DeallocationTime"/>.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The deallocation time.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.DeallocationSeconds">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DeallocationSeconds"/>.
            DeallocationSeconds is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DeallocationSeconds"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The number of seconds after the interaction is disconnected until it will automatically be deallocated.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.LineName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.LineQueueName">name of the line queue</see>.
            LineName is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.LineQueueName"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The unscoped name of the line queue.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsMuted">
            <summary>
            Gets a value indicating whether this instance is <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Muted"/>.
            IsMuted is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Muted"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value><see langword="true"/> if this instance is muted; otherwise, <see langword="false"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsHeld">
            <summary>
            Gets a value indicating whether this instance is <see cref="F:ININ.IceLib.Interactions.InteractionState.Held"/>.
            IsHeld is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.State"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value><see langword="true"/> if this instance is held; otherwise, <see langword="false"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsRecording">
            <summary>
            Gets a value indicating whether this instance is being recorded by the session user.
            IsRecording is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/> 
            attributes are being watched.
            </summary>
            <value>
            	<see langword="true"/> if this instance is being recorded; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Requires both <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/>.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">An associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsPaused">
            <summary>
            Gets a value indicating whether this instance has a paused recorder for the session user.
            IsPaused is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/> 
            attributes are being watched.
            </summary>
            <value><see langword="true"/> if this instance is paused; otherwise, <see langword="false"/>.</value>
            <remarks>
            Requires both <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/>.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">An associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsMonitored">
            <summary>
            Gets a value indicating whether this instance is being monitored by the session user.
            IsMonitored is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Monitors"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorMonitors"/> 
            attributes are being watched.
            </summary>
            <value>
            	<see langword="true"/> if this interaction is monitored; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Requires both <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Monitors"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorMonitors"/>.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">An associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsPrivate">
            <summary>
            Gets a value indicating whether this instance is <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Private"/>.
            IsPrivate is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Private"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value><see langword="true"/> if this instance is private; otherwise, <see langword="false"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteAddress">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteAddress"/>.
            RemoteAddress is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteAddress"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The remote address.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteId">remote party ID</see> as a friendly display value.
            RemoteId is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteId"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The remote ID.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName">name of the remote party</see>.
            RemoteName is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The name of the remote.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteDisplay">
            <summary>
            Gets a displayable identifier for an interaction.
            RemoteDisplay is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName"/> if populated, otherwise the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteId"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.StationQueueNames">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StationQueueNames">unscoped name(s) of the station queue(s)</see>.
            StationQueueNames is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StationQueueNames"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The unscoped name(s) of the station queue(s).</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.UserQueueNames">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.UserQueueNames">unscoped name(s) of the user queue(s)</see>.
            UserQueueNames is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.UserQueueNames"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The unscoped name(s) of the user queue(s).</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsOnMyInteractionsQueue">
            <summary>
            Gets a value indicating whether this instance is on the MyInteractions queue.
            IsOnMyInterationsQueue is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.UserQueueNames"/> 
            and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StationQueueNames"/> attributes are being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>
            	<see langword="true"/> if this instance is on the MyInteractions queue; otherwise, <see langword="false"/>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attributes are not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.WorkgroupQueueDisplayName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueDisplayName">display name of the workgroup queue</see>.
            WorkgroupQueueDisplayName is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueDisplayName"/> attribute is being watched.
            </summary>
            <value>The display name of the workgroup queue.</value>
            <remarks>
            <para>This can be assigned via handlers to be different than the actual workgroup name.
            The associated attribute to set from handlers is 'Eic_AssignedWorkgroup'.</para>
            <para>This can allow client applications to display a more "friendly name" to the end user,
            by making the desired handler customization and using the WorkgroupQueueDisplayName attribute
            for display purposes.</para>
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.WorkgroupQueueName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueName">unscoped name of the workgroup queue</see>.
            WorkgroupQueueName is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueName"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The unscoped name of the workgroup queue.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Notes">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes"/>.
            Notes is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The notes.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Log">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Log"/>.
            Log is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Log"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The log.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.StateDescription">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription">state display string</see>.
            StateDescription is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The state display string.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.LocalAddress">
            <summary>
            Gets the address of the local party.
            LocalAddress is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalAddress"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The local address string.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.LocalId">
            <summary>
            Gets the displayable address of local party.
            LocalId is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalId"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The displayable local address string.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.LocalName">
            <summary>
            Gets the user-friendly name of the local party.
            LocalName is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalName"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The user-friendly name of the local party.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.State">
            <summary>
            Gets the Interaction <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.State"/>. 
            State is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.State"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The state.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Direction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Direction"/>.
            Direction is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Direction"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The direction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.CallType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallType"/>.
            CallType is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallType"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The call type.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Monitors">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Monitors"/>.
            Monitors is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Monitors"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The monitors.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.SupervisorMonitors">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorMonitors"/>.
            SupervisorMonitors is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorMonitors"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The supervisor monitors.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.MonitorsCombinedCount">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorsCombinedCount"/>.
            MonitorsCombinedCount is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorsCombinedCount"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The monitors combined count.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Recorders">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/>.
            Recorders is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The recorders.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.SupervisorRecorders">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/>.
            SupervisorRecorders is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/> 
            attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The supervisor recorders.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RecordersCombinedCount">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RecordersCombinedCount"/>.
            RecordersCombinedCount is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RecordersCombinedCount"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The recorders combined count.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InteractionType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionType">type of the interaction</see>.
            InteractionType is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionType"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The type of the interaction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.MonitorType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorType">type of the monitor</see>.
            MonitorType is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorType"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The type of the monitor.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.DisconnectRingNoAnswer">
            <summary>
            Gets a value indicating whether to <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectRingNoAnswer">disconnect on ring no answer</see>.
            DisconnectRingNoAnswer is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectRingNoAnswer"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>
            	<see langword="true"/> if to disconnect on ring no answer; otherwise, <see langword="false"/>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ClientMessage">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ClientMessage"/>.
            ClientMessage is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ClientMessage"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The client message.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.AlertSound">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AlertSound"/>.
            AlertSound is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AlertSound"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The alert sound.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.CallIdKey">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallIdKey"/>.
            CallIdKey is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallIdKey"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The call ID key. IC generates unique IDs for each interaction in the system. These identifiers are called "Call ID" 
            in Interaction Client, and they are modified and stored in the IC database as unique "CallIDKey" in the 
            "Call ID" column. These identifiers apply to all interaction types, not just calls. The CallID is 
            embedded in the CallIDKey. CallIDKey is the 10 digit CallId plus an eight digit date in this format:  
            YYYYMMDD.  For example, a call placed on April 9, 2004 might show a Call ID of 2101990183 on Interaction
            Client.  The resulting CallIDKey stored in the database would be that CallID plus the date: 
            210199018320040409.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.PopApplication">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.PopApplication">application that should be popped</see> for the Interaction.
            PopApplication is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.PopApplication"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The pop application.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ImmediateAccess">
            <summary>
            Gets a value indicating whether to allow <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ImmediateAccess"/>.
            ImmediateAccess is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ImmediateAccess"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value><see langword="true"/> if immediate access allowed; otherwise, <see langword="false"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.OrbitQueueName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.OrbitQueueName">unscoped orbit queue name</see>.
            OrbitQueueName is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.OrbitQueueName"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The unscoped name of the orbit queue.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.AccountCodeId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AccountCodeId">Id of the account code</see>.
            AccountCodeId is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AccountCodeId"/> attribute is being watched.
            </summary>
            <value>The account code ID.</value>
            <remarks><i>Account codes</i> are used in IC to associate calls with accounts. An account 
            code is a number assigned to an account name. Account codes are mapped to incoming and 
            outgoing calls for reporting purposes. For example, Interaction Client users can assign 
            account codes to incoming and outgoing calls from the Interactions page, or from any queue.
            <para>Users who have been given access to an account code can assign it to a call so it can 
            be tracked. Account codes can also be used to track outgoing calls made to specific customers, 
            or to track incoming call information for billing purposes.</para>
            <para>For more information about Account Codes, refer to the topic titled <i>Account Codes in IC</i> in 
            the <i>Technical Reference Documents</i> section of the <i>IC Documentation library</i> on your 
            server.<br/><br/></para>
            
            <note>The account code ID can be used with an ININ.IceLib.People.AccountCode.</note>
            <ininWatchRequired/>
            </remarks>
            
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.WrapUpCodeId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WrapUpCodeId">ID of the wrap up code</see>.
            </summary>
            <value>The wrap up code ID.</value>
            <remarks>The ID can be used with an ININ.IceLib.People.WrapUpCode.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.LocalSecurityLevelRequested">
            <summary>
            Gets the requested local security level. (See <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalSecurityLevelRequested"/>).
            LocalSecurityLevelRequested is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalSecurityLevelRequested"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The requested local security level.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteSecurityLevelRequested">
            <summary>
            Gets the requested remote security level. (See <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteSecurityLevelRequested"/>).
            ImmediateAccess is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ImmediateAccess"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The requested remote security level.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.SecurityLevelActual">
            <summary>
            Gets the actual security level. (See <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SecurityLevelActual"/>).
            SecurityLevelActual is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SecurityLevelActual"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The actual security level.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Segments">
            <summary>
            Gets the collection of segments for this interaction. (See <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionConnectionSegments"/>).
            Segments is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionConnectionSegments"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The segments for this interaction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.LastSegmentForCurrentUser">
            <summary>
            Gets the last segment for the session user on this interaction.
            LastSegmentForCurrentUser is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionConnectionSegments"/> attribute is being watched.
            </summary>
            <value>The last segment for the current user.</value>
            <remarks>
            If the session user does not have a segment on this interaction, returns <see langword="null"/>.
            Otherwise, returns the most recent segment for the session user.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.LastSegment">
            <summary>
            Gets the last segment on this interaction.
            LastSegment is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionConnectionSegments"/> attribute is being watched.
            </summary>
            <value>The last segment.</value>
            <remarks>
            If there are no segments on this interaction, returns <see langword="null"/>.
            Otherwise, returns the most recent segment.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.WrapUpAssignments">
            <summary>
            Gets the wrap up assignments for this interaction. (See <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WrapUpAssignments"/>).
            WrapUpAssignments is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WrapUpAssignments"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The wrap up assignments.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.AssociatedProcessInstanceId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AssociatedProcessInstanceId"/>.
            AssociatedProcessInstanceId is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AssociatedProcessInstanceId"/> attribute is being watched.
            </summary>
            <value>The ID of the process that this interaction is associated with.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.AssociatedProcessDisplayName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AssociatedProcessDisplayName"/>.
            AssociatedProcessDisplayName is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AssociatedProcessDisplayName"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The display name of the process that this interaction is associated with.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0 SU 1</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.SecurityLevelViolation">
            <summary>
            Gets the reason for the security level violation. (See <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SecurityLevelViolation"/>).
            SecurityLevelViolation is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SecurityLevelViolation"/> attribute is being watched.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value>The reason for the security level violation.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ConsultCallId">
            <summary>
            Gets ID of the <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>, if this interaction is participating in a consult transfer.
            ConsultCallId is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ConsultCallId"/> attribute is being watched.
            </summary>
            <remarks>
            The value returned represents the ID of the <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.  If the value is
            not set, this interaction is not a <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.
            <ininWatchRequired/>
            </remarks>
            <value>The ID of the <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ConsultTransferSpeakers">
            <summary>
            Gets the speakers in a consult transfer if this interaction is a <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.
            ConsultTransferSpeakers is only available if the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ConsultTransferSpeakers"/> attribute is being watched.
            </summary>
            <remarks>
            The value returned represents the speakers on a <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.
            <ininWatchRequired/>
            </remarks>
            <value>The speakers in a <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallbackInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteraction.SetCompletion(System.Boolean)">
            <summary>
            Sets the callback completion.
            </summary>
            <param name="completion">If set to <see langword="true"/> completed successfully.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteraction.SetCompletionAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the callback completion.
            </summary>
            <param name="completion">If set to <see langword="true"/> completed successfully.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks><ininAsyncMethodNote /></remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteraction.CallbackPhone">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackPhone">callback phone number</see>.
            </summary>
            <value>The callback phone number.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteraction.CallbackMessage">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackMessage">callback message</see>.
            </summary>
            <value>The callback message.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteraction.CallbackCompletionDisplay">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackCompletionDisplay">callback message</see>.
            </summary>
            <value>The callback message.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteraction.CallbackCompletion">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackCompletion">callback completion</see>.
            </summary>
            <value>The callback completion.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteraction.CallbackAssociatedCallId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackAssociatedCallId">callback associated call ID</see>.
            </summary>
            <value>The callback associated call ID.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallbackInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with CallbackInteractions.
            </summary>
            <doccompleted/>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with <see cref="T:ININ.IceLib.Interactions.Interaction"/>
            watches.
            </summary>
            <remarks>The attribute names specified in this class are used in conjunction
            with the synchronous and asynchronous StartWatching and ChangeWatchedAttributes
            methods in the <see cref="T:ININ.IceLib.Interactions.Interaction"/>, <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>, and 
            <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> classes.</remarks>
            <seealso cref="T:ININ.IceLib.Interactions.Interaction"/>
            <seealso cref="T:ININ.IceLib.Interactions.InteractionQueue"/>
            <seealso cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Capabilities">
            <summary>The capabilities of the <see cref="T:ININ.IceLib.Interactions.Interaction"/>.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.ConferenceId">
            <summary>The <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionId"/> of the associated ConferenceInteraction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.InitiationTime">
            <summary>The time when the interaction was initiated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime">
            <summary>The time when the interaction was disconnected.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.DeallocationTime">
            <exclude/><summary>The time when the interaction was deallocated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.DeallocationSeconds">
            <summary>The number of seconds after the interaction is disconnected until it will automatically be deallocated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionId">
            <summary>The <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionId"/> of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.LineQueueName">
            <summary>The unscoped name of the line queue on which the interaction is occurring.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Muted">
            <summary>Whether the interaction is muted.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Private">
            <summary>Whether the interaction is marked as private.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteAddress">
            <summary>The remote address.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteId">
            <summary>The ID of the remote party.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName">
            <summary>The name of the remote party.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.StationQueueNames">
            <summary>The name(s) of the station queue(s).</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.UserQueueNames">
            <summary>The unscoped names of the user queue(s).</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueDisplayName">
            <summary>The display name of the workgroup queue.</summary>
            <remarks>
            <para>This can be assigned via handlers to be different than the actual workgroup name.
            The associated attribute to set from handlers is 'Eic_AssignedWorkgroup'.</para>
            <para>This can allow client applications to display a more "friendly name" to the end user,
            by making the desired handler customization and using the WorkgroupQueueDisplayName attribute
            for display purposes.</para>
            </remarks>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueName">
            <summary>The unscoped name of the workgroup queue.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes">
            <summary>The notes associated with the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Log">
            <summary>The log associated with the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription">
            <summary>The interaction state description.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.State">
            <summary>The interaction state.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Direction">
            <summary>The direction of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Monitors">
            <summary>The monitors on the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorMonitors">
            <summary>The supervisory monitors on the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorsCombinedCount">
            <summary>The total number of monitors.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders">
            <summary>The recorders of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders">
            <summary>The supervisory recorders of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RecordersCombinedCount">
            <summary>The total number of recorders.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RecordingsAutoResumeTime">
            <summary>The date and time at which the current Secure Recording Pause will expire and recordings will resume.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionType">
            <summary>The type of interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorType">
            <summary>The type of monitor on the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectRingNoAnswer">
            <summary>Whether to disconnect on ring no answer.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.ClientMessage">
            <summary>The client message to display.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.AlertSound">
            <summary>The sound to play when the interaction is alerting.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.CallIdKey">
            <summary>The call ID key of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.PopApplication">
            <summary>The application that should be popped for the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.ImmediateAccess">
            <summary>Whether to allow immediate access to the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.OrbitQueueName">
            <summary>The unscoped name of the orbit queue containing the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.AccountCodeId">
            <summary>The ID of the account code associated with the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.WrapUpCodeId">
            <summary>The ID of the wrap up code associated with the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.WrapUpAssignments">
            <summary>A collection of wrap up code assignments associated with the interaction.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalName">
            <summary>The user-friendly name of the local party.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalAddress">
            <summary>The address of local party (telephone number, IP 'dot' address, etc).</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalId">
            <summary>The displayable address of local party (formatted telephone number, IP address, etc).</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.CallClassification">
            <summary>The call classification (Local, Long Distance, International, Emergency, etc).</summary>
            <icversion>3.0 SU 6</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.StationLocationDescription">
            <summary>The Station location description. This attribute will only work with <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> and will be set only for calls that have <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallClassification"/> set to any call classification with category 'Emergency'.</summary>
            <icversion>3.0 SU 6</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.StationEmergencyOutboundAni">
            <summary>The Station's emergency outbound ANI. This attribute will only work with <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> and will be set only for calls that have <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallClassification"/> set to any call classification with category 'Emergency'.</summary>
            <icversion>3.0 SU 6</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.StationEmergencyCustomerLocationDescription">
            <summary>The Station's emergency customer location description. This attribute will only work with <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> and will be set only for calls that have <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallClassification"/> set to any call classification with category 'Emergency'.</summary>
            <icversion>3.0 SU 6</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.StationEmergencyCustomerName">
            <summary>The Station's emergency customer name. This attribute will only work with <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> and will be set only for calls that have <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallClassification"/> set to any call classification with category 'Emergency'.</summary>
            <icversion>3.0 SU 6</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionConnectionSegments">
            <summary>A collection of segments of the interaction representing connection to a workgroup.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionUserSegments">
            <summary>A collection of segments of the interaction representing connection to a user queue.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.AssociatedProcessInstanceId">
            <summary>The ID of the process to which the interaction is associated.</summary>
            <icversion>3.0 SU 8</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.AssociatedProcessDisplayName">
            <summary>The name of the process to which the interaction is associated.</summary>
            <icversion>4.0 SU 1</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.LocalSecurityLevelRequested">
            <summary>The security level the local endpoint has requested.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteSecurityLevelRequested">
            <summary>The security level the remote endpoint has requested.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.SecurityLevelActual">
            <summary>The actual security level the interaction is using.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.SecurityLevelViolation">
            <summary>Indicates the security level violation and the reason for the violation.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.CallType">
            <summary>Indicates the call type.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.ConsultCallId">
            <summary>When set, indicates the interaction is intended to be the target of a consult transfer.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.ConsultTransferSpeakers">
            <summary>When set, indicates the SpeakTo target of the consult transfer.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueTimestamp">
            <summary>The time when the interaction was queued for a workgroup.</summary>
            <icversion>4.0 SU 1</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackCompletionDisplay">
            <summary>The display string of the callback completion.</summary>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackPhone">
            <summary>The phone number to callback.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackMessage">
            <summary>The callback message.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackCompletion">
            <summary>The callback completion.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackAssociatedCallId">
            <summary>The call ID of the associated call to the callback.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallbackInteractionParameters">
            <summary>
            Provides details when creating Callback Interactions via <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeCallbackInteraction(ININ.IceLib.Interactions.CallbackInteractionParameters)"/>.
            </summary>
            <doccompleted/>
            <icversion>3.0 SU 11</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteractionParameters.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallbackInteractionParameters"/> class.
            </summary>
            <param name="scopedQueueName">The scoped name of the queue to which to add the callback interaction.</param>
            <param name="additionalAttributes">Additional attributes to use to construct the callback.</param>
            <remarks>Valid additional attributes include RemoteName, RemoteAddress, RemoteId, LocalName, LocalAddress and LocalId. </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteractionParameters.#ctor(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallbackInteractionParameters"/> class.
            </summary>
            <param name="scopedQueueName">The scoped name of the queue to which to add the callback interaction.</param>
            <param name="callbackPhone">The callback phone number.</param>  
            <param name="callbackMessage">The callback message.</param>  
            <param name="additionalAttributes">Additional attributes to use to construct the callback.</param>
            <remarks>Valid additional attributes include RemoteName, RemoteAddress, RemoteId, LocalName, LocalAddress and LocalId. </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteractionParameters.ToString">
            <summary>
            Gets the string representation of CallbackInteractionParameters.
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteractionParameters.ScopedQueueName">
            <summary>
            Gets the scoped queue name.
            </summary>
            <value>The scoped queue name.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteractionParameters.AdditionalAttributes">
            <summary>
            Gets the additional interaction attributes.
            </summary>
            <value>The additional interaction attributes.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteractionParameters.CallbackPhone">
            <summary>
            The callback phone number.
            </summary>
            <value>The callback phone name.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteractionParameters.CallbackMessage">
            <summary>
            The callback message.
            </summary>
            <value>The callback message.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallInteraction">
            <summary>
            Represents a call within the Interaction Center system.
            </summary>
            <remarks>This class provides the ability to play digits, play audio, and stop all audio for the call interaction.
            <para><list type="bullet">
            <item>To play digits, call the <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayDigits(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayDigitsAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. When the asynchronous play digits
            operation completes, it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
            <item>To play audio, call the <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudio(System.String,System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudioAsync(System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. When the asynchronous play
            audio operation completes, it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
            </list></para>
            <note>The asynchronous methods are preferred since the above operations can be lengthy.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.PlayDigits(System.String)">
            <summary>
            Plays the digits to the <see cref="T:ININ.IceLib.Interactions.CallInteraction"/>.
            </summary>
            <param name="digits">The digits.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.PlayDigitsAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously plays the digits to the <see cref="T:ININ.IceLib.Interactions.CallInteraction"/>.
            </summary>
            <param name="digits">The digits.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudio(System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays a server-located WAV file into the call.  This request will end when the audio has completed playing.
            </summary>
            <param name="fileName">The name of a WAV file to play. If this file is located locally, this must be the full path to the file. 
            If it is located remotely, this must be the result of calling <see cref="M:ININ.IceLib.Connection.RemoteFileHelper.NewRemoteFileName(ININ.IceLib.Connection.ServerFileType)"/>.</param>
            <param name="isRemoteFile">Whether the specified file is located locally (and needs to be uploaded) or is located on the server.</param>
            <param name="enableDigits"><see langword="true"/> to enable playing of digits into the call to skip forward and backwards, <see langword="false"/> to ignore digits.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudioAsync(System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously plays a server-located WAV file into the call.  This request will end when the audio has completed playing.
            </summary>
            <param name="fileName">The name of a WAV file to play. If this file is located locally, this must be the full path to the file.
            If it is located remotely, this must be the result of calling <see cref="M:ININ.IceLib.Connection.RemoteFileHelper.NewRemoteFileName(ININ.IceLib.Connection.ServerFileType)"/>.</param>
            <param name="isRemoteFile">Whether the specified file is located locally (and needs to be uploaded) or is located on the server.</param>
            <param name="enableDigits"><see langword="true"/> to enable playing of digits into the call to skip forward and backwards, <see langword="false"/> to ignore digits.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.StopAllWaveAudio">
            <summary>
            Stops all wave audio playback on this call.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.StopAllWaveAudioAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops all wave audio playback on this call.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks><ininAsyncMethodNote /></remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudioComplete">
            <summary>
            Occurs when audio played by <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudio(System.String,System.Boolean,System.Boolean)"/> is completed.
            </summary>
            <remarks>
            This event will only occur after a play wave audio request has been made. (See 
            <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudio(System.String,System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudioAsync(System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.)
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudio(System.String,System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudioAsync(System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallInteractionParameters">
            <summary>
            Provides details when making a call via <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>'s 
            MakeCall method.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.VerifyTarget(System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> is empty.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.CheckQueueIdTarget(ININ.IceLib.Interactions.QueueId)">
            <summary>
            Checks the target <see cref="T:ININ.IceLib.Interactions.QueueId"/> to ensure that it is not <see langword="null"/> and
            returns the string representation of the value.
            </summary>
            <param name="target">The target.</param>
            <returns>The scoped name of <paramref name="target"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(System.String,System.String,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="onBehalfOfWorkgroup">The on behalf of workgroup (or <see langword="null"/>).</param>
            <param name="callMadeStage">
            Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.
            </param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(ININ.IceLib.Interactions.QueueId,System.String,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class, using a
            <see cref="T:ININ.IceLib.Interactions.QueueId"/> to specify the target.
            </summary>
            <param name="target">The target.</param>
            <param name="onBehalfOfWorkgroup">The on behalf of workgroup (or <see langword="null"/>).</param>
            <param name="callMadeStage">
            Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.
            </param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(System.String,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class using the default 
            value for the on behalf of workgroup.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">
            Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.
            </param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> using 
            a <see cref="T:ININ.IceLib.Interactions.QueueId"/> to specify the target and the default value for the 
            on behalf of workgroup.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">
            Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.
            </param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class.  The 
            on behalf of workgroup and call made stage are initialized with default values.
            </summary>
            <param name="target">The target.</param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(ININ.IceLib.Interactions.QueueId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class 
            using a <see cref="T:ININ.IceLib.Interactions.QueueId"/> to specify the target. The on behalf of workgroup 
            and call made stage are initialized with default values.
            </summary>
            <param name="target">The target.</param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.ToString">
            <summary>
            Gets the string representation of <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/>.
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.AccountCodeId">
            <summary>
            Gets or sets the account code ID.
            </summary>
            <value>The account code ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.CallMadeStage">
            <summary>
            Gets or sets the call made stage.
            </summary>
            <value>
            Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.
            </value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.OnBehalfOfWorkgroup">
            <summary>
            Gets or sets the on behalf of workgroup.
            </summary>
            <value>The on behalf of workgroup.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.CallAnalysisType">
            <summary>
            Gets or sets the Call analysis type.
            </summary>
            <value>Specifies whether call analysis needs to be performed on this call.</value>
            <icversion>3.0 SU 1</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.AdditionalAttributes">
            <summary>
            Gets a collection which can be used to set additional attributes.
            </summary>
            <value>The additional attributes collection.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallMadeEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallMadeEventArgs.#ctor(ININ.IceLib.Interactions.Interaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallMadeEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallMadeEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallMadeStage">
            <summary>
            Specifies constants indicating when the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event should be raised.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallMadeStage.None">
            <summary>No make call operation should be performed.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallMadeStage.Allocated">
            <summary>The call has been allocated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallMadeStage.Started">
            <summary>The call has started.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallMadeStage.Completed">
            <summary>The call has completed.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatInteraction">
             <summary>Represents a chat within the Interaction Center system.</summary>
             <remarks>Chat interactions allow users to interact by sending and receiving text, files, or URLs.
             <para>
             <list type="bullet">
             <item>To <b>start watching</b> a chat interaction call <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or 
             <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous chat start watch completes it invokes the   
             <c>completedCallback</c> delegate.<br/><br/></item>
             <item>To <b>stop watching</b> a chat interaction call <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStopWatching"/> or 
             <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous chat stop watch completes, it invokes the   
             <c>completedCallback</c> delegate.<br/><br/></item>
             <item>To <b>add members</b> to the chat call <see cref="M:ININ.IceLib.Interactions.ChatInteraction.AddMembers(ININ.IceLib.Interactions.InteractionId[])"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.AddMembersAsync(ININ.IceLib.Interactions.InteractionId[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing an 
             array of <see cref="T:ININ.IceLib.Interactions.InteractionId"/> for all members to add to this chat. When the asynchronous add members 
             operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
            <item>To <b>set an indicator</b> to the members that a member is typing call the 
             <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SetTypingIndicator(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SetTypingIndicatorAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing a flag 
             to indicate if the typing indicator is visible or not. When the asynchronous set typing indicator 
             operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item> 
             <item>To <b>send text</b> to members of this chat, call the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendText(System.String)"/> or 
             <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendTextAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods with the text to send. When the asynchronous send text 
             operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
             <item>To <b>send a URL</b> to the chat members, call the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendUrl(System.Uri)"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendUrlAsync(System.Uri,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> 
             methods. When the asynchronous send URL operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
            <item>To <b>send a file</b> to chat members call <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendFile(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendFileAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the 
             asynchronous send file operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
             <item>Calling <i>ChatStartWatching</i> or <i>ChatStartWatchingAsync</i> when a watch is already
             in place, or calling <i>ChatStopWatching</i> or <i>ChatStartWatchingAsync</i> when a watch is 
             not in place raises an <see cref="T:System.InvalidOperationException"/>.<br/><br/></item> 
             </list>
             </para>
             <note>The asynchronous versions of the above methods are preferred since they can be lengthy operations.</note>
             </remarks>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.GetMembers">
            <summary>
            Gets the members.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <returns>The <see cref="T:ININ.IceLib.Interactions.ChatMember"/> array.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.GetHistory">
            <summary>
            Gets the chat history-returned in an array of <see cref="T:ININ.IceLib.Interactions.ChatText"/> objects.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <returns>The <see cref="T:ININ.IceLib.Interactions.ChatText"/> array.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatIsWatching">
            <summary>
            Determines whether an chat watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if an chat watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether an chat watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching">
            <summary>
            Starts watching the chat interaction.
            </summary>
            <remarks>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the chat interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatStopWatching">
            <summary>
            Stops watching the chats interaction.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the chats interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <ininAsyncMethodNote />
            <ininHowWatchesWork />
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddMembers(ININ.IceLib.Interactions.InteractionId[])">
            <summary>
            Adds interactions to the chat.
            </summary>
            <param name="interactionsToAdd">The interactions to add.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddMembersAsync(ININ.IceLib.Interactions.InteractionId[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously adds interactions to the chat.
            </summary>
            <param name="interactionsToAdd">The interactions to add.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddUsers(System.String[])">
            <summary>
            Adds users to the chat.
            </summary>
            <param name="userIdsToAdd">The users to add.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddUser(System.String)">
            <summary>
            Adds user to the chat.
            </summary>
            <param name="userIdToAdd">The user to add.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The string parameter is empty.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddUsersAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously adds users to the chat.
            </summary>
            <param name="userIdsToAdd">The users to add.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddUserAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously adds user to the chat.
            </summary>
            <param name="userIdToAdd">The user to add.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SetTypingIndicator(System.Boolean)">
            <summary>
            Sets the typing indicator for the Session user.
            </summary>
            <param name="isTyping">If set to <see langword="true"/> user is typing.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SetTypingIndicatorAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the typing indicator for the Session user.
            </summary>
            <param name="isTyping">If set to <see langword="true"/> user is typing.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendText(System.String)">
            <summary>
            Sends text to the chat members.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendTextAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends text to the chat members.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendUrl(System.Uri)">
            <summary>
            Sends a Url to the chat members.
            </summary>
            <param name="uri">The url to send.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendUrlAsync(System.Uri,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a Url to the chat members.
            </summary>
            <param name="uri">The url to send.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendFile(System.String)">
            <summary>
            Sends a file to the chat members.
            </summary>
            <param name="path">The path of the file to send.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendFile(System.IO.Stream,System.String)">
            <summary>
            Sends a file to the chat members.
            </summary>
            <param name="fileStream">A stream connected to the file to send.</param>
            <param name="fileName">The name of the file to send.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendFileAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a file to the chat members.
            </summary>
            <param name="path">The path of the file to send.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendFileAsync(System.IO.Stream,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a file to the chat members.
            </summary>
            <param name="fileStream">A stream connected to the file to send.</param>
            <param name="fileName">The name of the file to send.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.ChatMemberAdded">
            <summary>
            Occurs when a <see cref="T:ININ.IceLib.Interactions.ChatMember"/> is added to the <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.
            </summary>
            <remarks>
            This event will only occur if the chat is being watched. To start watching the
            chat call either the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.ChatMemberChanged">
            <summary>
            Occurs when a ChatMember's 
            <see cref="P:ININ.IceLib.Interactions.ChatMember.DisplayName"/> property changes.
            </summary>
            <remarks>
            This event will only occur if the chat is being watched. To start watching the
            chat call either the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.TypingChanged">
            <summary>
            Occurs when a ChatMember's <see cref="P:ININ.IceLib.Interactions.ChatMember.IsTyping"/> property changes.
            </summary>
            <remarks>
            This event will only occur if the chat is being watched. To start watching the
            chat call either the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.ChatMemberRemoved">
            <summary>
            Occurs when a <see cref="T:ININ.IceLib.Interactions.ChatMember"/> is removed from the <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.
            </summary>
            <remarks>
            This event will only occur if the chat is being watched. To start watching the
            chat call either the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.TextAdded">
            <summary>
            Occurs when text is added to the chat.
            </summary>
            <remarks>
            This event will only occur if the chat is being watched. To start watching the
            chat call either the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.UrlAdded">
            <summary>
            Occurs when a URL is added to the chat.
            </summary>
            <remarks>
            This event will only occur if the chat is being watched. To start watching the
            chat call either the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with ChatInteractions.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatInteractionAttributeName.ParentConferenceId">
            <summary>The ID the conference from which a sidebar chat was created.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.WatchedAttributeCache">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.WatchedAttributeCache"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.#ctor(ININ.IceLib.Interactions.InteractionsManager,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.WatchedAttributeCache"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="managedWatcherType">Specifies the type of watchers to manage.</param>
            <remarks>Unmanaged watchers will not be allowed.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.#ctor(ININ.IceLib.Interactions.InteractionsManager,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.WatchedAttributeCache"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="managedWatcherType">Specifies the type of watchers to manage.</param>
            <param name="unmanagedWatcherType">Specifies the type of unmanaged watchers that will be allowed.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.IsAttributeWatched(ININ.IceLib.Interactions.Internal.AttributeKey)">
            <summary>
            Determines whether the attribute is being watched.
            </summary>
            <param name="key">The key.</param>
            <returns><see langword="true"/> if the attribute is being watched; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.IsWatchingUnmanaged(System.Object)">
            <summary>
            Determines whether this interaction is being watched by the specified unmanaged watcher.
            </summary>
            <param name="watcher">The watcher.</param>
            <returns>
            	<see langword="true"/> if is being watched by the specified watcher; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetWatchedAttributes">
            <summary>
            Gets the watched attributes (both managed and unmanaged).
            </summary>
            <returns>The watched attributes.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.IsWatchingAny">
            <summary>
            Determines if there is any watch (managed or unmanaged) on this cache.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StartWatching(System.Object,ININ.IceLib.Interactions.Internal.AttributeKey[])">
            <summary>
            Starts a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNames">The new attribute names.</param>
            <ConnectionExceptions />
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StartWatchingCustom(System.Object,ININ.IceLib.Interactions.Internal.AttributeKey[])">
            <summary>
            Starts a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNames">The new attribute names.</param>
            <ConnectionExceptions />
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.ChangeWatchedAttributes(System.Object,ININ.IceLib.Interactions.Internal.AttributeKey[],ININ.IceLib.Interactions.Internal.AttributeKey[],System.Boolean)">
            <summary>
            Changes a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeKeysToAdd">The attribute names to add. (Can be <see langword="null"/>.)</param>
            <param name="attributeKeysToRemove">The attribute names to remove. (Can be <see langword="null"/>.)</param>
            <param name="replaceExisting">if set to <see langword="true"/>, replace the existing list.</param>
            <ConnectionExceptions />
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StopWatchingCustom(System.Object)">
            <summary>
            Stops a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StopWatching(System.Object)">
            <summary>
            Stops a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StartWatchingImpl(ININ.IceLib.Interactions.Internal.AttributeKey[])">
            <summary>
            Start watching implementation for inheriting classes.
            </summary>
            <param name="attributeKeys">The attribute names.</param>
            <returns>The action to perform. This action is intended to be used for code that should be ran after the StartWatching request has been sent to Session Manager, e.g. to notify watchers outside of the lock. The action will be performed outside of a lock immediately after the StartWatch method returns.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.ChangeWatchedAttributesImpl(ININ.IceLib.Interactions.Internal.AttributeKey[],System.Boolean)">
            <summary>
            Change watch implementation for inheriting classes.
            </summary>
            <param name="attributeKeys">The attribute names.</param>
            <param name="removeOnly">if set to <see langword="true"/> only removing.</param>
            <returns>The action to perform. This action is intended to be used for code that should be ran after the ChangeWatchedAttributes request has been sent to Session Manager, e.g. to notify watchers outside of the lock. The action will be performed outside of a lock immediately after the ChangeWatchedAttributes method returns.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StopWatchingImpl">
            <summary>
            Stop watching implementation for inheriting classes.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.NotifyAttributesUpdatedImpl(System.Object,System.Collections.Generic.IEnumerable{ININ.IceLib.Interactions.Internal.AttributeKey})">
            <summary>
            Change notification implementation for inheriting classes.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeKeys">The attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.FetchAttributeValuesImpl(ININ.IceLib.Interactions.Internal.AttributeKey[],ININ.IceLib.Interactions.Internal.AttributeKey[]@,System.String[]@)">
            <summary>
            Attribute initialization for inheriting classes.
            </summary>
            <param name="requestedAttributeNames">The requested attribute names.</param>
            <param name="retrievedAttributeNames">The retrieved attribute names.</param>
            <param name="retrievedAttributeValues">The retrieved attribute values.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.UpdateAttributeCacheImpl(ININ.IceLib.Interactions.Internal.AttributeKey,System.String,System.Boolean)">
            <summary>
            Attribute cache updating for inheriting classes.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="isSettingDefaults">if set to <c>true</c>, then values are being set to defaults; otherwise, values are being set from wire values.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StartWatchingUnmanaged(System.Object,ININ.IceLib.Interactions.Internal.AttributeKey[])">
            <summary>
            Starts a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeKeys">The new attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.ChangeWatchedAttributesUnmanaged(System.Object,ININ.IceLib.Interactions.Internal.AttributeKey[])">
            <summary>
            Changes a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeKeys">The new attribute names.</param>
            <exception cref="T:System.InvalidOperationException">Object not being watched.</exception>
            <exception cref="T:System.ArgumentException">Incorrect watcher type.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StopWatchingUnmanaged(System.Object)">
            <summary>
            Stops a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetInterestedWatchers(System.Collections.Generic.HashSet{ININ.IceLib.Interactions.Internal.AttributeKey})">
            <summary>
            Gets the watchers for the specified attributes.
            </summary>
            <param name="attributeKeysSet">The attribute names.</param>
            <returns>The watchers and which changed attributes they were watching.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.FindInterestedWatchers``1(System.Collections.Generic.HashSet{ININ.IceLib.Interactions.Internal.AttributeKey},ININ.IceLib.Interactions.WatchedAttributeCache.ApplyInterestedWatcherDelegate{``0})">
            <summary>
            Finds the interested watchers and allows external handling of each association (from inside the _ManagedWatchers lock, be careful!).
            </summary>
            <typeparam name="TWatcher">The type of the watcher.</typeparam>
            <param name="attributeKeys">The attribute names.</param>
            <param name="applyInterestedWatcher">The function to associate an interested watcher with the changed attributes they were watching.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetAttributeAsString(ININ.IceLib.Interactions.Internal.AttributeKey)">
            <summary>
            Gets the attribute as a string.
            </summary>
            <param name="key">The key.</param>
            <returns>The string.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetAttributeAsStrings(ININ.IceLib.Interactions.Internal.AttributeKey,System.Char)">
            <summary>
            Gets the string values for the named attribute.
            </summary>
            <param name="key">The name.</param>
            <param name="splitChar">The split char.</param>
            <returns>The string.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetAttributeAsBool(ININ.IceLib.Interactions.Internal.AttributeKey)">
            <summary>
            Gets the attribute as a bool.
            </summary>
            <param name="key">The key.</param>
            <returns>The bool.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetAttributeAsInt32(ININ.IceLib.Interactions.Internal.AttributeKey)">
            <summary>
            Gets the attribute as int32.
            </summary>
            <param name="key">The name.</param>
            <returns>The integer value.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.SetAttribute(System.String,System.String)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.WatchedAttributeCache.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this cache is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.WatchedAttributeCache.ManagedWatchCount">
            <summary>
            Gets the total number of managed watchers.
            </summary>
            <value>The watch count.</value>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteractionCache.CacheMembers">
            <summary>
            Gets the chat members.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteractionCache.UpdateChatMember(ININ.IceLib.Interactions.ChatMember,System.String,ININ.IceLib.Interactions.ChatMemberType,System.Boolean)">
            <summary>
            Updates the chat member with the specified values.
            </summary>
            <param name="chatMember">The chat member to update.</param>
            <param name="displayName">The new display name.</param>
            <param name="chatMemberType">The new chat member type.</param>
            <param name="sendUpdateEvent">if set to <see langword="true"/> send the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.OnChatMemberChanged(ININ.IceLib.Interactions.ChatMemberEventArgs)"/> notification.</param>
            <returns>
            The <see cref="T:System.Action"/> (if any) that should be run outside of any locks.  This value will be non-null when <paramref name="sendUpdateEvent"/> 
            is <see langword="true"/> and at least one of values has changed; otherwise, this value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatInteractionCache.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConsultTransfer">
            <summary>
            Represents a consult transfer between a caller, agent, and consult.
            </summary>
            <remarks>
            An agent may seek to transfer a caller to a consult as part of an interaction.  The agent would
            first make the consult transfer, which will allow the agent to speak to either the caller, the consult, or 
            both.  The agent may conclude the consult transfer by either completing the transfer, resulting in the caller
            speaking to the consult.  Alternatively, the agent may cancel the transfer, resulting in the caller
            speaking with the agent.
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransfer.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.ConsultTransferParticipants)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="callerInteractionId">The ID of the interaction.</param>
            <param name="consultInteractionId">The ID of the consult transfer.</param>
            <param name="speakers">The speakers.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransfer.Cancel">
            <summary>
            Cancels the consult transfer, resulting in the caller speaking to the agent.
            </summary>
            <ConnectionExceptions />
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransfer.CancelAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronous request to cancel the consult transfer.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransfer.Conclude">
            <summary>
            Completes the consult transfer, resulting in the caller speaking to the consult.
            </summary>
            <ConnectionExceptions />
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransfer.ConcludeAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronous request to complete the consult transfer.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransfer.ChangeSpeakers(ININ.IceLib.Interactions.ConsultTransferParticipants)">
            <summary>
            Changes the speakers on the consult transfer.
            </summary>
            <param name="speakTo">The speakers to participate with the agent.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified speak to is not from the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParticipants"/> enumeration.
            The specified speak to is set to <see cref="F:ININ.IceLib.Interactions.ConsultTransferParticipants.None"/>.
            </exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransfer.ChangeSpeakersAsync(ININ.IceLib.Interactions.ConsultTransferParticipants,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronous request to change the speakers on the consult transfer.
            </summary>
            <param name="speakTo">The participants to speak with.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            	<ininAsyncMethodNote/>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified speak to is not from the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParticipants"/> enumeration.
            The specified speak to is set to <see cref="F:ININ.IceLib.Interactions.ConsultTransferParticipants.None"/>.
            </exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransfer.GetConsultTransferFromInteraction(ININ.IceLib.Interactions.Interaction)">
            <summary>
            Gets the consult transfer from interaction.
            </summary>
            <param name="interaction">The interaction.</param>
            <returns>The consult transfer, if the interaction is a consult transfer, otherwise <see langword="null"/>.</returns>
            <remarks>If an interaction is a consult transfer the <see cref="P:ININ.IceLib.Interactions.Interaction.ConsultCallId"/> attribute 
            will be set.  Use this method to recover the <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/> instance from the interaction.
            <para>
            This method is intended to be used to recover a Consult Transfer from an Interaction in case of a client crash.  
            If you need to create a new Consult Transfer, use the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeConsultTransfer(ININ.IceLib.Interactions.ConsultTransferParameters)"/> method instead.
            </para>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeConsultTransfer(ININ.IceLib.Interactions.ConsultTransferParameters)"/>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="E:ININ.IceLib.Interactions.ConsultTransfer.SpeakersChanged">
            <summary>
            Occurs when the speakers in the <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/> change.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConsultTransfer.SpeakingTo">
            <summary>
            Gets the parties the agent is speaking to on this consult transfer.
            </summary>
            <value>The parties the agent is speaking to.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConsultTransfer.ConsultInteractionId">
            <summary>
            Gets the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> of the <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.
            This value represents the interaction ID of the consult transfer.
            </summary>
            <value>The consult interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConsultTransfer.CallerInteractionId">
            <summary>
            Gets the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> associated with this <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.
            This value represents the original <see cref="F:ININ.IceLib.Interactions.ConsultTransferParticipants.Caller"/> interaction ID.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConsultTransferParameters">
            <summary>
            Provides details when creating Consult Transfers via <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeConsultTransfer(ININ.IceLib.Interactions.ConsultTransferParameters)"/>.
            </summary>
            <doccompleted/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransferParameters.#ctor(System.String,ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParameters"/>.
            </summary>
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParameters"/>.
            </overloads>
            <param name="target">The target.</param>
            <param name="callerInteractionId">The <see cref="T:ININ.IceLib.Interactions.InteractionId"/> associated with this consult transfer.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransferParameters.#ctor(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParameters"/> using 
            a <see cref="T:ININ.IceLib.Interactions.QueueId"/> to specify the target.
            </summary>
            <param name="target">The target.</param>
            <param name="callerInteractionId">The <see cref="T:ININ.IceLib.Interactions.InteractionId"/> of the consult transfer.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransferParameters.#ctor(System.String,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParameters"/> using
            a <see cref="T:ININ.IceLib.Interactions.QueueId"/> to specify the target, and initializing the <see cref="P:ININ.IceLib.Interactions.ConsultTransferParameters.CallMadeStage"/> to the default value.
            </summary>
            <param name="target">The target.</param>
            <param name="callerInteractionId">The <see cref="T:ININ.IceLib.Interactions.InteractionId"/> of the consult transfer.</param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransferParameters.#ctor(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParameters"/> using
            the default value for the <see cref="P:ININ.IceLib.Interactions.ConsultTransferParameters.CallMadeStage"/>.
            </summary>
            <param name="target">The target.</param>
            <param name="callerInteractionId">The <see cref="T:ININ.IceLib.Interactions.InteractionId"/> of the consult transfer.</param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConsultTransferParameters.ToString">
            <summary>
            Gets the string representation of ConsultTransferParameters.
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConsultTransferParameters.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConsultTransferParameters.CallMadeStage">
            <summary>
            Gets or sets the call made stage.
            </summary>
            <value>Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConsultTransferParameters.CallerInteractionId">
            <summary>
            Gets the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> associated with this consult transfer.
            This value represents the original <see cref="F:ININ.IceLib.Interactions.ConsultTransferParticipants.Caller"/> interaction ID.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConsultTransferParameters.AdditionalAttributes">
            <summary>
            Gets a collection which can be used to set additional attributes.
            </summary>
            <value>The additional attributes collection.</value>
            <icversion>4.0 SU 4</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConsultTransferParticipants">
            <summary>
            The participants in a <see cref="T:ININ.IceLib.Interactions.ConsultTransfer"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.ConsultTransferParticipants.None">
            <summary>
            Neither the caller, nor the agent, nor the consult.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ConsultTransferParticipants.Agent">
            <summary>
            The agent party in a consult transfer.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ConsultTransferParticipants.Caller">
            <summary>
            The caller party in a consult transfer.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ConsultTransferParticipants.Consult">
            <summary>
            The consult party in a consult transfer.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ConsultTransferParticipants.All">
            <summary>
            The agent, caller and consult in a consult transfer.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatMember">
            <summary>Represents a member (person participating) in a <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.</summary>
            <remarks>Chat interactions in IC allow users to send and receive text, files, or URLs. Chat members 
            have a type (usually internal or external), a display name, an associated interaction ID, and a typing indicator. 
            There is also an explicit "System Member" that represents the IC system chat text.
            </remarks>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMember.SystemMember">
            <summary>
            Represents the Chat System as a member.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMember.GetSystemMember(System.Globalization.CultureInfo)">
            <summary>
            Gets the system member for the specified <paramref name="cultureInfo"/>.
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <returns>The chat member.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMember.GetSystemMember(System.Globalization.CultureInfo,System.String)">
            <summary>
            Gets the system member for the specified <paramref name="cultureInfo"/>.
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <param name="displayName">The display name.</param>
            <returns>The chat member.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMember.#ctor(ININ.IceLib.Interactions.InteractionId,System.String,ININ.IceLib.Interactions.ChatMemberType)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatMember"/> class.
            </summary>
            <param name="interactionId">The interaction ID of the member.</param>
            <param name="displayName">Display name of the member.</param>
            <param name="chatMemberType">Type of the chat member.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMember.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMember.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:ININ.IceLib.Interactions.ChatMember"/> instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMember.Equals(ININ.IceLib.Interactions.ChatMember)">
            <summary>
            Determines whether the specified <see cref="T:ININ.IceLib.Interactions.ChatMember"/> is equal to the current <see cref="T:ININ.IceLib.Interactions.ChatMember"/>.
            </summary>
            <param name="other">The <see cref="T:ININ.IceLib.Interactions.ChatMember"/> to compare with the current <see cref="T:ININ.IceLib.Interactions.ChatMember"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:ININ.IceLib.Interactions.ChatMember"/> is equal to the current <see cref="T:ININ.IceLib.Interactions.ChatMember"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMember.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMember.InteractionId">
            <summary>
            Gets the interaction ID of the member.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMember.DisplayName">
            <summary>
            Gets the display name of the member.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMember.ChatMemberType">
            <summary>
            Gets the type of the chat member.
            </summary>
            <value>The type of the chat member.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMember.IsTyping">
            <summary>
            Gets a value indicating whether this <see cref="T:ININ.IceLib.Interactions.ChatMember"/> is typing.
            </summary>
            <value><see langword="true"/> if typing; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatMemberEventArgs">
            <summary>
            Provides data for the ChatMemberAdded/Changed/Removed events of a <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMemberEventArgs.#ctor(ININ.IceLib.Interactions.ChatMember)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatMemberEventArgs"/> class with the specified values.
            </summary>
            <param name="chatMember">The chat member.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMemberEventArgs.ChatMember">
            <summary>
            Gets the ChatMember associated with the change.
            </summary>
            <value>The chat member.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatMemberType">
            <summary>
            Specifies constants indicating the whether a ChatMember is internal or external.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.None">
            <summary>There is no chat member type available.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.SystemMember">
            <summary>The SystemMember.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.ChatInteraction">
            <summary>The chat member associated with the ChatInteraction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.Internal">
            <summary>The chat member is internal.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.External">
            <summary>The chat member is external.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatText">
            <summary>
            Represents a single chat entry in a <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.
            </summary>
            <remarks>The Text property of the ChatText object contains the text of a single entry in the chat history. 
            To get all entries exchanged in the course of the chat, call the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.GetHistory"/> method of the ChatInteraction 
            class. It returns a read-only collection of ChatText objects.
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatText.#ctor(ININ.IceLib.Interactions.ChatMember,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatText"/> class.
            </summary>
            <param name="chatMember">The chat member.</param>
            <param name="text">The text.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatText.ChatMember">
            <summary>
            Gets the chat member.
            </summary>
            <value>The chat member.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatText.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatText.Timestamp">
            <summary>
            Gets the timestamp for the text.
            </summary>
            <icversion>4.0 SU 5</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatUpdateEventArgs">
            <summary>
            Provides data for the ChatMemberAdded/Removed events of a <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatUpdateEventArgs.#ctor(ININ.IceLib.Interactions.ChatMember)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatUpdateEventArgs"/> class with the specified values.
            </summary>
            <param name="chatMember">The chat member.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatUpdateEventArgs.ChatMember">
            <summary>
            Gets the ChatMember associated with the change.
            </summary>
            <value>The chat member.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatUpdateEventArgs.Text">
            <summary>
            Gets the Text associated with the change (if any).
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatUpdateEventArgs.Url">
            <summary>
            Gets the Url associated with the change (if any).
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.CompoundAttributeValue">
            <summary>
            Represents a compound value for an attribute.
            </summary>
            <remarks>
            Compound attribute values are attribute values which are composed of sub-elements.  For instance, 
            an interaction has a single wrap-up code attribute value, but the value for this attribute is composed
            of a interaction ID, segment ID, user ID, wrap-up code ID, wrap-up category ID, and timestamp.  In 
            addition, these elements rep
            </remarks>
        </member>
        <member name="F:ININ.IceLib.Interactions.CompoundAttributeValue._AttributeValueElements">
            <summary>
            Dictionary of the names and values of the elements that compose this compound attribute value.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.CompoundAttributeValue.FormatAsAttributeValue(ININ.IceLib.Interactions.ICompoundAttributeValue)">
            <summary>
            Formats as attribute value.
            </summary>
            <param name="attributeValue">The attribute value.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.CompoundAttributeValue.ParseFromAttributeValue``1(System.String,System.Func{``0})">
            <summary>
            Parses an attribute value for wrap up assignment data.
            </summary>
            <typeparam name="T">The type of object contained in the collection.</typeparam>
            <param name="attributeValue">The attribute value string to parse.</param>
            <param name="factory">A function for creating instances of type <typeparamref name="T"/>.</param>
            <returns>A collection of wrap up assignments.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="attributeValue"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CompoundAttributeValue.ParseNextNameValuePair(System.String@,System.String@,System.String@)">
            <summary>
            Parses the next name value pair from the encoded string.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><see langword="true"/> if successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConferenceId">
            <summary>
            Identifies a Conference within the Interaction Center system.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> class with the specified values.
            </summary>
            <param name="id">The ID.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id"/> was invalid, it must be in the range of
            0 and <see cref="F:System.UInt32.MaxValue"/> inclusive.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> class with the specified values.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> class with the specified values.
            </summary>
            <param name="wireId">The wire ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.Equals(System.Object)">
            <overloads>
            Determines whether two ConferenceId instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.Equals(ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Determines whether the specified ConferenceId is equal to the current ConferenceId.
            </summary>
            <param name="other">The ConferenceId to compare with the current ConferenceId.</param>
            <returns><see langword="true"/> if the specified ConferenceId is equal to the current ConferenceId; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.op_Equality(ININ.IceLib.Interactions.ConferenceId,ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Determines whether two instances of <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> are equal.
            </summary>
            <param name="a">The first <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> to compare.</param>
            <param name="b">The second <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> to compare.</param>
            <returns><see langword="true"/> if the instances are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.op_Inequality(ININ.IceLib.Interactions.ConferenceId,ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Determines whether two instances of <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> are not equal.
            </summary>
            <param name="a">The first <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> to compare.</param>
            <param name="b">The second <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> to compare.</param>
            <returns><see langword="true"/> if the instances are not equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.CompareTo(ININ.IceLib.Interactions.ConferenceId)">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceId.Id">
            <summary>
            Gets a numeric representation of the Conference ID.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceId.WireId">
            <summary>
            Gets a numeric (non-CLS-compliant) representation of the Conference ID.
            </summary>
            <value>The wire ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceId.RawId">
            <summary>
            Gets a numeric (non-CLS-compliant) representation of the Conference ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/> event of an <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> object.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.ConferenceId,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAttributesEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="conferenceItem">The conference item.</param>
            <param name="conferenceId">The interaction conference.</param>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.ConferenceItem">
            <summary>
            Gets the Conference item associated with the change.
            </summary>
            <value>The conference item.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.ConferenceId">
            <summary>
            Gets the Conference ID associated with the change.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.InteractionAttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The interaction attribute names.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConferenceInteractionEventArgs">
            <summary>
            Provides data for the events involving a single <see cref="T:ININ.IceLib.Interactions.Interaction"/> conference member.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceInteractionEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConferenceInteractionEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="conferenceItem">The conference item.</param>
            <param name="conferenceId">The interaction conference.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionEventArgs.ConferenceItem">
            <summary>
            Gets the Conference item associated with the change.
            </summary>
            <value>The conference item.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionEventArgs.ConferenceId">
            <summary>
            Gets the Conference associated with the change.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConferenceItemData">
            <summary>
            Contains information about a conference item.
            </summary>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionQueue.GetConferenceContents" />
            <icversion>4.0 SU 4</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceItemData.Interaction">
            <summary>
            Gets the member interaction that is associated with the <see cref="P:ININ.IceLib.Interactions.ConferenceItemData.ParentInteraction"/>.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceItemData.ParentInteraction">
            <summary>
            Gets the parent interaction that this conference item is for.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceItemData.ConferenceId">
            <summary>
            Gets the conference ID that this conference item is for.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs">
            <summary>
            Provides data for asynchronous completed events of <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs.#ctor(ININ.IceLib.Interactions.InteractionId,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="sidebarChatId">The ID of the sidebar chat associated with the Conference.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs.SidebarChatId">
            <summary>
            Gets the ID of the sidebar chat associated with the event.
            </summary>
            <value>The sidebar chat ID.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqEntry">
            <summary>
            Represents a Question / Answer entry in the e-FAQ database.
            </summary>
            <remarks>An <c>EFaqEntry</c> object represents a single Question and Answer entry
            in the e-FAQ database, as well as relevant metadata for that entry.</remarks>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqEntry.MarkAsUsed">
            <summary>
            Marks this entry as used.
            </summary>
            <remarks>This can be used by the FAQ author to guage the quality of an entry.</remarks>
            <ConnectionExceptions />
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqEntry.MarkAsUsedAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously marks this entry as used.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <para>This can be used by the FAQ author to gauge the quality of an entry.</para>
            <ininAsyncMethodNote />
            </remarks>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqEntry.Id">
            <summary>
            Gets the unique identifier for this entry.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqEntry.Grade">
            <summary>
            Gets the grade for this entry, describing how well it matched the query.
            </summary>
            <value>The grade.</value>
            <remarks>
            <para>The grade of a result is used to determine how well a Question / Answer pair matches the query.
            Setting the minimum grade higher will generally yield fewer results.  The valid range is 1.0 to 10.0.
            Only entries with grades above the <see cref="P:ININ.IceLib.EFaq.EFaqQueryOptions.MinimumGrade"/> specified in the query
            will be returned.</para>
            <para>When more than one entry is returned, e-FAQ uses the matching grade to rank 
            the results so that they can be presented in the order of the highest score first.</para>
            <para>In the case of a tie, the order the entries actually get returned is 
            undefined. Thus, it is theoretically possible that two entries might get 
            exactly the same score and one would get returned and not the other. (For 
            example, if a query had specified that only up to 3 entries be returned and 
            there was a tie for third place, one entry would get left out of the result 
            set, even though its score was the same as the other 3rd place entry.)</para>
            <para>The only exception to all of 
            this is entries that are returned because they contained a "guaranteed hit" 
            keyword. All of these are returned, no matter what. (So, even if the query 
            specified only to return up to 5 entries, if 7 entries were guaranteed-hits, 
            then 7 entries will be returned.)</para>
            </remarks>
            <seealso cref="P:ININ.IceLib.EFaq.EFaqQueryOptions.MinimumGrade"/>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqEntry.Question">
            <summary>
            Gets the question portion of this entry.
            </summary>
            <value>The question.</value>
            <remarks>E-FAQ entries can contain embedded HTML tags. <see cref="P:ININ.IceLib.EFaq.EFaqEntry.Question"/> will retain the HTML tags
            and whitespace, whereas <see cref="P:ININ.IceLib.EFaq.EFaqEntry.QuestionAsPlainText"/> will attempt to render the entry's HTML and
            whitespace to a text-only version.</remarks>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqEntry.QuestionAsPlainText">
            <summary>
            Gets the question portion of this entry, rendered as plain text.
            </summary>
            <value>The question in plain text.</value>
            <remarks>E-FAQ entries can contain embedded HTML tags. <see cref="P:ININ.IceLib.EFaq.EFaqEntry.Question"/> will retain the HTML tags
            and whitespace, whereas <see cref="P:ININ.IceLib.EFaq.EFaqEntry.QuestionAsPlainText"/> will attempt to render the entry's HTML and
            whitespace to a text-only version.</remarks>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqEntry.Answer">
            <summary>
            Gets the answer portion of this entry.
            </summary>
            <value>The answer.</value>
            <remarks>E-FAQ entries can contain embedded HTML tags. <see cref="P:ININ.IceLib.EFaq.EFaqEntry.Answer"/> will retain the HTML tags
            and whitespace, whereas <see cref="P:ININ.IceLib.EFaq.EFaqEntry.AnswerAsPlainText"/> will attempt to render the entry's HTML and
            whitespace to a text-only version.</remarks>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqEntry.AnswerAsPlainText">
            <summary>
            Gets the answer portion of this entry, rendered as plain text.
            </summary>
            <value>The answer in plain text.</value>
            <remarks>E-FAQ entries can contain embedded HTML tags. <see cref="P:ININ.IceLib.EFaq.EFaqEntry.Answer"/> will retain the HTML tags
            and whitespace, whereas <see cref="P:ININ.IceLib.EFaq.EFaqEntry.AnswerAsPlainText"/> will attempt to render the entry's HTML and
            whitespace to a text-only version.</remarks>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqQueryCompletedEventArgs">
            <summary>
            Provides data for the <c>completedCallback</c> delegate of the <see cref="M:ININ.IceLib.EFaq.EFaqServer.QueryAsync(System.String,System.Collections.Generic.IEnumerable{ININ.IceLib.EFaq.EFaqTopic},ININ.IceLib.EFaq.EFaqQueryOptions,System.EventHandler{ININ.IceLib.EFaq.EFaqQueryCompletedEventArgs},System.Object)"/> 
            event of an <see cref="T:ININ.IceLib.EFaq.EFaqServer"/>.
            </summary>
            <icversion>3.0 SU 2</icversion>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqQueryCompletedEventArgs.#ctor(ININ.IceLib.EFaq.EFaqQueryResults,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of this class with the specified values.
            </summary>
            <param name="eFaqQueryResults">The e-FAQ query results.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryCompletedEventArgs.EFaqQueryResults">
            <summary>
            Gets the e-FAQ query results associated with the event.
            </summary>
            <value>The query results.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqQueryMode">
            <summary>
            Various query processing modes supported by the e-FAQ server.
            </summary>
        </member>
        <member name="F:ININ.IceLib.EFaq.EFaqQueryMode.NaturalLanguage">
            <summary>
            Queries are parsed by the natural language processor.
            </summary>
        </member>
        <member name="F:ININ.IceLib.EFaq.EFaqQueryMode.BooleanExpression">
            <summary>
            Queries are parsed as keywords and Boolean operators.
            </summary>
        </member>
        <member name="F:ININ.IceLib.EFaq.EFaqQueryMode.Wildcard">
            <summary>
            Queries are parsed as <see cref="F:ININ.IceLib.EFaq.EFaqQueryMode.BooleanExpression"/> but may contain wildcard characters.
            </summary>
        </member>
        <member name="F:ININ.IceLib.EFaq.EFaqQueryMode.AutoDetect">
            <summary>
            Allow the e-FAQ server to determine whether <see cref="F:ININ.IceLib.EFaq.EFaqQueryMode.NaturalLanguage"/> or <see cref="F:ININ.IceLib.EFaq.EFaqQueryMode.BooleanExpression"/> should be used.
            </summary>
        </member>
        <member name="F:ININ.IceLib.EFaq.EFaqQueryMode.FetchEntries">
            <summary>
            The query string is a space-separated list of entry-IDs to be retrieved.
            </summary>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqQueryOptions">
            <summary>
            Specifies the settings used when submitting an e-FAQ query.
            </summary>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqQueryOptions.#ctor">
            <overloads>Initializes a new instance of the <see cref="T:ININ.IceLib.EFaq.EFaqQueryOptions"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.EFaq.EFaqQueryOptions"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqQueryOptions.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.EFaq.EFaqQueryOptions"/> class with the specified values.
            </summary>
            <param name="maximumResults">The maximum results to return.</param>
            <param name="minimumGrade">The minimum grade.</param>
            <param name="scoreThreshold">The score threshold.</param>
            <remarks><note>If entries are returned because they contain a "guaranteed hit" 
            keyword, all of them are returned, no matter what. (So, even if the query 
            specified only to return up to 5 entries, if 7 entries were guaranteed-hits, 
            then 7 entries will be returned.)</note></remarks>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqQueryOptions.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryOptions.MinimumGrade">
            <summary>
            Gets the minimum grade allowed for an entry.
            </summary>
            <remarks>The grade of a result is used to determine how well a Question / Answer pair matches the query.
            Setting the minimum grade higher will generally yield fewer results.  The valid range is 1.0 to 10.0. 
            The default is 2.5.</remarks>
            <value>The minimum grade.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
            <seealso cref="P:ININ.IceLib.EFaq.EFaqEntry.Grade"/>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryOptions.ScoreThreshold">
            <summary>
            Gets score threshold.
            </summary>
            <remarks>The e-FAQ engine uses the score threshold to determine how many words in a Question / Answer pair 
            must match words from the query text. If the score threshold is 0, no matches will be cut based on this criteria. The value must be greater than or equal to 0.0. 
            The default is 1.0.  A score threshold of 2.0 is considered strict, and few results will be returned.</remarks>
            <value>The score threshold.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryOptions.QueryMode">
            <summary>
            Gets the query mode.
            </summary>
            <value>The query mode.</value>
            <seealso cref="T:ININ.IceLib.EFaq.EFaqQueryMode"/>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified value is not from the <see cref="T:ININ.IceLib.EFaq.EFaqQueryMode"/> enumeration.</exception>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryOptions.MaximumResults">
            <summary>
            Gets the maximum results returned per query.
            </summary>
            <remarks>The value must be greater than or equal to 0. Defaults to 50.</remarks>
            <value>The maximum results to return.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
            <remarks><note>If entries are returned because they contain a "guaranteed hit" 
            keyword, all of them are returned, no matter what. (So, even if the query 
            specified only to return up to 5 entries, if 7 entries were guaranteed-hits, 
            then 7 entries will be returned.)</note></remarks>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqQueryResults">
            <summary>
            The result set returned by an e-FAQ query.
            </summary>
            <remarks>The <code>EFaqQueryResults</code> class provides access to the results 
            returned by an e-FAQ query operation.  It also provides information about the results,
            such as the <see cref="P:ININ.IceLib.EFaq.EFaqQueryResults.QueryOptions"/> used, and an XML representation of the results.</remarks>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryResults.QueryId">
            <summary>
            Gets the ID of the query that yielded these results, as assigned by the e-FAQ server.
            </summary>
            <value>The query ID.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryResults.QueryString">
            <summary>
            Gets the query string used to generate these results.
            </summary>
            <value>The query string.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryResults.EFaqServer">
            <summary>
            Gets the e-FAQ server that was queried.
            </summary>
            <value>The e-FAQ server.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryResults.Entries">
            <summary>
            Gets the e-FAQ entries that make up the result set.
            </summary>
            <value>A read-only collection of the entries.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryResults.QueryOptions">
            <summary>
            Gets the query options used to obtain these results.
            </summary>
            <value>The query options.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqQueryResults.Xml">
            <summary>
            Gets an XML representation of the query results.
            </summary>
            <value>A <c>string</c> representing an XML document with the query result data.</value>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqServer">
            <summary>
            Represents an e-FAQ server that is in contact with the IC server.
            </summary>
            <remarks>The <c>EFaqServer</c> class provides a means to submit queries to an e-FAQ
            server and obtain other information about the server.  The user must have the appropriate 
            permission in order to query the server.</remarks>
            <icversion>3.0 SU 2</icversion>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServer.#ctor(ININ.IceLib.EFaq.EFaqServerCache)">
            <overloads>Initializes a new instance of the <see cref="T:ININ.IceLib.EFaq.EFaqServer"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.EFaq.EFaqServer"/> class with default values.
            </summary>
            <param name="eFaqServerCache">The e-FAQ server cache.</param>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServer.Query(System.String,System.Collections.Generic.IEnumerable{ININ.IceLib.EFaq.EFaqTopic},ININ.IceLib.EFaq.EFaqQueryOptions)">
            <summary>
            Submits the specified query string to the e-FAQ server.
            </summary>
            <param name="queryString">The query string.</param>
            <param name="faqs">The faqs on the server that are to be included in the search.</param>
            <param name="options">The query options.</param>
            <returns>
            An <see cref="T:ININ.IceLib.EFaq.EFaqQueryResults"/> object representing the result set
            returned by the e-FAQ server.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServer.QueryAsync(System.String,System.Collections.Generic.IEnumerable{ININ.IceLib.EFaq.EFaqTopic},ININ.IceLib.EFaq.EFaqQueryOptions,System.EventHandler{ININ.IceLib.EFaq.EFaqQueryCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously submits the specified query string to the e-FAQ server.
            </summary>
            <param name="queryString">The query string.</param>
            <param name="faqs">The faqs on the server that are to be included in the search.</param>
            <param name="options">The query options.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqServer.Name">
            <summary>
            Gets name of the server.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqServer.FaqTopics">
            <summary>
            Gets FAQ topics available to the user on this server.
            </summary>
            <value>The FAQ topics.</value>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqServerList">
            <summary>
            Provides information and change notifications about the e-FAQ system.
            </summary>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServerList.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.EFaq.EFaqServerList"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServerList.GetServers">
            <summary>
            Gets the e-Faq servers that the current user has permission to query.
            </summary>
            <returns>A read-only collection of <see cref="T:ININ.IceLib.EFaq.EFaqServer"/> objects that the user
            has been granted access to.</returns>
            <exception cref="T:System.InvalidOperationException">A watch is not in progress.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServerList.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServerList.StartWatching">
            <summary>
            Starts watching for changes to the list of e-FAQ servers.
            </summary>
            <remarks>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.EFaq.EFaqServerList.StartWatching"/> or <see cref="M:ININ.IceLib.EFaq.EFaqServerList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServerList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching for changes to the list of e-FAQ servers.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.EFaq.EFaqServerList.StartWatching"/> or <see cref="M:ININ.IceLib.EFaq.EFaqServerList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServerList.StopWatching">
            <summary>
            Stops watching for changes to the list of e-FAQ servers.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqServerList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchonously stops watching for changes to the list of e-FAQ servers.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <ininAsyncMethodNote />
            <ininHowWatchesWork />
            </remarks>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqServerList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ININ.IceLib.EFaq.EFaqServer"/> with the specified name.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <param name="serverName">The name of the server.</param>
            <value>The e-FAQ server object for the specified server.</value>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An argument was invalid.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The server is not in the cache.</exception>
            <exception cref="T:System.InvalidOperationException">A watch is not in progress.</exception>
        </member>
        <member name="E:ININ.IceLib.EFaq.EFaqServerList.ServersChanged">
            <summary>
            Occurs when a property of one or more user-accessible e-FAQ servers changes,
            and when an e-FAQ server  is added or removed.
            </summary>
            <remarks>
            This event will only occur if the server list is being watched. To start
            watching the server list call either the <see cref="M:ININ.IceLib.EFaq.EFaqServerList.StartWatching"/> method or
            the <see cref="M:ININ.IceLib.EFaq.EFaqServerList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.EFaq.EFaqServerList.StartWatching"/> or <see cref="M:ININ.IceLib.EFaq.EFaqServerList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqServerProperty">
            <summary>
            Each enumerated value represents a property of the <see cref="T:ININ.IceLib.EFaq.EFaqServer"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.EFaq.EFaqServerProperty.None">
            <summary>
            No property.
            </summary>
        </member>
        <member name="F:ININ.IceLib.EFaq.EFaqServerProperty.ServerName">
            <summary>
            The server name.
            </summary>
        </member>
        <member name="F:ININ.IceLib.EFaq.EFaqServerProperty.FaqTopics">
            <summary>
            The list of Faq Topics (FAQs).
            </summary>
        </member>
        <member name="T:ININ.IceLib.EFaq.EFaqTopic">
            <summary>
            Represents a single FAQ on an e-FAQ server.
            </summary>
            <remarks>A FAQ on an e-FAQ server contains several questions and the corresponding answers.  
            A server may have several such FAQs that may be queried.</remarks>
            <icversion>3.0 SU 2</icversion>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqTopic.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.EFaq.EFaqTopic.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqTopic.EFaqServer">
            <summary>
            Gets the e-FAQ server with which this EFaqTopic is associated.
            </summary>
            <value>The e-FAQ server.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqTopic.Name">
            <summary>
            Gets the name of the FAQ.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqTopic.Description">
            <summary>
            Gets the description of the FAQ.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqTopic.ResultsStyleSheet">
            <summary>
            Gets the results stylesheet location.
            </summary>
            <value>The path to the results stylesheet.</value>
            <remarks>The results stylesheet can be used to format the results of query as 
            they are displayed to the user.</remarks>
        </member>
        <member name="P:ININ.IceLib.EFaq.EFaqTopic.InsertResultsStyleSheet">
            <summary>
            Gets the insert results stylesheet location.
            </summary>
            <value>The path to the insert results stylesheet.</value>
            <remarks>The insert results stylesheet can be used to format query results as they are 
            inserted into another application, for example, by a copy and paste operation.</remarks>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailAddress">
            <summary>
            Represents a resolved Email address from an <see cref="T:ININ.IceLib.Interactions.EmailResolver"/>.
            </summary>
            <remarks>
            Email addresses contain the string address and the string containing the display name
            of the Email address.
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailAddress"/> class.
            </summary>
            <param name="address">The Email address.</param>
            <param name="displayName">Display name of the member.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddress.Equals(System.Object)">
            <summary>
            The Equals method determines whether the specified System.Object is equal to the current 
            <see cref="T:ININ.IceLib.Interactions.EmailAddress"/> object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddress.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddress.Address">
            <summary>
            Gets the Email address.
            </summary>
            <value>The Email address.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddress.DisplayName">
            <summary>
            Gets the display name of the address.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailAddressesEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved"/> event.
            </summary>
            <remarks>
            When the <see cref="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved"/> event is triggered the resolved email addresses are contained in objects
            of this class.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddressesEventArgs.#ctor(System.String,ININ.IceLib.Interactions.EmailAddress[])">
            <overloads/>
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailAddressesEventArgs"/> class
            with the specified values.
            </summary>
            <param name="addressSearch">The address search.</param>
            <param name="emailAddresses">The Email addresses.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddressesEventArgs.#ctor(System.String,ININ.IceLib.Interactions.EmailAddress[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailAddressesEventArgs"/> class
            with the specified values.
            </summary>
            <param name="addressSearch">The address search.</param>
            <param name="emailAddresses">The Email addresses.</param>
            <param name="moreResultsAvailable">If set to <see langword="true"/> then more results were available than what was in <paramref name="emailAddresses"/>.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddressesEventArgs.AddressSearch">
            <summary>
            Gets the address search being resolved.
            </summary>
            <value>The address search.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddressesEventArgs.Results">
            <summary>
            Gets the EmailAddresses with the change.
            </summary>
            <value>The results.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddressesEventArgs.MoreResultsAvailable">
            <summary>
            Gets a value indicating whether more results were available than what is in <see cref="P:ININ.IceLib.Interactions.EmailAddressesEventArgs.Results"/>.
            </summary>
            <value><see langword="true"/> if more results were available; otherwise, <see langword="false"/>.</value>
            <remarks>The value indicates whether the number of email addresses in <see cref="P:ININ.IceLib.Interactions.EmailAddressesEventArgs.Results"/>
            was limited by the <see cref="P:ININ.IceLib.Interactions.EmailResolver.MaxResults"/> property of <see cref="T:ININ.IceLib.Interactions.EmailResolver"/>.</remarks>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailCloneAttachmentType">
            <summary>
            Determines what attachments from the source email to include when an <see cref="T:ININ.IceLib.Interactions.EmailContent"/> object is cloned.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailCloneAttachmentType.NoAttachments">
            <summary>
            No attachements will be included in the new <see cref="T:ININ.IceLib.Interactions.EmailContent"/> object.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailCloneAttachmentType.InLineOnly">
            <summary>
            Only in line attachements will be included in the new <see cref="T:ININ.IceLib.Interactions.EmailContent"/> object.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailCloneAttachmentType.AllAttachments">
            <summary>
            All attachements will be included in the new <see cref="T:ININ.IceLib.Interactions.EmailContent"/> object.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailFileAttachment">
            <summary>
            Represents an attachment to an <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <doccompleted/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailFileAttachment.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> class.
            </summary>
            <param name="id">The ID.</param>
            <param name="name">The name of the attachment file.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailFileAttachment.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> class.
            </summary>
            <param name="id">The ID.</param>
            <param name="name">The name of the attachment file.</param>
            <param name="contentId">The Content-ID for an inline attachment conforming to RFC 2111.</param>
            <param name="cookie">A cookie to identify the type and location of this attachment.</param>
            <remarks>
            <para>A non-null, non-empty Content-ID must be provided to create an inline attachment.
            <see cref="P:ININ.IceLib.Interactions.EmailFileAttachment.ContentId"/> must be unique for each inline attachment in the <see cref="T:ININ.IceLib.Interactions.EmailContent"/>.</para>
            <para>Use <see cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/> to generate a unique Content-ID for each
            inline attachment.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailFileAttachment.Equals(System.Object)">
            <summary>
            The Equals method determines whether the specified System.Object is equal to the current EmailFileAttachment object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailFileAttachment.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailFileAttachment.Id">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailFileAttachment.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailFileAttachment.ContentId">
            <summary>
            Gets the Content-ID of an inline attachment conforming to RFC 2111.
            </summary>
            <value>The Content-ID if this is an inline attachment; otherwise empty string.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailFileAttachment.Cookie">
            <summary>
            Gets the Cookie of an inline attachment.
            </summary>
            <value>Identifies the type and location of this attachment.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailFileAttachment.HasInlineAttachment">
            <summary>
            Gets a value indicating whether this <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> has an inline attachment.
            </summary>
            <value>
            	<see langword="true"/> if this instance has inline attachment; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailBody">
            <summary>
            Represents an email body within an <see cref="T:ININ.IceLib.Interactions.EmailContent"/>.
            </summary>
            <remarks>
            An email body consists of the text content and a MIME content-type describing its format.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailBody.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailBody"/> class.
            </summary>
            <param name="contentType">The MIME content-type of the body content, e.g. <c>text/html</c> or <c>text/plain</c>.</param>
            <param name="content">The body content.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailBody.Equals(System.Object)">
            <summary>
            The Equals method determines whether the specified System.Object is equal to the current EmailBody object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailBody.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailBody.ContentType">
            <summary>
            Gets the MIME content-type describing the data contained in <see cref="P:ININ.IceLib.Interactions.EmailBody.Content"/> (e.g. <c>text/html</c> or <c>text/plain</c>).
            </summary>
            <value>The MIME content-type conforming to RFC 2045 Section 5.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailBody.Content">
            <summary>
            Gets the body content in the format specified by <see cref="P:ININ.IceLib.Interactions.EmailBody.ContentType"/>.
            </summary>
            <value>The body content.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailCreateResponseCompletedEventArgs">
            <summary>
            Represents the completion of a <see cref="M:ININ.IceLib.Interactions.EmailInteraction.CreateResponseAsync(ININ.IceLib.Interactions.EmailContent,ININ.IceLib.Interactions.EmailResponseType,System.EventHandler{ININ.IceLib.Interactions.EmailCreateResponseCompletedEventArgs},System.Object)"/> call.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailCreateResponseCompletedEventArgs.#ctor(ININ.IceLib.Interactions.EmailInteraction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailCreateResponseCompletedEventArgs"/> class.
            </summary>
            <param name="email">The resulting email interaction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailCreateResponseCompletedEventArgs.Email">
            <summary>
            Gets the resulting email interaction.
            </summary>
            <value>The email interaction.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailContent">
            <summary>
            Represents the content for an <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <remarks>This class contains all of the information about the content of an Email interaction
            such as subject, body, sender, To/CC/BCC recipients, and any attachments.</remarks>
            <icversion>4.0</icversion>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.#ctor(ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailContent"/> class.
            </summary>
            <param name="interactionId">The interaction ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailContent"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.Equals(System.Object)">
            <summary>
            The Equals method determines whether the specified System.Object is equal to the current EmailContent object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.LoadFromXmlClass(ININ.IceLib.Internal.XmlEmailMessage,ININ.IceLib.Connection.Session)">
            <summary>
            Initializes the <see cref="T:ININ.IceLib.Interactions.EmailContent"/> class using the specified XML class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.LoadFromXmlString(System.String,ININ.IceLib.Internal.XmlEmailBody,System.Collections.Generic.IList{ININ.IceLib.Internal.XmlEmailBody},ININ.IceLib.Connection.Session)">
            <summary>
            Initializes the <see cref="T:ININ.IceLib.Interactions.EmailContent"/> class using the specified XML string and bodies.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.SaveToXmlClass(ININ.IceLib.Connection.Session)">
            <summary>
            Gets the XML class for the <see cref="T:ININ.IceLib.Interactions.EmailContent"/> class.
            </summary>
            <returns>The XML object.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.SaveToXmlString(ININ.IceLib.Connection.Session)">
            <summary>
            Gets the XML string for the <see cref="T:ININ.IceLib.Interactions.EmailContent"/> class.
            </summary>
            <returns>The XML string.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailContent.CloneForResponse(ININ.IceLib.Interactions.EmailCloneAttachmentType)">
            <summary>
            Clones this content to be used in a response email.
            </summary>
            <param name="attachmentType">Determines what attachments to include in the cloned content.</param>
            <returns>An editable clone of this content.</returns>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
            <exception cref="T:System.InvalidOperationException">The content is in read-only mode.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.Body">
            <summary>
            Gets or sets the text body of the Email message.
            </summary>
            <remarks>
            The MIME content-type of the body is always <c>text/plain</c>. For HTML email, see <see cref="P:ININ.IceLib.Interactions.EmailContent.Bodies"/>.
            </remarks>
            <seealso cref="P:ININ.IceLib.Interactions.EmailContent.Bodies"/>
            <value>The body.</value>
            <exception cref="T:System.InvalidOperationException">The content is in read-only mode.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.Bodies">
            <summary>
            Gets the bodies of a multi-part email message.
            </summary>
            <value>The bodies.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.Sender">
            <summary>
            Gets or sets the sender.
            </summary>
            <value>The sender.</value>
            <exception cref="T:System.InvalidOperationException">The content is in read-only mode.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.ToRecipients">
            <summary>
            Gets the 'to' recipients.
            </summary>
            <value>The 'to' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.CcRecipients">
            <summary>
            Gets the 'cc' recipients.
            </summary>
            <value>The 'cc' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.BccRecipients">
            <summary>
            Gets the 'bcc' recipients.
            </summary>
            <value>The 'bcc' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.FileAttachments">
            <summary>
            Gets the read only collection of file attachments.
            </summary>
            <value>The file attachments.</value>
            <remarks>
            To manage the attachments, use the <see cref="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachmentAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
            and <see cref="M:ININ.IceLib.Interactions.EmailInteraction.RemoveFileAttachmentAsync(ININ.IceLib.Interactions.EmailFileAttachment,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods.
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.MessageAttachments">
            <summary>
            Gets the read only collection of message attachments.
            </summary>
            <remarks>
            Message attachments are only valid on incoming emails.
            </remarks>
            <value>The message attachments.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.EncryptionCertificate">
            <summary>
            Gets the encryption certificate.
            </summary>
            <value>The encryption certificate.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.DigitalSignatures">
            <summary>
            Gets the read only collection of digital signatures.
            </summary>
            <value>The digital signatures.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailContent.DateReceived">
            <summary>
            Gets the time that this email was received.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailDownloadMessageAttachmentCompletedEventArgs">
            <summary>
            Represents the completion of a <see cref="M:ININ.IceLib.Interactions.EmailInteraction.DownloadMessageAttachmentAsync(ININ.IceLib.Interactions.EmailMessageAttachment,System.EventHandler{ININ.IceLib.Interactions.EmailDownloadMessageAttachmentCompletedEventArgs},System.Object)"/> call.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailDownloadMessageAttachmentCompletedEventArgs.#ctor(ININ.IceLib.Interactions.EmailContent,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailDownloadMessageAttachmentCompletedEventArgs"/> class.
            </summary>
            <param name="content">The resulting email interaction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailDownloadMessageAttachmentCompletedEventArgs.Content">
            <summary>
            Gets the resulting email content.
            </summary>
            <value>The email content.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailEncryptionCertificate">
            <summary>
            Definition for EmailEncryptionCertificate class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailEncryptionCertificate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailEncryptionCertificate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailEncryptionCertificate.Status">
            <summary>
            Gets the encryption status.
            </summary>
            <value>The encryption status.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailEncryptionCertificate.Algorithm">
            <summary>
            Gets the encryption algorithm.
            </summary>
            <value>The encryption algorithm.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailEncryptionCertificate.Certificate">
            <summary>
            Gets the certificate.
            </summary>
            <value>The certificate.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailEncryptionStatus">
            <summary>
            Possible encryption status of an <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailEncryptionStatus.None">
            <summary>
            Message was not encrypted.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailEncryptionStatus.Ok">
            <summary>
            Message was successfully decrypted.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailEncryptionStatus.Denied">
            <summary>
            Decryption was denied by an xIC policy.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailEncryptionStatus.Failed">
            <summary>
            Decryption failed (private key not found, malformed S/MIME, etc.).
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailInteraction">
            <summary>
            Represents an email within the Interaction Center system.
            </summary>
            <remarks>This class can be used to start and stop watches on an email interaction along with
            downloading, uploading, and deleting attachments, and sending email messages.
            <para>To <b>start a watch</b>, call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When
            the email start watch operation completes it invokes the <c>completedCallback</c> delegate. To stop
            watching an email interaction call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the email stop
            watch operation completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>create a new email</b>, call <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeEmail(ININ.IceLib.Interactions.EmailInteractionParameters)"/>.</para>
            <para>To <b>create a response to this email</b>, call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.CreateResponse(ININ.IceLib.Interactions.EmailContent,ININ.IceLib.Interactions.EmailResponseType)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.CreateResponse(ININ.IceLib.Interactions.EmailContent,ININ.IceLib.Interactions.EmailResponseType)"/> with an <see cref="T:ININ.IceLib.Interactions.EmailContent"/> object.
            To create an <see cref="T:ININ.IceLib.Interactions.EmailContent"/> object for response, use the source content's <see cref="M:ININ.IceLib.Interactions.EmailContent.CloneForResponse(ININ.IceLib.Interactions.EmailCloneAttachmentType)"/>.
            When the asynchronous set response operation completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>download a file attachment</b> from the server call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.DownloadFileAttachment(ININ.IceLib.Interactions.EmailFileAttachment,System.IO.Stream)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.DownloadFileAttachmentAsync(ININ.IceLib.Interactions.EmailFileAttachment,System.IO.Stream,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing an
            <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> object and a local path to save the attachment. When the asynchronous download attachment operation
            completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>download a message attachment</b> from the server call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.DownloadMessageAttachment(ININ.IceLib.Interactions.EmailMessageAttachment)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.DownloadMessageAttachmentAsync(ININ.IceLib.Interactions.EmailMessageAttachment,System.EventHandler{ININ.IceLib.Interactions.EmailDownloadMessageAttachmentCompletedEventArgs},System.Object)"/> providing an
            <see cref="T:ININ.IceLib.Interactions.EmailMessageAttachment"/> object.  When the asynchronous download attachment operation
            completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>upload a file attachment</b> to the server call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachment(System.String)"/> or
            <see cref="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachmentAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing a file name
            of the attachment to upload. When the asynchronous upload operation completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>upload an inline file attachment</b> to the server call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachment(System.String,System.String)"/> or
            <see cref="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachmentAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing a file name
            of the attachment to upload and the Content-ID used to identify the attachment within the HTML body of the email. Use <see cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/> to create
            a unique Content-ID that can be used when uploading the given file as an inline attachment.</para>
            <para>To <b>remove a file attachment</b> call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.RemoveFileAttachment(ININ.IceLib.Interactions.EmailFileAttachment)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.RemoveFileAttachmentAsync(ININ.IceLib.Interactions.EmailFileAttachment,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> with an <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> object to
            be removed. When the asynchronous operation completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>send an email</b>, call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.SendEmail"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.SendEmailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous send operation
            completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>Calling <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is already in place, or calling
            <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in place raises and <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous version of these methods is preferred since these operations can be lengthy.</note>
            <note>This class has been updated for 4.0 to replace the EmailResponse with <see cref="T:ININ.IceLib.Interactions.EmailContent"/> with expanded functionality.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.GetContent">
            <summary>
            Gets the email content.
            </summary>
            <returns>The <see cref="T:ININ.IceLib.Interactions.EmailContent"/>.</returns>
            <remarks>
            <para>A call to <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> is required to initialize the cache.</para>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The email is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailIsWatching">
            <summary>
            Determines whether an email watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if an email watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether an email watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatching">
            <summary>
            Starts watching the email interaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The email is already being watched.</exception>
            <ConnectionExceptions/>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the email interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <ininAsyncMethodNote />
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatching">
            <summary>
            Stops watching the emails interaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The email is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the emails interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <ininAsyncMethodNote />
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.DownloadFileAttachment(ININ.IceLib.Interactions.EmailFileAttachment,System.String)">
             <overloads>
             Downloads an <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> from the server.
             </overloads>
            
             <summary>
             Downloads an attachment into a specified file.
             </summary>
             <param name="emailAttachment">The <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> of this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.</param>
             <param name="fileName">The path and name of a local file to save the attachment into.</param>
             <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
             <exception cref="T:ININ.IceLib.NotCachedException">The email is not being watched.</exception>
             <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
             <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
             <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.DownloadFileAttachment(ININ.IceLib.Interactions.EmailFileAttachment,System.IO.Stream)">
            <summary>
            Downloads an attachment into a specified stream.
            </summary>
            <param name="emailAttachment">The <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> of this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.</param>
            <param name="outputStream">The <see cref="T:System.IO.Stream"/> to which the downloaded file should be written.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The email is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.DownloadFileAttachmentAsync(ININ.IceLib.Interactions.EmailFileAttachment,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <overloads>
            Asynchronously downloads an <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> from the server.
            </overloads>
            
            <summary>
            Asynchronously downloads an attachment into a specified file.
            </summary>
            <param name="emailAttachment">The <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> of this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.</param>
            <param name="fileName">The path and name of a local file to save the attachment into.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.DownloadFileAttachmentAsync(ININ.IceLib.Interactions.EmailFileAttachment,System.IO.Stream,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously downloads an attachment into a specified stream.
            </summary>
            <param name="emailAttachment">The <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> of this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.</param>
            <param name="outputStream">The <see cref="T:System.IO.Stream"/> to which the downloaded file should be written.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.DownloadMessageAttachment(ININ.IceLib.Interactions.EmailMessageAttachment)">
            <summary>
            Downloads an attached message.
            </summary>
            <param name="emailAttachment">The <see cref="T:ININ.IceLib.Interactions.EmailMessageAttachment"/> of this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The email is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.DownloadMessageAttachmentAsync(ININ.IceLib.Interactions.EmailMessageAttachment,System.EventHandler{ININ.IceLib.Interactions.EmailDownloadMessageAttachmentCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously downloads an attached message.
            </summary>
            <param name="emailAttachment">The <see cref="T:ININ.IceLib.Interactions.EmailMessageAttachment"/> of this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)">
            <summary>
            Generates a Content-ID to use when uploading a file as an inline attachment.
            </summary>
            <param name="fileName">The path and name of the local file that will be uploaded as the inline attachment.</param>
            <returns>The generated Content-ID conforming to RFCs 2111 and 822.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachment(System.String)">
             <overloads>
             Uploads a file to the server as an attachment on this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
             </overloads>
            
             <summary>
             Uploads an attachment from a local file to this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
             </summary>
             <param name="fileName">The path and name of a local file to upload the attachment from.</param>
             <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
             <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
             <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
             <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachment(System.IO.Stream,System.String)">
            <summary>
            Uploads an attachment to this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/> from a given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="fileName">The file name to be given to the created attachment.</param>
            <param name="inputStream">The <see cref="T:System.IO.Stream"/> from which the file content should be read.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachment(System.String,System.String)">
            <summary>
            Uploads an attachment from a local file to this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <param name="fileName">The path and name of a local file to upload the attachment from.</param>
            <param name="contentId">The Content-ID for an inline attachment conforming to RFC 2111.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <remarks>
            <para>A non-null, non-empty Content-ID must be provided to create an inline attachment.
            Inline attachments conform to RFC 2111, and appear within the body of an email if a Content-ID
            is provided and the HTML email body includes an element (e.g. <c>&lt;img&gt;</c>) associated to
            a valid URL using the <c>cid:</c> URL scheme.</para>
            <para>Use <see cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/> to generate a unique Content-ID for an inline attachment
            prior to uploading it.</para>
            </remarks>
            <seealso cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachment(System.IO.Stream,System.String,System.String)">
            <summary>
            Uploads an attachment to this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/> from a given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="inputStream">The <see cref="T:System.IO.Stream"/> from which the file content should be read.</param>
            <param name="fileName">The file name to be given to the created attachment.</param>
            <param name="contentId">The Content-ID for an inline attachment conforming to RFC 2111.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <remarks>
            <para>A non-null, non-empty Content-ID must be provided to create an inline attachment.
            Inline attachments conform to RFC 2111, and appear within the body of an email if a Content-ID
            is provided and the HTML email body includes an element (e.g. <c>&lt;img&gt;</c>) associated to
            a valid URL using the <c>cid:</c> URL scheme.</para>
            <para>Use <see cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/> to generate a unique Content-ID for an inline attachment
            prior to uploading it.</para>
            </remarks>
            <seealso cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachmentAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <overloads>
            Asynchronously uploads a file to the server as an attachment on this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </overloads>
            
            <summary>
            Asynchronously uploads an attachment from a local file to the current <see cref="T:ININ.IceLib.Interactions.EmailContent"/>.
            </summary>
            <param name="fileName">The path and name of a local file to upload the attachment from.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachmentAsync(System.IO.Stream,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously uploads an attachment to this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/> from a given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="inputStream">The <see cref="T:System.IO.Stream"/> from which the file content should be read.</param>
            <param name="fileName">The file name to be given to the created attachment.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachmentAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously uploads an attachment from a local file to the current <see cref="T:ININ.IceLib.Interactions.EmailContent"/>.
            </summary>
            <param name="fileName">The path and name of a local file to upload the attachment from.</param>
            <param name="contentId">The Content-ID for an inline attachment conforming to RFC 2111.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>
            <para>A non-null, non-empty Content-ID must be provided to create an inline attachment.
            Inline attachments conform to RFC 2111, and appear within the body of an email if a Content-ID
            is provided and the HTML email body includes an element (e.g. <c>&lt;img&gt;</c>) associated to
            a valid URL using the <c>cid:</c> URL scheme.</para>
            <para>Use <see cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/> to generate a unique Content-ID for an inline attachment
            prior to uploading it.</para>
            <ininAsyncMethodNote/>
            </remarks>
            <seealso cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadFileAttachmentAsync(System.IO.Stream,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously uploads an attachment to this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/> from a given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="inputStream">The <see cref="T:System.IO.Stream"/> from which the file content should be read.</param>
            <param name="fileName">The file name to be given to the created attachment.</param>
            <param name="contentId">The Content-ID for an inline attachment conforming to RFC 2111.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>
            <para>A non-null, non-empty Content-ID must be provided to create an inline attachment.
            Inline attachments conform to RFC 2111, and appear within the body of an email if a Content-ID
            is provided and the HTML email body includes an element (e.g. <c>&lt;img&gt;</c>) associated to
            a valid URL using the <c>cid:</c> URL scheme.</para>
            <para>Use <see cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/> to generate a unique Content-ID for an inline attachment
            prior to uploading it.</para>
            <ininAsyncMethodNote/>
            </remarks>
            <seealso cref="M:ININ.IceLib.Interactions.EmailInteraction.GenerateContentId(System.String)"/>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.RemoveFileAttachment(ININ.IceLib.Interactions.EmailFileAttachment)">
            <summary>
            Removes an attachment from the current <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <param name="emailAttachment">The <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> of this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The email is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.RemoveFileAttachmentAsync(ININ.IceLib.Interactions.EmailFileAttachment,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously removes an attachment from the current <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <param name="emailAttachment">The <see cref="T:ININ.IceLib.Interactions.EmailFileAttachment"/> of this <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SendEmail">
            <summary>
            Sends the email.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This is a read only email, sending an email that is in read only mode is invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SendEmailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the email.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This is a read only email, sending an email that is in read only mode is invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SaveEmail">
            <summary>
            Saves the email.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This is a read only email, saving an email that is in read only mode is invalid.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SaveEmailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously saves the email.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This is a read only email, saving an email that is in read only mode is invalid.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.CreateResponse(ININ.IceLib.Interactions.EmailContent,ININ.IceLib.Interactions.EmailResponseType)">
            <summary>
            Creates an email interaction in response (reply, forward, etc...) to this email.
            </summary>
            <param name="newContent">The new email's content.</param>
            <param name="responseType">The type of response to create.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This is a email does not support the requested response type.</exception>
            <remarks>
            Use <see cref="M:ININ.IceLib.Interactions.EmailContent.CloneForResponse(ININ.IceLib.Interactions.EmailCloneAttachmentType)"/> to create content for the new message.
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.CreateResponseAsync(ININ.IceLib.Interactions.EmailContent,ININ.IceLib.Interactions.EmailResponseType,System.EventHandler{ININ.IceLib.Interactions.EmailCreateResponseCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously creates an email interaction in response (reply, forward, etc...) to this email.
            </summary>
            <param name="newContent">The initial content of the newly created email.</param>
            <param name="responseType">The type of response that is created.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            Use <see cref="M:ININ.IceLib.Interactions.EmailContent.CloneForResponse(ININ.IceLib.Interactions.EmailCloneAttachmentType)"/> to create content for the new message.
            <ininAsyncMethodNote/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This is a email does not support the requested response type.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SupportsResponseType(ININ.IceLib.Interactions.EmailResponseType)">
            <summary>
            Determines if this email supports the given response type.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <see langword="true"/> if the type is supported; otherwise, <see langword="false"/>.
            </returns>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteraction.ConversationId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.EmailInteractionAttributeName.ConversationId">conversation identifier</see>.
            </summary>
            <value>The conversation identifier.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteraction.ParentInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.EmailInteractionAttributeName.ParentInteractionId">parent interaction ID</see>.
            </summary>
            <value>The parent interaction ID.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="E:ININ.IceLib.Interactions.EmailInteraction.EmailUpdated">
            <summary>
            Occurs when the email response changes.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteraction.EmailCapabilities">
            <summary>
            Gets the email capabilities portion of <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Capabilities"/>.
            </summary>
            <value>The email capabilities.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteraction.EmailType">
            <summary>
            Gets the response type of <see cref="F:ININ.IceLib.Interactions.EmailInteractionAttributeName.EmailType"/>.
            </summary>
            <value>The email capabilities.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteraction.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <see langword="true"/> if this instance is read only; otherwise, <see langword="false"/>.
            </value>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <doccompleted/>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailInteractionAttributeName.ConversationId">
            <summary>The ID of the conversation this email belongs to.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailInteractionAttributeName.ParentInteractionId">
            <summary>The interaction ID of the parent email.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailInteractionAttributeName.EmailType">
            <summary>The type of the email.</summary>
            <remarks>
            "S"=System 
            "N"=New 
            "R"=Reply 
            "A"=AutoReply 
            "F"=Forward
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteractionCache.SaveContent(ININ.IceLib.Interactions.EmailContent)">
            <summary>
            Saves the email content.
            </summary>
            <param name="emailContent">The email content.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <ConnectionExceptions/>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteractionCache.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailInteractionCapabilities">
            <summary>
            Specifies constants indicating the capabilities of an <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailInteractionCapabilities.None">
            <summary>The email has no capabilities.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailInteractionCapabilities.Edit">
            <summary>The email can be edited.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailInteractionCapabilities.Reply">
            <summary>The email can be replied to.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailInteractionCapabilities.ReplyAll">
            <summary>The email supports performing a reply all.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailInteractionCapabilities.Forward">
            <summary>The email can be forwarded.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailInteractionParameters">
            <summary>
            Provides details when making an email via <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>'s MakeEmail method.
            </summary>
            <icversion>3.0 SU 11</icversion>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteractionParameters.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailInteractionParameters"/> class.
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailInteractionParameters"/> class with default settings.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteractionParameters.#ctor(ININ.IceLib.Interactions.EmailContent)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailInteractionParameters"/> class to
            be used to create a new email from scratch.
            </summary>
            <param name="content">The new initial content.</param>
            <exception cref="T:System.ArgumentNullException">A parameter was <see langword="null"/>.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteractionParameters.#ctor(ININ.IceLib.Interactions.EmailContent,ININ.IceLib.Interactions.EmailInteraction,ININ.IceLib.Interactions.EmailResponseType)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailInteractionParameters"/> class to
            be used to create a new email in response to an existing email.
            </summary>
            <remarks>
            Use <see cref="M:ININ.IceLib.Interactions.EmailContent.CloneForResponse(ININ.IceLib.Interactions.EmailCloneAttachmentType)"/> to create content for the new message.
            </remarks>
            <param name="content">The new initial content.</param>
            <param name="parentEmail">The the email that this is in response to.</param>
            <param name="responseType">The type of response this email is.</param>
            <exception cref="T:System.ArgumentNullException">A parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter was invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The requested response email could not be created.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteractionParameters.ToString">
            <summary>
            Gets the string representation of EmailInteractionParameters.
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteractionParameters.OnBehalfOfWorkgroup">
            <summary>
            Gets or sets the on behalf of workgroup.
            </summary>
            <value>The on behalf of workgroup.</value>
            <exception cref="T:System.ArgumentNullException">The value was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteractionParameters.ParentEmailId">
            <summary>
            Gets the parent email ID.
            </summary>
            <value>The parent email ID.</value>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteractionParameters.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteractionParameters.ResponseType">
            <summary>
            Gets the response type.
            </summary>
            <value>The response type.</value>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteractionParameters.AdditionalAttributes">
            <summary>
            Gets a collection which can be used to set additional attributes.
            </summary>
            <value>The additional attributes collection.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailMessageAttachment">
            <summary>
            Represents a message attachment to a <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailMessageAttachment.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailMessageAttachment"/> class.
            </summary>
            <param name="cookie">The cookie.</param>
            <param name="subject">The subject of the attached message.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailMessageAttachment.Equals(System.Object)">
            <summary>
            The Equals method determines whether the specified System.Object is equal to the current EmailAttachment object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailMessageAttachment.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailMessageAttachment.Cookie">
            <summary>
            Gets the cookie.
            </summary>
            <value>The cookie.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailMessageAttachment.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailPriority">
            <summary>
            The priority of an e-mail.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailPriority.None">
            <summary>
            No priority.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailPriority.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailPriority.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailPriority.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailResponseType">
            <summary>
            Specifies constants indicating the response type of an <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailResponseType.None">
            <summary>
            No response type specified.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailResponseType.New">
            <summary>
            An email created from scratch.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailResponseType.Reply">
            <summary>
            An email that is a reply to an existing email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailResponseType.ReplyAll">
            <summary>
            An email that is a reply all to an existing email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailResponseType.Forward">
            <summary>
            An email that is a forward of an existing email.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailResolver">
            <summary>
            Allows resolving Email addresses within the Interaction Center system.
            </summary>
            <remarks>This class takes a string containing a full or partial Email address and the IC server 
            resolves it into an array of <see cref="T:ININ.IceLib.Interactions.EmailAddress"/> objects.
            <para>To resolve an Email address string, pass it to the <see cref="M:ININ.IceLib.Interactions.EmailResolver.ResolveName(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.EmailResolver.ResolveNameAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods.
            When the asynchronous resolve name operation completes it invokes the <c>completedCallback</c> delegate. When the server
            has finished resolving the Email address it triggers the <see cref="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved"/> event. The resolved email addresses
            are returned in the <see cref="T:ININ.IceLib.Interactions.EmailAddressesEventArgs"/> object of this event.</para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResolver.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailResolver"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResolver.ResolveName(System.String)">
            <summary>
            Resolves an email address.
            </summary>
            <param name="addressSearch">The full or partial address.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResolver.ResolveNameAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously resolves an email address.
            </summary>
            <param name="addressSearch">The full or partial address.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResolver.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResolver.MaxResults">
            <summary>
            Gets or sets the maximum number of results to include in the <see cref="P:ININ.IceLib.Interactions.EmailAddressesEventArgs.Results"/>
            property of <see cref="T:ININ.IceLib.Interactions.EmailAddressesEventArgs"/> when the <see cref="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved"/> event is raised.
            </summary>
            <value>The maximum number of results.</value>
            <remarks>A value less than zero indicates that all results should be returned.</remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved">
            <summary>
            Occurs when Email recipients have been resolved.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailSignatureCertificate">
            <summary>
            Definition for EmailSignatureCertificate class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailSignatureCertificate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailSignatureCertificate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailSignatureCertificate.Status">
            <summary>
            Gets the signature status.
            </summary>
            <value>The signature status.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailSignatureCertificate.Certificate">
            <summary>
            Gets the certificate.
            </summary>
            <value>The certificate.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailSignatureStatus">
            <summary>
            Possible status of an <see cref="P:ININ.IceLib.Interactions.EmailContent.DigitalSignatures"/>.
            </summary>
            <remarks>
            Any flag being on would indicate that the signature has some errors.
            Please note that 'Unknown' has a value of 0xFF (255) - which has 7 bits on.
            </remarks>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.Unknown">
            <summary>
            Any sort of catastrophic failure (malformed S/MIME, internal error, etc.).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.Ok">
            <summary>
            Signature does not show any known problems.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.MessageModified">
            <summary>
            The cryptographic hash does not match the message. Message was possibly tampered with in transit.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.CertificateNotTrusted">
            <summary>
            The signer's certificate is not trusted. This could be for various reasons:
              * One or more of the certificates in the chain is missing from the certificate store or is not trusted.
              * The signer's certificate has expired or is not yet valid.
              * The signer's certificate does not have Digital Signature or Email Protection (1.3.6.1.5.5.7.3.4) as a valid use.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.EmailHeaderMismatch">
            <summary>
            The From: address in the email's header does not match the email address in the certificate.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.GenericInteraction">
            <summary>
            Represents a generic interaction object within the Interaction Center system.
            </summary>
            <remarks>Generic interactions are generic objects that can be placed on queues and instantiated as part of an interaction queue watch.
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.GenericInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.GenericInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.GenericInteractionParameters">
            <summary>
            Provides details when creating Generic Interactions via 
            <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeGenericInteraction(ININ.IceLib.Interactions.GenericInteractionParameters)"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.GenericInteractionParameters.#ctor(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.InteractionState)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.GenericInteractionParameters"/> class.
            </summary>
            <param name="targetQueueId">The ID of the target queue.</param>
            <param name="initialState">The initial state.</param>
            <remarks>
            <paramref name="initialState"/> can be one of Alerting, Connected, Held, Parked, Internal Disconnect, 
            External Disconnect, Offering, System, Proceeding or Messaging
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetQueueId"/> is <see langword="null"/>, or <paramref name="initialState"/> is not one of Alerting, 
            Connected, Held, Parked, Internal Disconnect, External Disconnect, Offering, System, Proceeding or Messaging.
            </exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.GenericInteractionParameters.#ctor(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.InteractionState,ININ.IceLib.Interactions.InteractionDirection,ININ.IceLib.Interactions.InteractionPartyType,System.String,ININ.IceLib.Interactions.InteractionPartyType,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <exception cref="T:System.ArgumentException">local party type has to be internal when creating objects through IceLib.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.GenericInteractionParameters.ToString">
            <summary>
            Gets the string representation of <see cref="T:ININ.IceLib.Interactions.GenericInteractionParameters"/>.
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.TargetQueueId">
            <summary>
            Gets the queue ID.
            </summary>
            <value>The queue ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.InitialState">
            <summary>
            Gets the initial state.
            </summary>
            <value>The initial state.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.InteractionDirection">
            <summary>
            Gets or sets the interaction direction.
            </summary>
            <value>The interaction direction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.LocalPartyType">
            <summary>
            Gets or sets the type of the local party.
            </summary>
            <value>The type of the local party.</value>
            <remarks>local party type can be internal or system.</remarks>
            <exception cref="T:System.ArgumentException"><c>LocalPartyType</c> must be <see cref="F:ININ.IceLib.Interactions.InteractionPartyType.Internal"/>
            when creating objects through IceLib.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.LocalLocation">
            <summary>
            Gets or sets the local location.
            </summary>
            <value>The local location.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.RemotePartyType">
            <summary>
            Gets or sets the type of the remote party.
            </summary>
            <value>The type of the remote party.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.RemoteId">
            <summary>
            Gets or sets the remote ID.
            </summary>
            <value>The remote ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.RemoteName">
            <summary>
            Gets or sets the name of the remote.
            </summary>
            <value>The name of the remote.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.AdditionalAttributes">
            <summary>
            Gets a collection which can be used to set additional attributes.
            </summary>
            <value>The additional attributes collection.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.GetAttributeCompletedEventArgs`1">
            <summary>
            Provides data for the <c>completedCallback</c> delegate of <see cref="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Boolean}},System.Object)"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.String}},System.Object)"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Int32}},System.Object)"/>, and <see cref="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.DateTime}},System.Object)"/> events of a <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <typeparam name="TAttributeValue">The attribute value.</typeparam>
            <remarks>An <b>interaction attribute</b> is a piece of information about an interaction that travels with it 
            throughout the Interaction Center. For example, Telephone calls, chat sessions, Emails, and generic 
            objects are entities in IC that have some type of attribute associated with them. Attributes can be 
            created by a variety of entities, including the Interaction Center itself. For example, the Telephony 
            Services subsystem creates default call object attributes when a call object is established. Handlers, 
            IC applications, and programs developed using APIs can create and modify attributes.<br/><br/>
            Attributes are name/value pairs. To retrieve the value of an attribute, you must know its attribute name. 
            The value of an attribute is usually string data. However, chat and call attributes can contain 32-bit 
            binary data in DWORD format. Email objects return data that is stored in Interaction Designer’s list 
            variable format.<br/><br/>
            <para><list type="bullet">
            <item>Attribute names are not case-sensitive. "Eic_StationName" "eic_stationname" refer to the same attribute.<br/><br/></item>
            <item>Attributes names that begin with Eic_ are primarily used by Interaction Client to display information about an object.<br/><br/></item>
            <item>Attributes whose name does not begin with Eic_ are primarily used by handlers or chat objects.<br/><br/></item>
            <item>Attributes whose name ends with "Raw" contain original, unprocessed values. These attributes are logged for reporting purposes.<br/><br/></item>
            <item><i>Directory Services</i> "attributes" are not the same as <i>interaction</i> attributes discussed here. A Directory Services attribute is an item of information that is stored in Directory Services as a registry key. Interaction attributes are name/value pairs that travel with an object as it is processed by the Interaction Center server.</item>
            </list><br/><br/></para>
            <note>For more information about attributes, see <i>Interaction Attributes Reference Guide</i> in the
            <i>System APIs</i> section of the IC Documentation library on your IC server.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.GetAttributeCompletedEventArgs`1.#ctor(System.String,`0,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of this class with the specified values.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.GetAttributeCompletedEventArgs`1.AttributeName">
            <summary>
            Gets the attribute name associated with the event.
            </summary>
            <value>The name of the attribute.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="P:ININ.IceLib.Interactions.GetAttributeCompletedEventArgs`1.AttributeValue">
            <summary>
            Gets the attribute value associated with the event.
            </summary>
            <value>The attribute value.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.GetContentsCompletedEventArgs">
            <summary>
            Provides data for asynchronous completed events of <see cref="T:ININ.IceLib.Interactions.InteractionConference"/> and <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.GetContentsCompletedEventArgs.#ctor(ININ.IceLib.Interactions.Interaction[],System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.GetContentsCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="interactions">The interactions.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.GetContentsCompletedEventArgs.Interactions">
            <summary>
            Gets the Interactions associated with the event.
            </summary>
            <value>The interactions.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.GetStringAttributesCompletedEventArgs">
            <summary>
            Provides data for the <c>completedCallback</c> delegate of <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttributesAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.GetStringAttributesCompletedEventArgs},System.Object)"/> events of a <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <remarks>An <b>interaction attribute</b> is a piece of information about an interaction that travels with it 
            throughout the Interaction Center. For example, Telephone calls, chat sessions, Emails, and generic 
            objects are entities in IC that have some type of attribute associated with them. Attributes can be 
            created by a variety of entities, including the Interaction Center itself. For example, the Telephony 
            Services subsystem creates default call object attributes when a call object is established. Handlers, 
            IC applications, and programs developed using APIs can create and modify attributes.<br/><br/>
            Attributes are name/value pairs. To retrieve the value of an attribute, you must know its attribute name. 
            The value of an attribute is usually string data. However, chat and call attributes can contain 32-bit 
            binary data in DWORD format. Email objects return data that is stored in Interaction Designer’s list 
            variable format.<br/><br/>
            <para><list type="bullet">
            <item>Attribute names are not case-sensitive. "Eic_StationName" "eic_stationname" refer to the same attribute.<br/><br/></item>
            <item>Attributes names that begin with Eic_ are primarily used by Interaction Client to display information about an object.<br/><br/></item>
            <item>Attributes whose name does not begin with Eic_ are primarily used by handlers or chat objects.<br/><br/></item>
            <item>Attributes whose name ends with "Raw" contain original, unprocessed values. These attributes are logged for reporting purposes.<br/><br/></item>
            <item><i>Directory Services</i> "attributes" are not the same as <i>interaction</i> attributes discussed here. A Directory Services attribute is an item of information that is stored in Directory Services as a registry key. Interaction attributes are name/value pairs that travel with an object as it is processed by the Interaction Center server.</item>
            </list><br/><br/></para>
            <note>For more information about attributes, see <i>Interaction Attributes Reference Guide</i> in the
            <i>System APIs</i> section of the IC Documentation library on your IC server.</note>
            </remarks>
            <doccompleted/>
            <icversion>3.0 SU 11</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.GetStringAttributesCompletedEventArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of this class with the specified values.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="attributes">attributes</paramref> is empty.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.GetStringAttributesCompletedEventArgs.Attributes">
            <summary>
            Gets the attributes associated with the event.
            </summary>
            <value>The attributes.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.HistoryFilter">
            <summary>
            Provides filter criteria when submitting a history query.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryFilter.StartTime">
            <summary>
            Member: Start Time
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryFilter.EndTime">
            <summary>
            Member: End Time
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryFilter.Flags">
            <summary>
            Member: Flags
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryFilter.MaxItemCount">
            <summary>
            Member: Max Item Count
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryFilter.MaxConnectedCount">
            <summary>
            Member: Max Connected Count
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryFilter.MaxMissedCount">
            <summary>
            Member: Max Missed Count
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryFilter.MaxInboundCount">
            <summary>
            Member: Max Inbound Count
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryFilter.MaxOutboundCount">
            <summary>
            Member: max Outbound count
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.HistoryFilter.ToString">
            <summary>
            Toes the string.
            </summary>
            <returns>The filter as a <c>string</c>.</returns>
        </member>
        <member name="T:ININ.IceLib.Interactions.HistoryItem">
            <summary>
            Contains history information for an <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <remarks>
            The <see cref="T:ININ.IceLib.Interactions.HistoryItem"/> class is a container for history information about 
            a past interaction.
            <para>Use the <see cref="T:ININ.IceLib.Interactions.InteractionsHistory"/> class to retrieve
            <see cref="T:ININ.IceLib.Interactions.HistoryItem"/> objects for the user's interactions.</para></remarks>
            <seealso cref="T:ININ.IceLib.Interactions.InteractionsHistory"/>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.InteractionId">
            <summary>
            Gets the interaction ID of the <see cref="T:ININ.IceLib.Interactions.Interaction"/> to which the history data corresponds.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.BeginTime">
            <summary>
            Gets the time the interaction began.
            </summary>
            <value>The begin time.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.EndTime">
            <summary>
            Gets the time the interaction was disconnected or left the queue.
            </summary>
            <value>The end time.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.Direction">
            <summary>
            Gets the direction of the interaction.
            </summary>
            <value>The direction of the interaction.</value>
            <seealso cref="T:ININ.IceLib.Interactions.InteractionDirection"/>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.InteractionLog">
            <summary>
            Gets log information about the interaction as a <c>string</c>.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.ItemFlags">
            <summary>
            Gets flags indicating the status of the interaction.
            </summary>
            <value>The item flags.</value>
            <seealso cref="T:ININ.IceLib.Interactions.HistoryItemFlags"/>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.LocalName">
            <summary>
            Gets the displayable name of the local party.
            </summary>
            <value>The displayable name of the local party.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.LocalId">
            <summary>
            Gets the displayable address of local party.
            </summary>
            <value>The displayable local address string.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.LocalAddress">
            <summary>
            Gets the address of the local party.
            </summary>
            <value>The local address string.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.RemoteName">
            <summary>
            Gets the displayable name of the remote party.
            </summary>
            <value>The displayable name of the remote party.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.RemoteId">
            <summary>
            Gets the remote party ID as a friendly display value.
            </summary>
            <value>The remote ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.Notes">
            <summary>
            Gets the notes that were added to the interaction.
            </summary>
            <value>The interaction notes.</value>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.HistoryItem.RemoteAddress">
            <summary>
            Gets the address of the remote party.
            </summary>
            <value>The remote address.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.HistoryItemCache">
            <summary>
            Provides the actual storage of the history data for an <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <remarks>This class is wrapped by the <see cref="T:ININ.IceLib.Interactions.HistoryItem"/> class because
            we don't want the IWatchedObjectHelper methods exposed externally.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.HistoryItemCache.HelperMergeDiff(System.Object)">
            <summary>
            Do a difference of the two objects and merge any data.
            </summary>
            <param name="newObject">The new cache object we want to merge in.</param>
            <returns>
            An collection of changed properties. The colletion is empty if there were no changes.
            </returns>
        </member>
        <member name="T:ININ.IceLib.Interactions.HistoryItemFlags">
            <summary>
            An set of flags to indicate the status of the interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemFlags.None">
            <summary>No status indicated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemFlags.BeenConnected">
            <summary>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> had been connected.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemFlags.Forwarded">
            <summary>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> was forwarded.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.HistoryItemProperty">
            <summary>
            Each value in the enumeration represents a property of <see cref="T:ININ.IceLib.Interactions.HistoryItem"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.None">
            <summary>No property is indicated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.BeginTime">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.BeginTime"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.Direction">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.Direction"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.EndTime">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.EndTime"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.InteractionId">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.InteractionId"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.InteractionLog">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.InteractionLog"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.ItemFlags">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.ItemFlags"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.LocalAddress">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.LocalAddress"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.LocalId">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.LocalId"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.LocalName">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.LocalName"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.RemoteAddress">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.RemoteAddress"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.RemoteId">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.RemoteId"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.HistoryItemProperty.RemoteName">
            <summary>Represents the <see cref="P:ININ.IceLib.Interactions.HistoryItem.RemoteName"/> property.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InitiateSecureInputCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.Interaction.InitiateSecureInputAsync(ININ.IceLib.Interactions.SecureInputParameters,System.EventHandler{ININ.IceLib.Interactions.InitiateSecureInputCompletedEventArgs},System.Object)"/>'s <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InitiateSecureInputCompletedEventArgs.#ctor(System.String,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeCallbackInteractionCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InitiateSecureInputCompletedEventArgs.TransactionId">
            <summary>
            Gets the transaction ID associated with the event.
            </summary>
            <value>The transaction ID.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlertAction">
            <summary>
            Indicates the action that needs to be taken when an alert event is received.
            </summary>
            <icversion>3.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertAction.None">
            <summary>
            No action required.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertAction.StartAlerting">
            <summary>
            Start alerting for the Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertAction.StopAlerting">
            <summary>
            Stop alerting for the Interaction.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlerting">
            <summary>
            This class provides information about Interactions that are alerting for the Session
            User.
            </summary>
            <remarks>
            InteractionAlerting relies on its related <see cref="T:ININ.IceLib.Connection.Session"/> to be connected to 
            function properly; the <see cref="T:ININ.IceLib.Connection.Session"/> is set via the  
            <see cref="P:ININ.IceLib.Interactions.InteractionAlerting.InteractionsManager"/> used to create the <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> instance. If an 
            <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> instance is created when its related 
            <see cref="T:ININ.IceLib.Connection.Session"/> is not connected, it will correct itself when 
            <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)"/> is called. Be aware that 
            until that time, attempting to call <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.ToString"/> or access the <see cref="P:ININ.IceLib.Interactions.InteractionAlerting.UserId"/> property will
            will return a value of <see cref="F:System.String.Empty"/>.
            </remarks>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.ToString">
            <remarks>
            See the <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> class remarks for some caveats if the 
            <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> class is created before its related 
            <see cref="T:ININ.IceLib.Connection.Session"/> is connected.
            </remarks>
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatching">
            <summary>
            Starts watching for alerting events.
            </summary>
            <returns>The initial alerting details.</returns>
            <remarks>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
            <ConnectionExceptions/>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously starts watching for alerting events.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.StopWatching">
            <summary>
            Stops watching for alerting events.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching for alerting events.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlerting.InteractionsManager">
            <summary>
            Gets the InteractionManager associated with this object.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlerting.UserId">
            <summary>
            Gets the user ID.
            </summary>
            <remarks>
            See the <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> class remarks for some caveats if the 
            <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> class is created before its related 
            <see cref="T:ININ.IceLib.Connection.Session"/> is connected.
            </remarks>
            <value>The user ID.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionAlerting.AlertReceived">
            <summary>
            Occurs when an interaction is about to be alerted or when an interaction is
            about to stop alerting.
            </summary>
            <remarks>
            This event will only occur if the interaction is being watched. To start
            watching the interaction call either the <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatching"/> method or
            the <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlertingCache.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAlertingCache"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlertingCache.StartWatchingImpl(ININ.IceLib.Interactions.InteractionAlerting)">
            <summary>
            Implementation for StartWatching.
            </summary>
            <returns>A read only collection of <see cref="T:ININ.IceLib.Interactions.InteractionAlertingDetails"/>.</returns>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlertingCache.StopWatchingImpl(ININ.IceLib.Interactions.InteractionAlerting)">
            <summary>
            Implementation for StopWatching.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingCache.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingCache.UserId">
            <summary>
            Gets the user ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlertingDetails">
            <summary>
            Provides details for alerting via the <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> class.
            </summary>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlertingDetails.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.AlertAction">
            <summary>
            Gets the alert action, which indicates if the alert is starting or stopping.
            </summary>
            <value>The alert action, which indicates if the alert is starting or stopping.</value>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.AlertType">
            <summary>
            Gets the type of the alert.
            </summary>
            <value>The type of the alert.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.AutoAnswer">
            <summary>
            Gets a value indicating whether the interaction is set to auto answer.
            </summary>
            <value><see langword="true"/> if is set to auto answer; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.CallingName">
            <summary>
            Gets the name of the calling party.
            </summary>
            <value>The name of the calling party.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.CallingAddress">
            <summary>
            Gets the calling party address.
            </summary>
            <value>The calling party address.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.MonitoredQueue">
            <summary>
            Gets the monitored queue, if any.
            </summary>
            <value>The monitored queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.InteractionId">
            <summary>
            Gets the ID of the interaction that is about to start or stop alerting.
            </summary>
            <value>The ID of the interaction that is about to start or stop alerting.</value>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlertingEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionAlerting.AlertReceived"/> event.
            </summary>
            <icversion>3.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingEventArgs.AlertingDetails">
            <summary>
            Gets the alerting details.
            </summary>
            <value>The alerting details.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlertType">
            <summary>
            Represents the reason why an interaction is alerting.
            </summary>
            <icversion>3.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.None">
            <summary>
            The Interaction is alerting, source unknown.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.User">
            <summary>
            The Interaction is alerting on a user queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.Station">
            <summary>
            The Interaction is alerting on a station queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.Workgroup">
            <summary>
            The Interaction is alerting on a workgroup queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.StationGroup">
            <summary>
            The Interaction is alerting on a station group queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.AcdUser">
            <summary>
            The Interaction is alerting on the ACD user.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.AcdStation">
            <summary>
            The Interaction is alerting on ACD station.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAttributeMonitor">
            <summary>
            Allows attribute level monitors on the Interaction Center system.
            </summary>
            <remarks>
            Use this class to be notified of interactions that have an attribute set to a specific value.
            For ex. an application would like to know about attributes "Eic_State, Eic_CallId" on all interactions that have <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallClassification"/> attribute set to "Emergency".
            Please refer to <b>ININ.People.UserDataSettings.AllowedClassificationList</b> to get a list of call classifications that you have access to.
            <example>
            <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallClassification"/> attribute set to "Emergency" can be represented by <see cref="P:ININ.IceLib.Interactions.InteractionAttributeMonitor.AttributeMonitorId"/>.
            <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> should be used to 
            <code>
            string attributeValue = "Emergency";
            
            InteractionsManager manager = new InteractionsManager(_Session);
            
            AttributeMonitorId monitorId = new AttributeMonitorId(InteractionAttributeName.CallClassification, attributeValue);
            InteractionAttributeMonitor monitor = new InteractionAttributeMonitor(manager, monitorId);
            
            string[] attributes = new string[] { "Eic_State", "Eic_CallId" };
            
            monitor.StartWatching(attributes);
            </code>
            
            The object "monitor" will start receiving notifications as long as <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallClassification"/> attribute is set to "Emergency" on any interactions.
            <see cref="T:ININ.IceLib.Interactions.InteractionAttributesEventArgs"/> contains the <see cref="T:ININ.IceLib.Interactions.Interaction">interactions</see> that match <see cref="P:ININ.IceLib.Interactions.InteractionAttributeMonitor.AttributeMonitorId"/>.
            </example>
            <para>
            <note>
            When monitoring emergency calls, be sure to monitor the following attributes. These attributes contain originating station's (the station from which emergency call was made) emergency information.
            <list type="bullet">
            	<item><term><see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StationLocationDescription"/></term><description>Station Location Description</description></item>
            	<item><term><see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StationEmergencyOutboundAni"/></term><description>Station Emergency Outbound ANI</description></item>
            	<item><term><see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StationEmergencyCustomerLocationDescription"/></term><description>Station Emergency Customer Location Description</description></item>
            	<item><term><see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StationEmergencyCustomerName"/></term><description>Station Emergency Customer Name</description></item>
            </list>
            </note>
            </para>
            </remarks>
            <icversion>3.0 SU 6</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.AttributeMonitorId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAttributeMonitor"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="monitorId">The monitor ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance. <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> provides a list of attribute names.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>
            	<see langword="true"/> if a watch is active and the specified value is being watched; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])">
            <summary>
            Starts watching the specified <paramref name="attributeNames"/> for this <see cref="T:ININ.IceLib.Interactions.Interaction"/>. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">A watch is already in progress.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <ConnectionExceptions/>
            <remarks>
            <para>
            Applications cannot call <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> on the interactions that this object caches. A new instance of interaction object needs to be constructed in order to watch.
            However, actions such as <see cref="M:ININ.IceLib.Interactions.Interaction.Join"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.Listen(System.Boolean,System.Boolean)"/> can be performed on this instance of interaction. A new instance need not be created.
            This instance of the interaction object is not based off <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </para>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <note>Strings for <paramref name="attributeNames"/> are defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the specified <paramref name="attributeNames"/> for this <see cref="T:ININ.IceLib.Interactions.Interaction"/>. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <note>Strings for <paramref name="attributeNames"/> are defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes what attributes of the <see cref="T:ININ.IceLib.Interactions.Interaction"/> are being watched. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <see langword="null"/>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <see langword="null"/>.)</param>
            <param name="replaceExisting">if set to <see langword="true"/>, replace the existing list.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <ConnectionExceptions/>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            <note>Strings for <paramref name="attributeNamesToAdd"/> and <paramref name="attributeNamesToRemove"/> are defined 
            in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes what attributes of the <see cref="T:ININ.IceLib.Interactions.Interaction"/> are being watched. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <see langword="null"/>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <see langword="null"/>.)</param>
            <param name="replaceExisting">if set to <see langword="true"/>, replace the existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            <note>Strings for <paramref name="attributeNamesToAdd"/> and <paramref name="attributeNamesToRemove"/> are defined
            in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StopWatching">
            <summary>
            Stops watching the Interaction.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the Interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <ininAsyncMethodNote />
            <ininHowWatchesWork />
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAttributeMonitor.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this monitor is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAttributeMonitor.AttributeMonitorId">
            <summary>
            Gets the ID of the Monitor.
            </summary>
            <value>The monitor ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAttributeMonitor.CachedInteractions">
            <summary>
            Gets the cached <see cref="T:ININ.IceLib.Interactions.Interaction">Interactions</see>.
            </summary>
            <value>The cached interactions.</value>
            <remarks>
            <para>
            Applications cannot call <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> on these cached interactions. A new instance of interaction object needs to be constructed in order to watch.
            This instance of the interaction object is not based off <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </para>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionAttributeMonitor.InteractionAdded">
            <summary>
            Occurs when an Interaction is added to the Attribute Monitor.
            </summary>
            <remarks>
            This event will only occur when watching <see cref="T:ININ.IceLib.Interactions.Interaction"/> attributes. To start
            watching for interactions call either the <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> method or
            the <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method. To modify which interactions are
            being watched once the watch has been started, use the 
            <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionAttributeMonitor.InteractionChanged">
            <summary>
            Occurs when an Interaction on the Attribute Monitor changes.
            </summary>
            <remarks>
            This event will only occur when <see cref="T:ININ.IceLib.Interactions.Interaction"/> attributes being
            watched have changed. To start watching for attributes call either the 
            <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> method or the <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
            method. To modify which attributes are being watched once the watch has been
            started, use the <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionAttributeMonitor.InteractionRemoved">
            <summary>
            Occurs when an Interaction is removed from the Attribute Monitor.
            </summary>
            <remarks>
            This event will only occur when watching <see cref="T:ININ.IceLib.Interactions.Interaction"/> attributes. To start
            watching for attributes call either the <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> method or
            the <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionAttributeMonitor.LostRights">
            <summary>
            Occurs when the user lost rights to receive events on this monitor.
            </summary>
            <remarks>
            <para>One of the scenarios this might occur is when the user is removed from Call classification's notification list.</para>
            This event will only occur when watching <see cref="T:ININ.IceLib.Interactions.Interaction"/> attributes. To start
            watching for attributes call either the <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> method or
            the <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionAttributeMonitor.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAttributeMonitorCache.AttributeMonitorId">
            <summary>
            Gets the attribute monitor ID.
            </summary>
            <value>The attribute monitor ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAttributesEventArgs">
            <summary>
            Provides data for the InteractionAttributesChanged event of a <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributesEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAttributesEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAttributesEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAttributesEventArgs.InteractionAttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The interaction attribute names.</value>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCache.NotifyAttributesUpdatedImpl(System.Object,System.Collections.Generic.IEnumerable{ININ.IceLib.Interactions.Internal.AttributeKey})">
            <summary>
            Change notification implementation for inheriting classes.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeKeys">The attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCache.FetchAttributeValuesImpl(ININ.IceLib.Interactions.Internal.AttributeKey[],ININ.IceLib.Interactions.Internal.AttributeKey[]@,System.String[]@)">
            <summary>
            Attribute initialization for inheriting classes.
            </summary>
            <param name="requestedAttributeNames">The requested attribute names.</param>
            <param name="retrievedAttributeNames">The retrieved attribute names.</param>
            <param name="retrievedAttributeValues">The retrieved attribute values.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCache.UpdateAttributeCacheImpl(ININ.IceLib.Interactions.Internal.AttributeKey,System.String,System.Boolean)">
            <summary>
            Attribute cache updating for inheriting classes.
            </summary>
            <param name="attributeKey">The attribute key.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="isSettingDefaults">if set to <see langword="true"/> is setting defaults; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCache.UpdateEffectiveCapabilities(System.Boolean)">
            <summary>
            Updates the effective capabilities.
            </summary>
            <param name="hasEffectiveStation">if set to true, then an effective station is present.</param>
            <returns>
            Returns true if capabilities changed; otherwise, false.
            </returns>
            <remarks>
            This method will invoke the <see cref="M:ININ.IceLib.Interactions.Interaction.OnAttributesChanged(ININ.IceLib.Interactions.AttributesEventArgs)"/> event on all watchers if the <see cref="P:ININ.IceLib.Interactions.InteractionCache.EffectiveCapabilities"/> changes.
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.EffectiveCapabilities">
            <summary>
            Gets the effective capabilities.  This value is a blended value of ActualCapabilties and logic in regards to <see cref="P:ININ.IceLib.Connection.Session.HasEffectiveStation"/>.
            </summary>
            <value>The effective capabilities.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.Monitors">
            <exception cref="T:ININ.IceLib.NotCachedException">Monitors are not cached.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.SupervisorMonitors">
            <exception cref="T:ININ.IceLib.NotCachedException">SupervisorMonitors are not cached.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.Recorders">
            <exception cref="T:ININ.IceLib.NotCachedException">Recorders are not cached.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.SupervisorRecorders">
            <exception cref="T:ININ.IceLib.NotCachedException">SupervisorRecorders are not cached.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.InitiationTime">
            <exception cref="T:ININ.IceLib.NotCachedException">InitiationTime is not cached.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.DisconnectionTime">
            <exception cref="T:ININ.IceLib.NotCachedException">DisconnectionTime is not cached.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.Capabilities">
            <exception cref="T:ININ.IceLib.NotCachedException">Capabilities is not cached.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.InteractionType">
            <exception cref="T:ININ.IceLib.NotCachedException">InteractionType is not cached.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionCallType">
            <summary>
            Specifies constants indicating the call type.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCallType.Unknown">
            <summary>The call type is unknown. Possibly the caller is not an IC user.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCallType.Intercom">
            <summary>The call is an intercom call, which means that the caller is an internal IC participant.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCallType.External">
            <summary>The call is an external call. The caller is a non-IC participant.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionCapabilities">
            <summary>
            Specifies constants indicating the capabilities of an Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.None">
            <summary>The Interaction has no capabilities.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Consult">
            <summary>The Interaction can perform consults.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Disconnect">
            <summary>The Interaction can be disconnected.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Hold">
            <summary>The Interaction can be held.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Listen">
            <summary>The Interaction can perform listens.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Messaging">
            <summary>The Interaction can perform messaging.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Mute">
            <summary>The Interaction can be muted.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Park">
            <summary>The Interaction can be parked.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Pause">
            <summary>The Interaction can pause recording.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Pickup">
            <summary>The Interaction can be picked up.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Private">
            <summary>The Interaction can be marked private.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Record">
            <summary>The Interaction can be recorded.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.RequestHelp">
            <summary>The Interaction can have help requested.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Transfer">
            <summary>The Interaction can be transferred.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Join">
            <summary>The ConferenceInteraction can be joined.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.ObjectWindow">
            <summary>The Interaction can have an object window displayed.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Conference">
            <summary>The Interaction can be conferenced.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Coach">
            <summary>The Interaction can be coached.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Suspended">
            <summary>The Interaction can be suspended.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.SecureRecordingPause">
            <summary>The Interaction can pause recording for security.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.SecureInput">
            <summary>The Interaction can initiate secure input.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionCompletedEventArgs">
            <summary>
            Provides data for the asynchronous completed events of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCompletedEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCompletedEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the event.
            </summary>
            <value>The interaction.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionConference">
            <summary>
            Represents a conference within the Interaction Center system.
            </summary>
            <remarks>An interaction conference occurs when multiple parties are participating in the same interaction.
            This class provides support for representing an interaction conference and for adding and listing parties in
            the interaction.
            <para>To add parties to an interaction, call <see cref="M:ININ.IceLib.Interactions.InteractionConference.AddParties(ININ.IceLib.Interactions.Interaction[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionConference.AddPartiesAsync(ININ.IceLib.Interactions.Interaction[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing an
            array of <see cref="T:ININ.IceLib.Interactions.Interaction"/> objects. When the asynchronous add parties operation completes, it invokes the <c>completedCallback</c> delegate.</para>
            <para>To get the parties of a conference interaction, call <see cref="M:ININ.IceLib.Interactions.InteractionConference.GetParties"/> or <see cref="M:ININ.IceLib.Interactions.InteractionConference.GetPartiesAsync(System.EventHandler{ININ.IceLib.Interactions.GetContentsCompletedEventArgs},System.Object)"/>. When the asynchronous
            get parties operation completes, it invokes the <c>completedCallback</c> delegate returning the list of interactions in the
            <see cref="T:ININ.IceLib.Interactions.GetContentsCompletedEventArgs"/> object.<br/><br/></para>
            <note>The asynchronous version of the above methods is preferred since these operations can be lengthy.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionType)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="conferenceType">Type of the conference.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionType,ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="conferenceType">Type of the conference.</param>
            <param name="conferenceId">The conference ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.InviteParty(ININ.IceLib.Interactions.InvitePartyParameters)">
            <summary>
            Invites a party to the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <param name="inviteParameters">The invite parameters.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.NotSupportedException">inviteParameters is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.Started"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <ConnectionExceptions/>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.InviteParty(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InvitePartyParameters)"/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.InvitePartyAsync(ININ.IceLib.Interactions.InvitePartyParameters,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously invites a party to the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <param name="inviteParameters">The invite parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.NotSupportedException">inviteParameters is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.Started"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.InvitePartyAsync(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InvitePartyParameters,System.EventHandler{ININ.IceLib.Interactions.InvitePartyCompletedEventArgs},System.Object)"/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.AddParties(ININ.IceLib.Interactions.Interaction[])">
            <summary>
            Adds parties to the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <param name="interactions">The interactions.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.AddPartiesAsync(ININ.IceLib.Interactions.Interaction[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously adds parties to the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <param name="interactions">The interactions.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.GetParties">
            <summary>
            Gets the parties in the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> array that was returned.</returns>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.GetPartiesAsync(System.EventHandler{ININ.IceLib.Interactions.GetContentsCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously gets the parties in the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.CreateSidebarChat">
            <summary>
            Creates a sidebar chat including all internal parties in this conference<see cref="T:ININ.IceLib.Interactions.InteractionConference">conference</see>.
            </summary>
            <returns>The ID of the newly created Chat.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.CreateSidebarChatAsync(System.EventHandler{ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously creates a sidebar chat including all internal parties in this conference<see cref="T:ININ.IceLib.Interactions.InteractionConference">conference</see>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
            <icversion>3.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionConference.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Conference is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionConference.ConferenceId">
            <summary>
            Gets the ID of the Conference.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionConference.ConferenceType">
            <summary>
            Gets the type of interactions being conferenced.
            </summary>
            <value>The type of the conference.</value>
            <remarks>
            This is the same as the <see cref="P:ININ.IceLib.Interactions.Interaction.InteractionType"/> property.
            </remarks>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionDirection">
            <summary>
            Specifies constants indicating the direction of an Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionDirection.None">
            <summary>The Interaction has an indeterminate direction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionDirection.Incoming">
            <summary>The Interaction is incoming.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionDirection.Outgoing">
            <summary>The Interaction is outgoing.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionEventArgs">
            <summary>
            Provides data for events involving a single <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionEventArgs.#ctor(ININ.IceLib.Interactions.Interaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionId">
            <summary>
            Identifies an Interaction within the Interaction Center system.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> class with the specified values.
            </summary>
            <param name="id">The ID.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id"/> was invalid, it must be in the range of
            0 and <see cref="F:System.UInt32.MaxValue"/> inclusive.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> class with the specified values.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> class with the specified values.
            </summary>
            <param name="wireId">The wire ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.Equals(System.Object)">
            <overloads>
            Determines whether two InteractionId instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.Equals(ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Determines whether the specified InteractionId is equal to the current InteractionId.
            </summary>
            <param name="other">The InteractionId to compare with the current InteractionId.</param>
            <returns><see langword="true"/> if the specified InteractionId is equal to the current InteractionId; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.op_Equality(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Determines whether two instances of <see cref="T:ININ.IceLib.Interactions.InteractionId"/> are equal.
            </summary>
            <param name="a">The first <see cref="T:ININ.IceLib.Interactions.InteractionId"/> to compare.</param>
            <param name="b">The second <see cref="T:ININ.IceLib.Interactions.InteractionId"/> to compare.</param>
            <returns><see langword="true"/> if the instances are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.op_Inequality(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Determines whether two instances of <see cref="T:ININ.IceLib.Interactions.InteractionId"/> are not equal.
            </summary>
            <param name="a">The first <see cref="T:ININ.IceLib.Interactions.InteractionId"/> to compare.</param>
            <param name="b">The second <see cref="T:ININ.IceLib.Interactions.InteractionId"/> to compare.</param>
            <returns><see langword="true"/> if the instances are not equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.CompareTo(ININ.IceLib.Interactions.InteractionId)">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionId.Id">
            <summary>
            Gets a numeric representation of the Interaction ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionId.WireId">
            <summary>
            Gets a numeric (non-CLS-compliant) representation of the Interaction ID.
            </summary>
            <value>The wire ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionId.RawId">
            <summary>
            Gets a numeric (non-CLS-compliant) representation of the Interaction ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionMonitor">
            <summary>
            Represents a monitoring on an <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <remarks>Interactions sent to an agent, station, workgroup queue, or line queue, can be monitored. 
            You must have security rights to view any queues other than your own.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionMonitor.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionMonitor.User">
            <summary>
            Gets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionMonitor.MonitorType">
            <summary>
            Gets the type of the monitor.
            </summary>
            <value>The type of the monitor.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionMonitorType">
            <summary>
            Specifies constants indicating the type of an Interaction monitor.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionMonitorType.None">
            <summary>The Interaction is not being monitored.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionMonitorType.Coach">
            <summary>The Interaction monitor is a coach. Coaching is typically performed by supervisors 
            who provide advice to an agent without the customer knowing that anyone is assisting on the 
            interaction. The agent can hear the coach, but the customer cannot.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionMonitorType.Monitor">
            <summary>The Interaction monitor is a normal monitor, meaning that the queue object is being 
            listened to or examined by someone who is not coaching or interacting with the agent.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionPartyType">
            <summary>
            Represents local party type and remote party type of an interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionPartyType.Internal">
            <summary>
            Party type is internal.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionPartyType.External">
            <summary>
            Party type is external.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionQueue">
            <summary>
            Represents a queue of Interactions within the Interaction Center system.
            </summary>
            <remarks>This class provides support for setting up watches and retrieving the contents of an 
            interaction queue.
            <para>To start a watch on an interaction queue, call <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> and provide and array of attributes. When the asynchronous
            start watch operation completes, it invokes the <c>completedCallback</c> delegate.</para>
            <para>To stop a watch on an interaction queue, call <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StopWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous
            stop watch operation completes, it invokes the <c>completedCallback</c> delegate.</para>
            <para>To change the attributes watched, call <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the
            asynchronous change watch operation completes, it invokes the <c>completedCallback</c> delegate.</para>
            <para>To retrieve the contents of an interaction queue, call <see cref="M:ININ.IceLib.Interactions.InteractionQueue.GetContents"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.GetContentsAsync(System.EventHandler{ININ.IceLib.Interactions.GetContentsCompletedEventArgs},System.Object)"/>. When the asynchronous
            get contents operation completes, it invokes the <c>completedCallback</c> delegate and returns the <see cref="T:ININ.IceLib.Interactions.InteractionCompletedEventArgs"/> object
            containing the contents of the interaction queue. The queue contents is represented by a collection of <see cref="T:ININ.IceLib.Interactions.Interaction"/> objects.</para>
            <para>Calling <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is in place or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StopWatching"/>, <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/>, or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in place raises an <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous version of the above methods is preferred since these operations can be lengthy.</note>
            <ininGettingStartedInteractions/>
            </remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.QueueId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="queueId">The queue ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>
            	<see langword="true"/> if a watch is active and the specified value is being watched; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])">
            <summary>
            Starts watching the specified <paramref name="attributeNames"/> for this <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <remarks>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <note>Strings for <paramref name="attributeNames"/> are defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
            <param name="attributeNames">The attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the specified <paramref name="attributeNames"/> for this <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <note>Strings for <paramref name="attributeNames"/> are defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes what attributes of the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> are being watched. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <see langword="null"/>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <see langword="null"/>.)</param>
            <param name="replaceExisting">if set to <see langword="true"/>, replace the existing list.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <ConnectionExceptions/>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            <note>Strings for <paramref name="attributeNamesToAdd"/> and <paramref name="attributeNamesToRemove"/> are 
            defined in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes what attributes of the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> are being watched. (See <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/>.)
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <see langword="null"/>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <see langword="null"/>.)</param>
            <param name="replaceExisting">if set to <see langword="true"/>, replace the existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            <note>Strings for <paramref name="attributeNamesToAdd"/> and <paramref name="attributeNamesToRemove"/> are defined
            in <see cref="T:ININ.IceLib.Interactions.InteractionAttributeName"/> however custom strings may also be used for custom handlers.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.StopWatching">
            <summary>
            Stops watching the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.GetContents">
            <summary>
            Gets the contents.
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of <see cref="T:ININ.IceLib.Interactions.Interaction"/> objects.</returns>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.GetContentsAsync(System.EventHandler{ININ.IceLib.Interactions.GetContentsCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously gets the contents.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks><ininAsyncMethodNote /></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.GetConferenceContents">
            <summary>
            Gets the conference members of all the conferences currently in cache.
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of <see cref="T:ININ.IceLib.Interactions.ConferenceItemData"/> objects.</returns>
            <icversion>4.0 SU 4</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.GetConferenceContents(ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Gets the conference members of specified conference currently in cache.
            </summary>
            <param name="conferenceId">The conference ID.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of <see cref="T:ININ.IceLib.Interactions.ConferenceItemData"/> objects.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="conferenceId"/> is <see langword="null"/>.</exception>
            <icversion>4.0 SU 4</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionQueue.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Queue is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionQueue.QueueId">
            <summary>
            Gets the ID of the Queue.
            </summary>
            <value>The queue ID.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.NotificationsSuspendedChanged">
            <summary>
            Occurs when notifications on this <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> have been temporarily suspended by the Interaction Center Server.
            </summary>
            <remarks>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> is being
            watched. To start watching the queue call either the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <para>
            If the <see cref="P:ININ.IceLib.Interactions.NotificationsSuspendedEventArgs.IsSuspended"/> property is set to <see langword="true"/>, then all notifications
            will be suspended for this <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> (with exception to additional <see cref="E:ININ.IceLib.Interactions.InteractionQueue.NotificationsSuspendedChanged"/> 
            notifications).  A <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> notification, or the appropriate <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/> notifications 
            will also be fired to notify of the removal of the current interactions.  It is not necessary to stop the watch on the queue at this time.
            </para>
            <para>
            If the <see cref="P:ININ.IceLib.Interactions.NotificationsSuspendedEventArgs.IsSuspended"/> property is set to <see langword="false"/>, then all notifications 
            will be resumed for this <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.  A <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> notification, or the appropriate 
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/> notifications will also be fired to notify of the current contents of the queue.
            </para>
            <ininHowWatchesWork/>
            </remarks>
            <icversion>4.0 SU 4</icversion>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged">
            <summary>
            Occurs when an Interaction or Conference Interaction is added, updated, or removed.
            </summary>
            <remarks>
            <note>
            If an event handler is added for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> event,
            then the following events will not be raised, even if they have an event handler:
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/>,
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved"/>.
            </note>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> is being
            watched. To start watching the queue call either the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged"/>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded"/>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved"/>
            <icversion>4.0</icversion>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded">
            <summary>
            Occurs when an Interaction is added to the Queue.
            </summary>
            <remarks>
            <note>
            If an event handler is added for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> event,
            then the following events will not be raised, even if they have an event handler:
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/>,
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved"/>.
            </note>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> is being
            watched. To start watching the queue call either the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged">
            <summary>
            Occurs when an Interaction on the Queue changes.
            </summary>
            <remarks>
            <note>
            If an event handler is added for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> event,
            then the following events will not be raised, even if they have an event handler:
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/>,
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved"/>.
            </note>
            This event will only occur when attributes being watched have changed. To start
            watching for attributes call either the <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or
            the <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method. To modify which attributes are
            being watched once the watch has been started, use the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved">
            <summary>
            Occurs when an Interaction is removed from the Queue.
            </summary>
            <remarks>
            <note>
            If an event handler is added for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> event,
            then the following events will not be raised, even if they have an event handler:
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/>,
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved"/>.
            </note>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> is being
            watched. To start watching the queue call either the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded">
            <summary>
            Occurs when a conference Interaction is added to the Queue.
            </summary>
            <remarks>
            <note>
            If an event handler is added for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> event,
            then the following events will not be raised, even if they have an event handler:
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/>,
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved"/>.
            </note>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> is being
            watched. To start watching the queue call either the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged">
            <summary>
            Occurs when a conference Interaction on the Queue changes.
            </summary>
            <remarks>
            <note>
            If an event handler is added for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> event,
            then the following events will not be raised, even if they have an event handler:
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/>,
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved"/>.
            </note>
            This event will only occur when attributes being watched have changed. To start
            watching for attributes call either the <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or
            the <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method. To modify which attributes are
            being watched once the watch has been started, use the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved">
            <summary>
            Occurs when a conference Interaction is removed from the Queue.
            </summary>
            <remarks>
            <note>
            If an event handler is added for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> event,
            then the following events will not be raised, even if they have an event handler:
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved"/>,
            <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/>, <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved"/>.
            </note>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> is being
            watched. To start watching the queue call either the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.LostRights">
            <summary>
            Occurs when the User loses rights for the Queue.
            </summary>
            <remarks>
            This event will only occur if the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> is being
            watched. To start watching the queue call either the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> method or the 
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueueCache.GetConferenceContents(ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Gets the conference contents.
            </summary>
            <remarks>
            If the <see cref="P:ININ.IceLib.Interactions.ConferenceId.Id"/> property of the <paramref name="conferenceId"/> parameter is zero,
            then all conferences will be returned.
            </remarks>
            <param name="conferenceId">The conference ID.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:ININ.IceLib.Interactions.ConferenceItemData"/> objects.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueueCache.HandleQueueContentsChanged(ININ.IceLib.Interactions.Internal.Messages.QueueContentsChangedEvent,System.Boolean)">
            <summary>
            Handles the queue contents changed.
            </summary>
            <param name="message">The message.</param>
            <param name="updateChangedCache">
            Determines if the interaction cache should be updated.
            Set this to true, unless you need the cache to not be updated.
            EffectiveCapabilitiesChanged event specifically uses this with a false value
            so that the Capabilities attribute is not updated incorrectly.
            </param>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionQueueCache.QueueId">
            <summary>
            Gets the queue ID.
            </summary>
            <value>The queue ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionRecord">
            <summary>
            Represents a recording of an <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <remarks>Objects of this class are used in a list of recorders for a given interaction.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionRecord.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionRecord.User">
            <summary>
            Gets the user.
            </summary>
            <value>The user name.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionRecord.Paused">
            <summary>
            Gets a value indicating whether this <see cref="T:ININ.IceLib.Interactions.InteractionRecord"/> is paused.
            </summary>
            <value>The property is <see langword="true"/> if the <see cref="T:ININ.IceLib.Interactions.InteractionRecord"/> is paused; otherwise, it is <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionRecord.Intercom">
            <summary>
            Gets a value indicating whether this <see cref="T:ININ.IceLib.Interactions.InteractionRecord"/> is an Intercom record.
            </summary>
            <value>The property is <see langword="true"/> if the <see cref="T:ININ.IceLib.Interactions.InteractionRecord"/> is an Intercom record; otherwise, it is <see langword="false"/>.</value>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionSecurityLevel">
            <summary>
            Specifies constants indicating the security level of an Interaction.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionSecurityLevel.None">
            <summary>Used to indicate an insecure level of security.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionSecurityLevel.Trusted">
            <summary>Used to indicate a trusted level of security.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionSecurityLevel.Encrypted">
            <summary>Used to indicate an encrypted level of security.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionsHistory">
            <summary>
            Provides access to interaction history information for a user.
            </summary>
            <remarks>The <see cref="T:ININ.IceLib.Interactions.InteractionsHistory"/> class provides access to historical
            information about the user's interactions, such as the begin time and remote number.  
            See <see cref="T:ININ.IceLib.Interactions.HistoryItem"/> for a complete explanation of the data provided.
            <para>
            <note>
            Currently only call-specific interaction history is supported.
            </note>
            When the interactions history is being watched, the class will notify the client application
            of any changes to the history records via registered event handlers.  The data is also accessible
            through the <see cref="P:ININ.IceLib.Interactions.InteractionsHistory.HistoryDataCollection"/> property.
            </para></remarks>
            <seealso cref="T:ININ.IceLib.Interactions.HistoryItem"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsHistory.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionsHistory"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <seealso cref="T:ININ.IceLib.Interactions.InteractionsManager"/>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsHistory.#ctor(ININ.IceLib.Interactions.InteractionsManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionsHistory"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="applyClockSkewAndAdditionalUtcOffset">if set to <see langword="true"/> then the <see cref="P:ININ.IceLib.Connection.Session.ClockSkew"/> 
            and <see cref="P:ININ.IceLib.Connection.Session.AdditionalUtcOffset"/> values will be applied to <see cref="T:ININ.IceLib.Interactions.HistoryItem"/>s.</param>
            <seealso cref="T:ININ.IceLib.Interactions.InteractionsManager"/>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsHistory.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatching">
            <summary>
            Starts watching for changes to the user's interaction history.
            </summary>
            <remarks>
            <note>All event handlers should be added before calling.
            <see cref="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <note>
            Currently only call-specific interaction history is supported.
            </note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching for changes to the user's interaction history.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <note>
            Currently only call-specific interaction history is supported.
            </note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsHistory.StopWatching">
            <summary>
            Stop watching for changes to the user's interaction history.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsHistory.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops the watch for changes to the user's interaction history.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <ininAsyncMethodNote />
            <ininHowWatchesWork />
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionsHistory.HistoryDataCollection">
            <summary>
            Gets a collection of <see cref="T:ININ.IceLib.Interactions.HistoryItem"/> objects for this user's past interactions.
            </summary>
            <value>The history data collection.</value>
            <remarks>This property provides read-only access to the collection of <see cref="T:ININ.IceLib.Interactions.HistoryItem"/>
            objects that make up the interaction history for the user.
            <ininWatchRequired/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This object is not watching the interaction history.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The requested object or attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionsHistory.Item(ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Gets the <see cref="T:ININ.IceLib.Interactions.HistoryItem"/> with the specified ID.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <param name="id">The <see cref="T:ININ.IceLib.Interactions.InteractionId"/> that indicates the interaction to retrieve
            the history for.</param>
            <value>The history data object for the specified interaction ID.</value>
            <exception cref="T:System.ArgumentNullException">The <c>id</c> was <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">There is no history data for the given <see cref="T:ININ.IceLib.Interactions.InteractionId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The interactions history is not being watched by this object.</exception>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionsHistory.InteractionHistoryDataChanged">
            <summary>
            Occurs when the user's interaction history information has changed.
            </summary>
            <remarks>
            This event will only occur if the interaction history is being watched. To start
            watching the interaction history call either the <see cref="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatching"/> method
            or the <see cref="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionsHistory.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionsHistoryCache">
            <summary>
            Caches history items for interactions, processeses messages from SM, and notifies watchers.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionsManager">
             <summary>
             Provides access to Interactions and InteractionQueues.
             </summary>
             <remarks>
             Use the <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/> class to access the functionality
             found in the <see cref="N:ININ.IceLib.Interactions"/> namespace.
             <para>
             The <see cref="N:ININ.IceLib.Interactions"/> namespace includes all functionality for manipulating
             interactions and interaction queues managed by an IC server.  Most features provided in
             the <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/> are available in synchronous and
             asynchronous versions allowing you to choose the model that best suits your
             needs. The asynchronous versions are preferred since these operations can be lengthy and block the calling thread.
             </para>
             <br/>
             <example>
             All "manager" classes found in the IceLib library are designed as
             singletons.  To begin working with any of the functionality provided in
             the <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/> you must obtain the instance
             through a call to <see cref="M:ININ.IceLib.Interactions.InteractionsManager.GetInstance(ININ.IceLib.Connection.Session)"/>.
             <code lang="C#">
             Session session = new Session();
             session.Connect(...);
             InteractionsManager interactionsManager = InteractionsManager.GetInstance(session);
             </code>
             </example>
             <example>The following example illustrates using this class to make a call.
             <code lang="C#" escaped="false">
             ...
             
             string _PhoneNumber = "555-1212";
             
             private void btMakeCall_Click(object sender, System.EventArgs e)
             {
                 if (_Session.ConnectionState != ConnectionState.Up)
                 {
                     MessageBox.Show("Connection is down");
                     return;
                 }		
                 _InteractionsManager.MakeCallAsync(
                     new CallInteractionParameters(_PhoneNumber),
                     new EventHandler&lt;InteractionCompletedArgs&gt;(InteractionsManager_MakeCallCompleted),
                     null);
             }
            
             private void InteractionsManager_MakeCallCompleted(object sender, InteractionCompletedEventArgs e)
             {
                 if (e.Error != null)
                 {
                     MessageBox.Show(e.Error.StackTrace, e.Error.Message);
                     return;
                 }
            
                 Interaction interaction = e.Interaction;
            
                 _LastInteraction = interaction;
            
                 if (interaction != null)
                 {
                     MessageBox.Show(String.Format("Call Made. InteractionId={0}", interaction.InteractionId);
                 }
                 else
                 {
                     MessageBox.Show("MakeCall Failed.");
                 }
              }
            
             </code>
             </example>
             </remarks>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.GetInstance(ININ.IceLib.Connection.Session)">
            <summary>
            Gets an InteractionsManager.
            </summary>
            <param name="session">The Session with which it is associated.</param>
            <returns>The InteractionsManager.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.CreateInteraction(ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Creates an Interaction instance for a given ID.
            </summary>
            <param name="interactionId">The interaction ID.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.CreateInteractionAsync(ININ.IceLib.Interactions.InteractionId,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously creates an Interaction instance for a given ID.
            </summary>
            <param name="interactionId">The interaction ID.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.CreateSharedAttributeMonitorInteraction(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InteractionType,ININ.IceLib.Interactions.InteractionCache)">
            <summary>
            provides a way to create interaction object with an alternate cache object that derives from <see cref="T:ININ.IceLib.Interactions.InteractionCache"/>.
            </summary>
            <param name="interactionId">The Interaction ID.</param>
            <param name="interactionType">Type of interaction.</param>
            <param name="cache">Underlying cache object.</param>
            <returns>Interaction object.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.InviteParty(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InvitePartyParameters)">
            <summary>
            Invites a party to a conference.
            </summary>
            <param name="inviteTo">The interaction ID to invite to.</param>
            <param name="inviteParameters">The invite parameters.</param>
            <returns>The Interaction.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.NotSupportedException">inviteParameters is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.Started"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionConference.InvitePartyAsync(ININ.IceLib.Interactions.InvitePartyParameters,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.InvitePartyAsync(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InvitePartyParameters,System.EventHandler{ININ.IceLib.Interactions.InvitePartyCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously invites a party to a conference.
            </summary>
            <param name="inviteTo">The interaction ID to invite to.</param>
            <param name="inviteParameters">The invite parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.NotSupportedException">inviteParameters is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.Started"/>.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionConference.InvitePartyAsync(ININ.IceLib.Interactions.InvitePartyParameters,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeCall(ININ.IceLib.Interactions.CallInteractionParameters)">
            <summary>
            Makes the call.
            </summary>
            <param name="callParameters">The call parameters.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <remarks>If the <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> of the <paramref name="callParameters"/> is 
            <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event will be raised when the call is allocated.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:ININ.IceLib.Interactions.MakeCallException">Call could not be made because of a server side error.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeCallAsync(ININ.IceLib.Interactions.CallInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a call.
            </summary>
            <param name="callParameters">The call parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/>
            <para>If the <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> of <paramref name="callParameters"/> is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> 
            the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event will be raised when the call is allocated.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(System.String,ININ.IceLib.Interactions.CallMadeStage)">
            <overloads>Makes a consult call.</overloads>
            <summary>
            Makes a consult call given a <c>string</c> specifying the target and a <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> value.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <returns>The consult Interaction.</returns>
            <remarks>If the <paramref name="callMadeStage"/> is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> 
            event will be raised when the call is allocated.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Makes a consult call given a <see cref="T:ININ.IceLib.Interactions.QueueId"/> for the target and a <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> value.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <returns>The consult Interaction.</returns>
            <remarks>If the <paramref name="callMadeStage"/> is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> 
            event will be raised when the call is allocated.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(ININ.IceLib.Interactions.CallInteractionParameters)">
            <summary>
            Makes a consult call using the values specified in the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> parameter.
            </summary>
            <param name="callParameters">The call parameters.</param>
            <returns>The consult Interaction.</returns>
            <remarks>If the <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> of the <paramref name="callParameters"/> is 
            <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event will be raised when the call is allocated.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(System.String,ININ.IceLib.Interactions.CallMadeStage,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <overloads>Asynchronously makes a consult call.</overloads>
            <summary>
            Asynchronously makes a consult call given a <c>string</c> specifying the target and a <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> value.
            The handler specified by <c>completedCallback</c> is invoked when the operation is completed.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks><ininAsyncMethodNote/>
            <para>If the <paramref name="callMadeStage"/> is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> 
            event will be raised when the call is allocated.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.CallMadeStage,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a consult call given a <see cref="T:ININ.IceLib.Interactions.QueueId"/> specifying the target and a <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> value.
            The handler specified by <c>completedCallback</c> is invoked when the operation is completed.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/>
            <para>If the <paramref name="callMadeStage"/> is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> 
            event will be raised when the call is allocated.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(ININ.IceLib.Interactions.CallInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a consult call using the values specified in the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> parameter.
            The handler specified by <c>completedCallback</c> is invoked when the operation is completed.
            </summary>
            <param name="callParameters">The call parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/>
            <para>If the <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> of <paramref name="callParameters"/> is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> 
            the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event will be raised when the call is allocated.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeConsultTransfer(ININ.IceLib.Interactions.ConsultTransferParameters)">
            <summary>
            Makes a consult transfer using the values specified in the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParameters"/> parameter.
            </summary>
            <param name="consultTransferParams">The transfer parameters.</param>
            <returns>The consult transfer.</returns>
            <remarks>If the <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> of the <paramref name="consultTransferParams"/> is 
            <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event will be raised when the call is allocated.
            <para>
            This method is intended to be used to start a new Consult Transfer.  
            If you need to recover an existing Consult Transfer, due to a client crash, 
            use the <see cref="M:ININ.IceLib.Interactions.ConsultTransfer.GetConsultTransferFromInteraction(ININ.IceLib.Interactions.Interaction)"/> method instead.
            </para>
            <note>
            A consult transfer tracks and responds to Morph events.  <see cref="M:ININ.IceLib.Interactions.ConsultTransfer.Cancel"/> or
            <see cref="M:ININ.IceLib.Interactions.ConsultTransfer.Conclude"/> must be called at the conclusion of a consult transfer
            for proper clean up to occur.
            </note>
            <seealso cref="M:ININ.IceLib.Interactions.ConsultTransfer.GetConsultTransferFromInteraction(ININ.IceLib.Interactions.Interaction)"/>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeConsultTransferAsync(ININ.IceLib.Interactions.ConsultTransferParameters,System.EventHandler{ININ.IceLib.Interactions.MakeConsultTransferCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a consult transfer call using the values specified in the <see cref="T:ININ.IceLib.Interactions.ConsultTransferParameters"/> parameter.
            The handler specified by <c>completedCallback</c> is invoked when the operation is completed.
            </summary>
            <param name="consultTransferParameters">The transfer parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread 
            appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> 
            property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived 
            object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  
            See the synchronous version of this method for more detailed error information.
            <para>If the <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/> of <paramref name="consultTransferParameters"/> is <see cref="F:ININ.IceLib.Interactions.CallMadeStage.None"/> 
            the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event will be raised when the call is allocated.</para>
            <note>
            A consult transfer tracks and responds to Morph events.  <see cref="M:ININ.IceLib.Interactions.ConsultTransfer.Cancel"/> or
            <see cref="M:ININ.IceLib.Interactions.ConsultTransfer.Conclude"/> must be called at the conclusion of a consult transfer
            for proper clean up to occur.
            </note>
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeNewConference(ININ.IceLib.Interactions.Interaction[])">
            <summary>
            Makes the new conference.
            </summary>
            <param name="interactions">The interactions.</param>
            <returns>The Conference.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeNewConferenceAsync(ININ.IceLib.Interactions.Interaction[],System.EventHandler{ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes the new conference.
            </summary>
            <param name="interactions">The interactions.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeStationConnection(System.String)">
            <summary>
            Makes a connection to a station.
            </summary>
            <param name="station">The station identifier.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeStationConnectionAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a connection to a station.
            </summary>
            <param name="station">The station identifier.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeRemoteNumberConnection(System.String)">
            <summary>
            Makes a connection to a Remote Number.
            </summary>
            <param name="remoteNumber">The remote number.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeRemoteNumberConnectionAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a connection to a Remote Number.
            </summary>
            <param name="remoteNumber">The remote number.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeChat(System.String)">
            <summary>
            Makes a chat.
            </summary>
            <param name="targetUser">The target user to chat with.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeChatAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.MakeChatCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a chat.
            </summary>
            <param name="targetUser">The target user to chat with.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeEmail(ININ.IceLib.Interactions.EmailInteractionParameters)">
            <summary>
            Makes the email.
            </summary>
            <param name="emailParameters">The email parameters.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <remarks>
            <note>
            MakeEmail requires that the provided work group has its routing configured to handle email.
            If the created email interaction is to be handled by the .NET Client, the default email body 
            content type is text/html.  If the desired content type is text/plain, then do not add
            the <see cref="T:ININ.IceLib.Interactions.EmailBody"/>to the <see cref="P:ININ.IceLib.Interactions.EmailContent.Bodies"/> collection, but only assign
            the string to the <see cref="P:ININ.IceLib.Interactions.EmailContent.Body"/> property.
            </note>
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeEmailAsync(ININ.IceLib.Interactions.EmailInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.MakeEmailCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes an email.
            </summary>
            <param name="emailParameters">The email parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <note>
            MakeEmail requires that the provided work group has its routing configured to handle email.
            If the created email interaction is to be handled by the .NET Client, the default email body 
            content type is text/html.  If the desired content type is text/plain, then do not add
            the <see cref="T:ININ.IceLib.Interactions.EmailBody"/>to the <see cref="P:ININ.IceLib.Interactions.EmailContent.Bodies"/> collection, but only assign
            the string to the <see cref="P:ININ.IceLib.Interactions.EmailContent.Body"/> property.
            </note>
            </remarks>
            <icversion>3.0 SU 11</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeGenericInteraction(ININ.IceLib.Interactions.GenericInteractionParameters)">
            <summary>
            Makes a generic interaction.
            </summary>
            <param name="genericInteractionParameters">The generic interaction parameters.</param>
            <returns>
            The <see cref="T:ININ.IceLib.Interactions.GenericInteraction"/> that was returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeGenericInteractionAsync(ININ.IceLib.Interactions.GenericInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a generic interaction.
            </summary>
            <param name="genericInteractionParameters">The generic interaction parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
            <icversion>3.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeCallbackInteractionAsync(ININ.IceLib.Interactions.CallbackInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.MakeCallbackInteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a callback interaction.
            </summary>
            <param name="callbackInteractionParameters">The callback interaction parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <icversion>3.0 SU 11</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeCallbackInteraction(ININ.IceLib.Interactions.CallbackInteractionParameters)">
            <summary>
            Makes a callback interaction.
            </summary>
            <param name="callbackInteractionParameters">The callback interaction parameters.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <icversion>3.0 SU 11</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetails(System.String[])">
            <summary>
            Queries phone number details.
            </summary>
            <param name="phoneNumbers">The phone numbers.</param>
            <returns>A <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> array.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <seealso cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            <remarks>
            <para>
            The arguments to this method can be phone numbers without any formatting, not fully specified phone numbers, etc.
            If the phone number string requires matching, pattern matching engine is invoked in an attempt to try to resolve (recognize) it.
            Part of the resolving process is to generate a new input number, which is the result of the Input Conversion mapping step. This new number will will overwrite the data member holding the original input number.
            Whether or not a match is found, the input number will be prepared by having white space and formatting characters removed and alphas mapped to digits; the exceptions to this are SIP numbers, which only have white space characters removed.
            </para>
            For more information please refer to <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetailsAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously queries phone number details.
            </summary>
            <param name="phoneNumbers">The phone numbers.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.SendAssistanceRequest(ININ.IceLib.Interactions.SendAssistanceRequestParameters)">
            <summary>
            Sends an assistance request.
            </summary>
            <param name="parameters">The parameters used to create the assistance request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.SendAssistanceRequestAsync(ININ.IceLib.Interactions.SendAssistanceRequestParameters,System.EventHandler{ININ.IceLib.Interactions.AssistanceRequestCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously sends an assistance request.
            </summary>
            <param name="parameters">The parameters used to create the assistance request.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.AddWrapUpAssignment(ININ.IceLib.Interactions.WrapUpAssignment)">
            <summary>
            Adds a <see cref="T:ININ.IceLib.Interactions.WrapUpAssignment"/> to a segment of the target interaction.
            </summary>
            <remarks>
            Each segment of an interaction may have a wrap-up code assigned.  Calling this method multiple times on the
            same segment of an interaction will replace the existing <see cref="T:ININ.IceLib.Interactions.WrapUpAssignment"/>. 
            </remarks>
            <param name="assignment">The wrap-up assignment.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.AddWrapUpAssignmentAsync(ININ.IceLib.Interactions.WrapUpAssignment,System.EventHandler,System.Object)">
            <summary>
            Asynchronously adds a <see cref="T:ININ.IceLib.Interactions.WrapUpAssignment"/> to a segment of the target interaction.
            </summary>
            <remarks>
            Each segment of an interaction may have a wrap-up code assigned.  Calling this method multiple times on the
            same segment of an interaction will replace the existing <see cref="T:ININ.IceLib.Interactions.WrapUpAssignment"/>. 
            </remarks>
            <param name="assignment">The wrap-up assignment.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionsManager.Session">
            <summary>
            Gets the Session with which this StatisticsManager is associated.
            </summary>
            <value>The session.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionsManager.CallMade">
            <summary>
            Occurs when a MakeCall type operation completes.
            </summary>
            <remarks>
            <para>The event is raised when the call completes the stage specified by the 
            <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/>.</para>
            <para>This event will only occur after a call has been made using MakeCall or
            ConsultMakeCall</para>
            <note>All event handlers should be added before calling MakeCall or
            ConsultMakeCall.</note>
            </remarks>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeCall(ININ.IceLib.Interactions.CallInteractionParameters)"/>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeCallAsync(ININ.IceLib.Interactions.CallInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)"/>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(ININ.IceLib.Interactions.CallInteractionParameters)"/>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.CallMadeStage)"/>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(System.String,ININ.IceLib.Interactions.CallMadeStage)"/>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(ININ.IceLib.Interactions.CallInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)"/>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.CallMadeStage,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)"/>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(System.String,ININ.IceLib.Interactions.CallMadeStage,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)"/>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionsManager.InteractionAutoAnswered">
            <summary>
            Occurs when an Interaction is automatically answered.
            </summary>
            <remarks>This event will only occur while the Session is connected.</remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction">
            <summary>
            Occurs when an Action is performed on any Interaction in the Session.
            </summary>
            <remarks>
            This event will only occur while the Session is connected.
            <note>
            This event is only applicable to the specific IceLib <see cref="P:ININ.IceLib.Interactions.InteractionsManager.Session"/> instance
            and will not be received for actions performed via other <see cref="P:ININ.IceLib.Interactions.InteractionsManager.Session"/> instances.
            </note>
            </remarks>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction"/>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionsManager.PerformedAction">
            <summary>
            Occurs after an Action is performed on any Interaction in the Session.
            </summary>
            <remarks>This event will only occur while the Session is connected.</remarks>
            <note>
            This event is only applicable to the specific IceLib <see cref="P:ININ.IceLib.Interactions.InteractionsManager.Session"/> instance
            and will not be received for actions performed via other <see cref="P:ININ.IceLib.Interactions.InteractionsManager.Session"/> instances.
            </note>
            <seealso cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionState">
            <summary>
            Specifies constants indicating the state of an Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.None">
            <summary>The Interaction is in an indeterminate state.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Alerting">
            <summary>A user is being notified that he or she has an incoming interaction. This state applies to inbound interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Connected">
            <summary>Both parties are connected and are able to speak with each other. This state applies to inbound and outbound interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Held">
            <summary>The interaction is on hold. This state applies to inbound and outbound interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Messaging">
            <summary>The caller is leaving a voice mail message.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Offering">
            <summary>The interaction has been placed in a queue, but the interaction is not alerting. IC is determining if the called party is available to take the interaction. This state applies to inbound interactions only.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Parked">
            <summary>The Interaction is parked, waiting for the recipient user to pick it up.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Proceeding">
            <summary>The interaction is proceeding through the outside telephone network. <c>Proceeding</c> is used if a user has enabled Call Analysis. This state applies to outbound calls only.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.System">
            <summary>The Interaction is being processed by the system.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.InternalDisconnect">
            <summary>The Interaction has been disconnected internally and is no longer active.  This state applies to inbound and outbound interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.ExternalDisconnect">
            <summary>The Interaction has been disconnected externally and is no longer active.  This state applies to inbound and outbound interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Suspended">
            <summary>The interaction is suspended. This state applies to inbound and outbound interactions.</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionType">
            <summary>
            Specifies constants indicating the type of an Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.None">
            <summary>The Interaction is of an unknown type.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Call">
            <summary>The Interaction is a Call.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Callback">
            <summary>The Interaction is a Callback.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Chat">
            <summary>The Interaction is a Chat.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Email">
            <summary>The Interaction is an Email.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Generic">
            <summary>The Interaction is a Generic object.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Monitor">
            <summary>The Interaction is a Monitor.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Recorder">
            <summary>The Interaction is a Record.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.WorkItem">
            <summary>The Interaction is a Work Item.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InvitePartyCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.InvitePartyAsync(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InvitePartyParameters,System.EventHandler{ININ.IceLib.Interactions.InvitePartyCompletedEventArgs},System.Object)"/><c>completedCallback</c> delegate of <see cref="M:ININ.IceLib.Interactions.InteractionsManager.InvitePartyAsync(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InvitePartyParameters,System.EventHandler{ININ.IceLib.Interactions.InvitePartyCompletedEventArgs},System.Object)"/>.
            </summary>
            <icversion>4.0</icversion>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InvitePartyCompletedEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InvitePartyCompletedEventArgs"/> class.
            </summary>
            <param name="interaction">The Interaction.</param>
            <param name="error">The error.</param>
            <param name="cancelled">Not currently supported.</param>
            <param name="userState">The user-supplied object to be passed to the asynchronous password policy operation.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.InvitePartyCompletedEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the event.
            </summary>
            <value>The interaction.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.InvitePartyParameters">
            <summary>
            Provides details when inviting a party via <see cref="M:ININ.IceLib.Interactions.InteractionsManager.InviteParty(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InvitePartyParameters)"/>.
            </summary>
            <doccompleted/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InvitePartyParameters.#ctor(System.String,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InvitePartyParameters"/>.
            </summary>
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InvitePartyParameters"/>.
            </overloads>
            <param name="target">The target.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InvitePartyParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InvitePartyParameters"/> using
            a <see cref="T:ININ.IceLib.Interactions.QueueId"/> to specify the target, and initializing the <see cref="P:ININ.IceLib.Interactions.InvitePartyParameters.CallMadeStage"/> to the default value.
            </summary>
            <param name="target">The target.</param>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InvitePartyParameters.ToString">
            <summary>
            Gets the string representation of InvitePartyParameters.
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InvitePartyParameters.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
            <exception cref="T:System.ArgumentNullException">The <c>target</c> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The <c>target</c> parameter was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InvitePartyParameters.CallMadeStage">
            <summary>
            Gets or sets the call made stage.
            </summary>
            <value>
            Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.
            </value>
            <remarks>
            <note><see cref="F:ININ.IceLib.Interactions.CallMadeStage.Started">CallMadeStage.Started</see> is not supported for this operation.</note>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Internal.AttributeKey.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Internal.AttributeKey.ReadAttributes(ININ.ThinBridge.NotifierReader)">
            <summary>
            Returns a dictionary of attribute key-value pairs. Duplicate keys' values are overwritten 
            with the last encountered duplicate key entry in the <paramref name="reader"/>
            </summary>
            <param name="reader"></param>
            <returns>The key-value pairs present in the <paramref name="reader"/></returns>
        </member>
        <member name="T:ININ.IceLib.Interactions.IsdnCauseCode">
            <summary>
            ISDN Cause Codes that may have been returned when placing a call.
            </summary>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeCall(ININ.IceLib.Interactions.CallInteractionParameters)"/>
            <icversion>3.0 SU-6 or 2.4 SU-35</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.None">
            <summary>
            No cause code.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.UnassignedNumber_001">
            <summary>
            Unassigned number (ISDN Cause Code 01).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.NoRouteToSpecifiedTransitNetwork_002">
            <summary>
            No route to specified transit network (ISDN Cause Code 02).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.NoRouteToDestination_003">
            <summary>
            No route to destination (ISDN Cause Code 03).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.ChannelUnacceptable_006">
            <summary>
            Channel unacceptable (ISDN Cause Code 06).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.NormalCallClearing_016">
            <summary>
            Normal call clearing (ISDN Cause Code 16).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.RemoteBusy_017">
            <summary>
            Remote busy (ISDN Cause Code 17).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.NoUserResponding_018">
            <summary>
            No user responding (ISDN Cause Code 18).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.UserAlertingNoAnswer_019">
            <summary>
            User alerting no answer (ISDN Cause Code 19).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.CallRejected_021">
            <summary>
            Call rejected (ISDN Cause Code 21).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.NumberChanged_022">
            <summary>
            Number changed (ISDN Cause Code 22).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.DestinationOutOfOrder_027">
            <summary>
            Destination out-of-order (ISDN Cause Code 27).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.InvalidNumberFormat_028">
            <summary>
            Invalid number format (ISDN Cause Code 28).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.FacilityRejected_029">
            <summary>
            Facility rejected (ISDN Cause Code 29).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.ResponseToStatusInquiry_030">
            <summary>
            Response to status inquiry (ISDN Cause Code 30).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.NormalUnspecified_031">
            <summary>
            Normal, unpecified (ISDN Cause Code 31).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.NoChannelAvailable_034">
            <summary>
            No channel available (ISDN Cause Code 34).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.NetworkOutOfOrder_038">
            <summary>
            Network out-of-order (ISDN Cause Code 38).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.TemporaryFailure_041">
            <summary>
            Temporary failure (ISDN Cause Code 41).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.SwitchingEquipmentCongestion_042">
            <summary>
            Switching equipment congestion (ISDN Cause Code 42).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.AccessInformationDiscarded_043">
            <summary>
            Access information discarded (ISDN Cause Code 43).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.RequestedChannelNotAvailable_044">
            <summary>
            Requested channel not available (ISDN Cause Code 44).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.PreEmpted_045">
            <summary>
            Pre-empted (ISDN Cause Code 45).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.RequestFacilityNotSubscribed_050">
            <summary>
            Request facility not subscribed (ISDN Cause Code 50).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.OutgoingCallsBarred_052">
            <summary>
            Outgoing calls barred (ISDN Cause Code 52).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.IncomingCallsBarred_054">
            <summary>
            Incoming calls barred (ISDN Cause Code 54).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.BearerCapabilityNotAuthorized_057">
            <summary>
            Bearer capability not presently authorized (ISDN Cause Code 57).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.BearerCapabilityNotAvailable_058">
            <summary>
            Bearer capability not presently available (ISDN Cause Code 58).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.ServiceNotAvailableUnspecified_063">
            <summary>
            Service or option not available, unspecified (ISDN Cause Code 63).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.CapabilityNotImplemented_065">
            <summary>
            Bearer capability not implemented (ISDN Cause Code 65).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.ChannelTypeNotImplemented_066">
            <summary>
            Channel type not implemented (ISDN Cause Code 66).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.RequestFacilityNotImplemented_069">
            <summary>
            Request facility not implemented (ISDN Cause Code 69).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.InvalidCallReferenceValue_081">
            <summary>
            Invalid call reference value (ISDN Cause Code 81).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.IdentifiedChannelDoesNotExist_082">
            <summary>
            Identified channel does not exist (ISDN Cause Code 82).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.IncompatibleDestination_088">
            <summary>
            Incompatible destination (ISDN Cause Code 88).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.InvalidMessageUnspecified_095">
            <summary>
            Invalid message, unspecified (ISDN Cause Code 95).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.MandatoryInformationElementMissing_096">
            <summary>
            Mandatory information element missing (ISDN Cause Code 96).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.MessageTypeNonexistent_097">
            <summary>
            Message type nonexistent or not implemented (ISDN Cause Code 97).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.MessageNotCompatibleWithCallState_098">
            <summary>
            Message not compatible with call state, or message type is nonexistent (ISDN Cause Code 98).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.InformationElementNonexistent_099">
            <summary>
            Information element nonexistent or not implemented (ISDN Cause Code 99).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.InvalidInformationElementContents_100">
            <summary>
            Invalid information element contents (ISDN Cause Code 100).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.MessageNotCompatibleWithCallState_101">
            <summary>
            Message not compatible with call state (ISDN Cause Code 101).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.RecoveryOnTimerExpiry_102">
            <summary>
            Recovery on timer expiry (ISDN Cause Code 102).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.MandatoryInformationElementLengthError_103">
            <summary>
            Mandatory information element length error (ISDN Cause Code 103).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.ProtocolErrorUnspecified_111">
            <summary>
            Protocol error, unspecified (ISDN Cause Code 111).
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.IsdnCauseCode.InterworkingUnspecified_127">
            <summary>
            Interworking, unspecified (ISDN Cause Code 127).
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Localization">
            <summary>
            Helper class for accessing string from resource files.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.Localization.LoadString(ININ.IceLib.Connection.Session,System.String)">
            <summary>
            Loads a string resource, localized according to the cultureInfo associated with <paramref name="session"/>.
            </summary>
            <param name="session">The session for which to load the resource.</param>
            <param name="resourceId">The resource ID.</param>
            <returns>The localized string resource.</returns>
            <seealso cref="T:ININ.IceLib.Connection.Session"/>
            <seealso cref="P:ININ.IceLib.Connection.SessionSettings.IsoLanguage"/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Localization.LoadString(System.Globalization.CultureInfo,System.String)">
            <summary>
            Loads a string resource, localized according to <paramref name="cultureInfo"/>.
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <param name="resourceId">The resource ID.</param>
            <returns>The localized string resource.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.Localization.LoadStringWithThreadCulture(System.String)">
            <summary>
            Don't use this if <see cref="M:ININ.IceLib.Interactions.Localization.LoadString(ININ.IceLib.Connection.Session,System.String)"/> can be used instead!
            </summary>
            <param name="resourceId">The resource ID.</param>
            <returns>The localized string resource.</returns>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeCallbackInteractionCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeCallbackInteractionAsync(ININ.IceLib.Interactions.CallbackInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.MakeCallbackInteractionCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
            <icversion>3.0 SU 11</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeCallbackInteractionCompletedEventArgs.#ctor(ININ.IceLib.Interactions.CallbackInteraction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeCallbackInteractionCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="callbackInteraction">The CallbackInteraction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeCallbackInteractionCompletedEventArgs.CallbackInteraction">
            <summary>
            Gets the GenericInteraction associated with the event.
            </summary>
            <value>The generic interaction.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeCallException">
            <summary>
            This exception is thrown by various MakeCall methods of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/> when the server is unable to make a call.
            </summary>
            <remarks>
            <para>
            </para>
            <para>Like all IceLib-specific exceptions, this object derives from <see cref="T:ININ.IceLib.IceLibException"/>,
            allowing consistent exception handling for all such exceptions.
            </para>
            <para>
            This exception that is thrown for IceLib when one of the following methods fail.
            <list type="bullet">
            	<item><see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeCallAsync(ININ.IceLib.Interactions.CallInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)"/></item>
            	<item><see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeCall(ININ.IceLib.Interactions.CallInteractionParameters)"/></item>
            	<item><see cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(System.String,ININ.IceLib.Interactions.CallMadeStage)"/></item>
            	<item><see cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.CallMadeStage)"/></item>
            	<item><see cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(ININ.IceLib.Interactions.CallInteractionParameters)"/></item>
            	<item><see cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(System.String,ININ.IceLib.Interactions.CallMadeStage,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)"/></item>
            	<item><see cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.CallMadeStage,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)"/></item>
            	<item><see cref="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(ININ.IceLib.Interactions.CallInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)"/></item>
            </list>
            </para>
            </remarks>
            <doccompleted/>
            <icversion>3.0 SU-6 or 2.4 SU-35</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeCallException.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeCallException.IsdnCauseCode">
            <summary>
            Gets the ISDN cause code that may have been returned by the equipment when making the call.
            </summary>
            <value>The ISDN cause code.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeCallException.MakeCallFailureCode">
            <summary>
            Gets the call failure code returned by the server when attempting to make the call.
            </summary>
            <value>The failure code.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeCallFailureCode">
            <summary>
            Call failure codes describing the results of an attempt to place a call.
            </summary>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeCall(ININ.IceLib.Interactions.CallInteractionParameters)"/>
            <icversion>3.0 SU-6 or 2.4 SU-35</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.None">
            <summary>
            There was no failure code.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.UnexpectedMessageFormat">
            <summary>
            The response to the make call request used an unexpected message format.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.Authentication">
            <summary>
            Failed to authenticate the request to make call.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.Cancelled">
            <summary>
            The command was cancelled.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.Timeout">
            <summary>
            The command timeout period elapsed.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidVersion">
            <summary>
            The version of the message protocol used in the response was invalid.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidApiVersion">
            <summary>
            Command attempted to use an invalid Telephony Service API Version.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoneRunningAsync">
            <summary>
            No error occurred, the comamnd is running asynchronously.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.CallDoesNotExist">
            <summary>
            The call no longer exists.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.QueueNotFound">
            <summary>
            The requested queue was not found.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidQueue">
            <summary>
            The requested queue is invalid.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidStation">
            <summary>
            The requested station is invalid.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotActive">
            <summary>
            The requested station is not active.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.ConferenceDoesNotExist">
            <summary>
            The requested conference no longer exists.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.ConferenceNotEmpty">
            <summary>
            The requested conference is not empty.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.ActiveNotInterrupted">
            <summary>
            The active call was not interrupted.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidLine">
            <summary>
            The requested line was invalid.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.LineNotActive">
            <summary>
            The requested line was not active.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.LineAlreadyUsedByStation">
            <summary>
            The line is already in use by station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoStationVolume">
            <summary>
            The requested station does not support volume control.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.MaximumNumberOfCallAppearancesReached">
            <summary>
            The maximum number of call appearances has been reached.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoVoiceResource">
            <summary>
            No voice resources were available.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoConferenceResource">
            <summary>
            No conference resources were available.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoIpResource">
            <summary>
            No IP resources were available.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidCallState">
            <summary>
            The call is in an invalid state.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidLineState">
            <summary>
            The line is in an invalid state.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidCallType">
            <summary>
            The call type is not valid.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.TargetSelf">
            <summary>
            Call targeted self.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidStationState">
            <summary>
            The station is in an invalid state.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InvalidNumber">
            <summary>
            The requested number is invalid.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.OutboundCallLimitExceeded">
            <summary>
            The outbound call limit has been exceeded.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoAnswer">
            <summary>
            The call was not answered.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoRingback">
            <summary>
            No ringback was received on the call.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoDialTone">
            <summary>
            No tone was present on the call.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NormalBusy">
            <summary>
            The call received a normal busy signal.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoCircuitAvailable">
            <summary>
            No circuits were available to complete the call.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.OperatorIntercept">
            <summary>
            The call was intercepted by an operator.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.AnsweringMachineConnection">
            <summary>
            The call failed due to an answering machine connection.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.DestinationNotReachedUnknown">
            <summary>
            The destination could not be reached for an unknown reason.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoRemoteFaxTone">
            <summary>
            A fax tone was not detected on the remote connection.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoAvailableVMSession">
            <summary>
            No available VM session.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoLinesAvailable">
            <summary>
            There were no lines available to make the call.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReached">
            <summary>
            The station is unreachable.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedNoAnswer">
            <summary>
            There was no answer on the line used to contact the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotAnswered">
            <exclude/>
            <summary>
            Use StationNotReachedNoAnswer instead.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedNoRingback">
            <summary>
            There was no ringback on the line used to contact the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedNoDialTone">
            <summary>
            There was no dial tone on the line used to contact the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedBusy">
            <summary>
            The station was busy.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationBusy">
            <exclude/>
            <summary>
            Use StationNotReachedBusy instead.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedSitToneDetected">
            <summary>
            A special information tone (SIT) was detected when contacting the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedNoCircuitsAvailable">
            <summary>
            There were no circuits available to contact the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedOperatorIntercept">
            <summary>
            An operator intercept occurred on the line used to contact the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedNoIpResponse">
            <summary>
            There was no IP response on the line used to contact the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NoIpResponse">
            <summary>
            Use StationNotReachedNoIpResponse instead.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.StationNotReachedNoLinesAvailable">
            <summary>
            There were no lines available to contact the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.Private">
            <summary>
            The call is private.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NotPrivate">
            <summary>
            The call is not private.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.AlreadyPrivate">
            <summary>
            The call is already private.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.NotMuted">
            <summary>
            The call is not muted.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.AlreadyMuted">
            <summary>
            The call is already muted.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.MuteIntercom">
            <summary>
            Cannot mute an intercom call.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.General">
            <summary>
            A general telephony failure.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.OrbitInUse">
            <summary>
            Park orbit already in use.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.ReOrder">
            <summary>
            A re-order (fast busy) tone was detected.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.Rfc2833Required">
            <summary>
            RFC 2833 is required.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.SitToneDetected">
            <summary>
            A Special Information Tone (SIT) was detected on the line used to contact the station.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.SubsystemFailure">
            <summary>
            There was a subsystem failure that caused the call to fail.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.RtpCodecNotSupported">
            <summary>
            The RTP Codec is not supported.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.DialplanError">
            <summary>
            The call was disconnected due to a dial plan error.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.InsufficientDialingPrivileges">
            <summary>
            The Call was disconnected due to insufficient dialing privileges.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MakeCallFailureCode.UnrecognizedError">
            <summary>
            The error code did not map to an existing MakeCallFailureCode.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeChatCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeChatAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.MakeChatCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeChatCompletedEventArgs.#ctor(ININ.IceLib.Interactions.ChatInteraction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeChatCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="chatInteraction">The ChatInteraction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeChatCompletedEventArgs.ChatInteraction">
            <summary>
            Gets the ChatInteraction associated with the event.
            </summary>
            <value>The chat interaction.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeEmailCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeEmailAsync(ININ.IceLib.Interactions.EmailInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.MakeEmailCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <icversion>3.0 SU 7</icversion>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeEmailCompletedEventArgs.#ctor(ININ.IceLib.Interactions.EmailInteraction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeEmailCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="emailInteraction">The EmailInteraction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeEmailCompletedEventArgs.EmailInteraction">
            <summary>
            Gets the EmailInteraction associated with the event.
            </summary>
            <value>The email interaction.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeGenericInteractionAsync(ININ.IceLib.Interactions.GenericInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs.#ctor(ININ.IceLib.Interactions.GenericInteraction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="genericInteraction">The GenericInteraction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs.GenericInteraction">
            <summary>
            Gets the GenericInteraction associated with the event.
            </summary>
            <value>The generic interaction.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeNewConferenceAsync(ININ.IceLib.Interactions.Interaction[],System.EventHandler{ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs.#ctor(ININ.IceLib.Interactions.InteractionConference,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="interactionConference">The interaction conference.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs.InteractionConference">
            <summary>
            Gets the InteractionConference associated with the event.
            </summary>
            <value>The interaction conference.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeConsultTransferCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeConsultTransferAsync(ININ.IceLib.Interactions.ConsultTransferParameters,System.EventHandler{ININ.IceLib.Interactions.MakeConsultTransferCompletedEventArgs},System.Object)"/><c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <icversion>4.0</icversion>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeConsultTransferCompletedEventArgs.#ctor(ININ.IceLib.Interactions.ConsultTransfer,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeConsultTransferCompletedEventArgs"/> class.
            </summary>
            <param name="consultTransfer">The ConsultTransfer.</param>
            <param name="error">The error.</param>
            <param name="cancelled">Not currently supported.</param>
            <param name="userState">The user-supplied object to be passed to the asynchronous password policy operation.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeConsultTransferCompletedEventArgs.ConsultTransfer">
            <summary>
            Gets the ConsultTransfer associated with the event.
            </summary>
            <value>The consult transfer.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.MonitoredQueueAlerting">
            <summary>
            This class provides the main interface to enable alerting on a monitored queue.
            </summary>
            <remarks>
            A monitored queue (monitored appearance) can be configured to track interactions 
            of other users.  MonitoredQueueAlerting provides an interface for enabling and 
            disabling alerting on a monitored queue.  When enabling or disabling a monitored 
            queue,  <see cref="T:ININ.IceLib.Interactions.MonitoredQueueAlertMode"/> controls if the alert should be silent
            or if the phone should ring.
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitoredQueueAlerting.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MonitoredQueueAlerting"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitoredQueueAlerting.EnableAlertingImpl(System.Collections.Generic.IEnumerable{System.String},ININ.IceLib.Interactions.MonitoredQueueAlertMode)">
            <summary>
            Implementation of EnableAlerting.
            </summary>
            <param name="scopedQueueNames">List of the scoped queue names for which alerting will be enabled.</param>
            <param name="alertMode">Alerting is silent if set to <see cref="F:ININ.IceLib.Interactions.MonitoredQueueAlertMode.AlertSilently"/>.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitoredQueueAlerting.EnableAlerting(System.Collections.Generic.IEnumerable{System.String},ININ.IceLib.Interactions.MonitoredQueueAlertMode)">
            <summary>
            Enables alerting on the given list of monitored queues.
            </summary>
            <param name="scopedQueueNames">List of the scoped queue names for which alerting will be enabled.</param>
            <param name="alertMode">Alerting is silent if set to <see cref="F:ININ.IceLib.Interactions.MonitoredQueueAlertMode.AlertSilently"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="scopedQueueNames"/> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception occurs when <paramref name="alertMode"/> is not from the 
            <see cref="T:ININ.IceLib.Interactions.MonitoredQueueAlertMode"/> enumeration.
            </exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitoredQueueAlerting.EnableAlertingAsync(System.Collections.Generic.IEnumerable{System.String},ININ.IceLib.Interactions.MonitoredQueueAlertMode,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously enables alerting on the given list of monitored queues.
            </summary>
            <param name="scopedQueueNames">List of the scoped queue names for which alerting will be enabled.</param>
            <param name="alertMode">Alerting is silent if set to <see cref="F:ININ.IceLib.Interactions.MonitoredQueueAlertMode.AlertSilently"/>.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentException"><paramref name="scopedQueueNames"/> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception occurs when <paramref name="alertMode"/> is not from the 
            <see cref="T:ININ.IceLib.Interactions.MonitoredQueueAlertMode"/> enumeration.
            </exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitoredQueueAlerting.DisableAlertingImpl(System.Collections.Generic.IEnumerable{System.String},ININ.IceLib.Interactions.MonitoredQueueAlertMode)">
            <summary>
            Implementation of DisableAlerting.
            </summary>
            <param name="scopedQueueNames">List of the scoped queue names for which alerting will be disabled.</param>
            <param name="alertMode">Alerting is silent if set to <see cref="F:ININ.IceLib.Interactions.MonitoredQueueAlertMode.AlertSilently"/>.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitoredQueueAlerting.DisableAlerting(System.Collections.Generic.IEnumerable{System.String},ININ.IceLib.Interactions.MonitoredQueueAlertMode)">
            <summary>
            Disables alerting on the given list of monitored queues.
            </summary>
            <param name="scopedQueueNames">List of the scoped queue names for which alerting will be disabled.</param>
            <param name="alertMode">Alerting is silent if set to <see cref="F:ININ.IceLib.Interactions.MonitoredQueueAlertMode.AlertSilently"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="scopedQueueNames"/> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception occurs when <paramref name="alertMode"/> is not from the 
            <see cref="T:ININ.IceLib.Interactions.MonitoredQueueAlertMode"/> enumeration.
            </exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitoredQueueAlerting.DisableAlertingAsync(System.Collections.Generic.IEnumerable{System.String},ININ.IceLib.Interactions.MonitoredQueueAlertMode,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously disables alerting on the given list of monitored queues.
            </summary>
            <param name="scopedQueueNames">List of the scoped queue names for which alerting will be disabled.</param>
            <param name="alertMode">Alerting is silent if set to <see cref="F:ININ.IceLib.Interactions.MonitoredQueueAlertMode.AlertSilently"/>.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentException"><paramref name="scopedQueueNames"/> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception occurs when <paramref name="alertMode"/> is not from the 
            <see cref="T:ININ.IceLib.Interactions.MonitoredQueueAlertMode"/> enumeration.
            </exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.MonitoredQueueAlertMode">
            <summary>
            Specifies if an alert should be a silent alert or not.
            </summary>
            <remarks>
            This enumeration is used by <see cref="T:ININ.IceLib.Interactions.MonitoredQueueAlerting"/> to
            determine if an event on a monitored queue should cause the phone to ring.
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.MonitoredQueueAlertMode.AlertSilently">
            <summary>
            The alert on the monitored queue does not cause the phone to ring.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MonitoredQueueAlertMode.RingTelephone">
            <summary>
            The alert on the monitored queue causes the phone to ring.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.MonitorInteraction">
            <summary>
            Represents a monitor interaction within the Interaction Center system.
            </summary>
            <remarks><para>Interactions in the Interaction Center system can be calls, chats, emails, 
            email, monitors, or recordings. Objects of this class represent interactions in which a user is monitoring 
            another user's interaction. These objects are part of an interaction queue watch.<br/><br/></para>
            <note>Accessing the properties of this class when an interaction watch is not in place raises a <see cref="T:ININ.IceLib.NotCachedException"/>.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitorInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MonitorInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MonitorInteraction.MonitoredInteractionId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.MonitorInteractionAttributeName.MonitoredInteractionId"/>.
            </summary>
            <value>The monitored interaction ID.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MonitorInteraction.MonitoredInteractionType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.MonitorInteractionAttributeName.MonitoredInteractionType"/>.
            </summary>
            <value>The type of monitored interaction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.MonitorInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with the MonitorInteractions class.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.MonitorInteractionAttributeName.MonitoredInteractionId">
            <summary>The monitored interaction ID.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MonitorInteractionAttributeName.MonitoredInteractionType">
            <summary>The type of monitored interaction.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.NamespaceDoc">
            <summary>
            <para>The <b>ININ.IceLib.Interactions</b> namespace contains classes for manipulating Interaction Center interaction queues.</para>
            <para>There are a number of classes within the <b>ININ.IceLib.Interactions</b> namespace that provide support to the classes mentioned in the preceding summary. Example of the supporting classes are enumerations, event argument classes, and delegates used by events within classes.</para>
            <para>
            <b>Queue Watches.</b> There are a number of object classes that are used to get specific attributes for the Interactions
            contained in a given Interaction Queue. They are watched, meaning, that any time an attribute is changed, the internal
            cache of that object is kept up to date so anytime that attribute's property is referenced
            the current value will be returned. An event notification is available when any of the attributes changes in value.<br/><br/>
            </para>
            <note>
            If the entire contents of an InteractionQueue is to be watched, Queue watches are more efficient than having individual Interaction watches
            on each Interaction in the Queue.
            </note>
            <para>
            <b>Interaction Watches.</b> There are a number of object classes that are used to get specific attributes
            for a given Interaction. They are watched, meaning, that any time an attribute is changed, the internal
            cache of that object is kept up to date so anytime that attribute's property is referenced
            the current value will be returned. An event notification is available when any of the attributes changes in value.
            All such objects inherit from <see cref="T:ININ.IceLib.Interactions.Interaction"/>. Examples of Interaction classes are:
            <see cref="T:ININ.IceLib.Interactions.CallInteraction"/>,
            <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>,
            and <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </para>
            <para>
            <b>Interaction Conferences.</b> The <see cref="T:ININ.IceLib.Interactions.InteractionConference"/> object provides
            information about a conference of interactions.  Additionally, the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>
            object provides support for watching attribute changes for Interactions within conferences contained on an interaction queue.
            </para>
            <ininGettingStartedInteractions/>
            </summary>
            <doccompleted/>
        </member>
        <member name="T:ININ.IceLib.EFaq.NamespaceDoc">
            <summary>
            <para>The <b>ININ.IceLib.EFaq</b> namespace provides classes for accessing the e-FAQ Frequently
            Asked Question database.
            </para>
            <para>To obtain a list of e-FAQ servers and their respective FAQ Topics, use the 
            <see cref="T:ININ.IceLib.EFaq.EFaqServerList"/> class. This class provides access to the 
            <see cref="T:ININ.IceLib.EFaq.EFaqServer"/> objects that correspond to the e-FAQ servers to which the user has
            been granted access persmission. Queries can then be issued to each server via the 
            <see cref="M:ININ.IceLib.EFaq.EFaqServer.Query(System.String,System.Collections.Generic.IEnumerable{ININ.IceLib.EFaq.EFaqTopic},ININ.IceLib.EFaq.EFaqQueryOptions)"/> method, or the corresponding asynchronous method,
            on the <see cref="T:ININ.IceLib.EFaq.EFaqServer"/> object.
            </para>
            </summary>
            <icversion>3.0 SU 2</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.NotificationsSuspendedEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.NotificationsSuspendedChanged"/> notification.
            </summary>
            <icversion>4.0 SU 4</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.NotificationsSuspendedEventArgs.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.NotificationsSuspendedEventArgs"/> class.
            </summary>
            <param name="isSuspended">if set to <see langword="true"/> then notifications are currently suspended.</param>
            <param name="additionalInformation">The additional information, if any (can be <see langword="null"/>).</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.NotificationsSuspendedEventArgs.IsSuspended">
            <summary>
            Gets a value indicating whether the notifications for the associated queue are suspended.
            </summary>
            <value>
            <see langword="true" /> if the notifications are suspended; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:ININ.IceLib.Interactions.NotificationsSuspendedEventArgs.AdditionalInformation">
            <summary>
            Gets the additional information.
            </summary>
            <value>
            The additional information, if any (can be <see langword="null"/>).
            </value>
        </member>
        <member name="T:ININ.IceLib.Interactions.PerformedActionEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event.
            </summary>
            <doccompleted/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.PerformedActionEventArgs.#ctor(ININ.IceLib.Interactions.InteractionCapabilities,ININ.IceLib.Interactions.Interaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.PerformedActionEventArgs"/> class with the specified values.
            </summary>
            <param name="action">The action.</param>
            <param name="interaction">The interaction.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.PerformedActionEventArgs.#ctor(ININ.IceLib.Interactions.InteractionCapabilities,ININ.IceLib.Interactions.Interaction,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.PerformedActionEventArgs"/> class with the specified values.
            </summary>
            <param name="action">The action.</param>
            <param name="interaction">The interaction.</param>
            <param name="actionParameters">A dictionary of parameters passed into the method that initiated the action.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.PerformedActionEventArgs.Action">
            <summary>
            Gets the <see cref="T:ININ.IceLib.Interactions.InteractionCapabilities"/> associated with the change.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PerformedActionEventArgs.Interaction">
            <summary>
            Gets the interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PerformedActionEventArgs.ActionParameters">
            <summary>
            Gets the parameters passed into the method that initiated the action.
            </summary>
            <value>The action parameter dictionary.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.PerformingActionEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.PerformingActionEventArgs.#ctor(ININ.IceLib.Interactions.InteractionCapabilities,ININ.IceLib.Interactions.Interaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.PerformingActionEventArgs"/> class with the specified values.
            </summary>
            <param name="action">The action.</param>
            <param name="interaction">The interaction.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.PerformingActionEventArgs.#ctor(ININ.IceLib.Interactions.InteractionCapabilities,ININ.IceLib.Interactions.Interaction,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.PerformingActionEventArgs"/> class with the specified values.
            </summary>
            <param name="action">The action.</param>
            <param name="interaction">The interaction.</param>
            <param name="actionParameters">A dictionary of parameters passed into the method that initiated the action.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.PerformingActionEventArgs.Action">
            <summary>
            Gets the <see cref="T:ININ.IceLib.Interactions.InteractionCapabilities"/> associated with the change.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PerformingActionEventArgs.Interaction">
            <summary>
            Gets the interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PerformingActionEventArgs.ActionParameters">
            <summary>
            Gets the parameters passed into the method that initiated the action.
            </summary>
            <value>The action parameter dictionary.</value>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.PhoneNumber">
            <summary>
            Detailed information about a phone number within the Interaction Center system.
            </summary>
            <remarks>
            <para>This class contains detailed information about a phone number that is retrieved by calling <see cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetails(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetailsAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs},System.Object)"/>.
            The phone number information is determined by the Interaction Center server by applying the dial plan information to a given phone number string
            to determine the normalized phone number for the Interaction Center system to make a call. Also, the IC system can determine if the phone number is local, long-distance, international, etc.
            </para>
            <para>
            Explanation of each property
            <list type="bullet">
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.RawText"/></term><description>The input text.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.NormalizedText"/></term><description>The string that will be used by Interaction Center when dialing this phone numbers.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DisplayText"/></term><description>Descriptive text set for this type of phone number.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.EditBase"/></term><description>The string that can be presented to the user for editing this phone number.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Extension"/></term><description>The string that indicates the intercom extension, if this phone number is an extension. This would be empty if the PhoneNumber.RawText is not an intercom extension.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DefaultClassification"/></term><description>The default Phone number classification for this phone number.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Classifications"/></term><description>Classifications that this phone number falls into.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Internal"/></term><description>Is this an internal number?</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.QueueType"/></term><description>If this number matches an <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>, then the type of the queue.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.QueueName"/></term><description>A valid scoped queue name if this number has a queue type.</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.VoicemailCapable"/></term><description>Can this number receive voicemails?</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DialCapable"/></term><description>Can this number be dialed?</description></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.AutoDialExtension"/></term><description>Will the Interaction Center dial extension (if exists) while dialing this number?</description></item>
            </list>
            </para>
            <para>
            When the method <see cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetails(System.String[])"/> is called with an input string '8004562354', the properties of this class may look like this:
            <list type="bullet">
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.RawText"/>: 8004562354</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.NormalizedText"/>: +18004562354</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DisplayText"/>: (Tool Free) 1 (800) 456-2354</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.EditBase"/>: 1 (800) 456-2354</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Extension"/>:</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DefaultClassification"/>: Tool Free</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Classifications"/>: Tool Free</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Internal"/>: false</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.QueueType"/>: None</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.QueueName"/>:</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.VoicemailCapable"/>: false</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DialCapable"/>: true</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.AutoDialExtension"/>: false</term></item>
            </list>
            </para>
            <para>
            When the method <see cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetails(System.String[])"/> is called with extension of a user, for ex., 6929, the properties of this class may look like this:
            <list type="bullet">
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.RawText"/>: 6929</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.NormalizedText"/>: /6929</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DisplayText"/>: 6929</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.EditBase"/>:</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Extension"/>: 6929</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DefaultClassification"/>: Intercom</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Classifications"/>: Intercom</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.Internal"/>: true</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.QueueType"/>: User</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.QueueName"/>: User Queue:&lt;userId&gt;</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.VoicemailCapable"/>: true</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.DialCapable"/>: true</term></item>
            <item><term><see cref="P:ININ.IceLib.Interactions.PhoneNumber.AutoDialExtension"/>: true</term></item>
            </list>
            </para>
            </remarks>
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetails(System.String[])"/>.
            <seealso cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetailsAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs},System.Object)"/>.
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.PhoneNumber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.PhoneNumber.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.RawText">
            <summary>
            The phone number for which this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> was created.
            </summary>
            <value>The original number.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.NormalizedText">
            <summary>
            The system normalized phone number text used for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <value>The normalized text.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.DisplayText">
            <summary>
            The text used to display this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> in a client application.
            </summary>
            <value>The display text.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.DefaultClassification">
            <summary>
            The default classification for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.  There can be multiple <see cref="P:ININ.IceLib.Interactions.PhoneNumber.Classifications"/>.
            </summary>
            <remarks>
            <para>Phone numbers that can be identified by a pattern in the numbers, or an explicit group 
            of phone numbers with a common purpose are called phone number "classifications". For example, 
            internal calls could be identified by the "Internal" classification, toll free (for example, 
            800 numbers) could be identified by the "Toll Free" classification, and calls to emergency services 
            (such as 911, fire department, police, and hospital) could be identified by the "Emergency" 
            classification.</para>
            <para>When IC users dial a phone number, IC matches the number dialed with the 
            appropriate classification pattern. It then checks the user's dialing privileges to determine if the 
            user or station is authorized to place the call. In this way, IC uses phone number classifications 
            to control individual users, workgroups, roles, and station dialing privileges.</para>
            </remarks>
            <value>The default classification.</value>
            <seealso cref="P:ININ.IceLib.Interactions.PhoneNumber.Classifications"/>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.Classifications">
            <summary>
            Gets the classifications for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <remarks>
            <para>Phone numbers that can be identified by a pattern in the numbers, or an explicit group 
            of phone numbers with a common purpose are called phone number "classifications". For example, 
            internal calls could be identified by the "Internal" classification, toll free (for example, 
            800 numbers) could be identified by the "Toll Free" classification, and calls to emergency services 
            (such as 911, fire department, police, and hospital) could be identified by the "Emergency" 
            classification.</para>
            <para>When IC users dial a phone number, IC matches the number dialed with the 
            appropriate classification pattern. It then checks the user's dialing privileges to determine if the 
            user or station is authorized to place the call. In this way, IC uses phone number classifications 
            to control individual users, workgroups, roles, and station dialing privileges.</para>
            </remarks>
            <value>The classifications.</value>
            <seealso cref="P:ININ.IceLib.Interactions.PhoneNumber.DefaultClassification"/>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.Internal">
            <summary>
            Indicates whether this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> in an internal number.
            </summary>
            <value>Returns <see langword="true"/> if this phone number is internal to IC; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.QueueType">
            <summary>
            The type of the queue for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <value>The type of the queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.QueueName">
            <summary>
            The name of the queue for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <value>The name of the queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.VoicemailCapable">
            <summary>
            Indicates whether this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> is configured to receive voice mail.
            </summary>
            <value>Returns <see langword="true"/> if the number is voice mail capable; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.DialCapable">
            <summary>
            Indicates whether this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> can be dialed.
            </summary>
            <value>Returns <see langword="true"/> if this phone number is dial-capable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.EditBase">
            <summary>
            The editable format of this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <value>The edit base.</value>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.Extension">
            <summary>
            The Extension of this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <value>The Extension.</value>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.AutoDialExtension">
            <summary>
            Indicates whether <see cref="P:ININ.IceLib.Interactions.PhoneNumber.Extension"/> (if exists) will to be included while Interaction Centers dials this number.
            </summary>
            <value>Returns <c>true</c> if <see cref="P:ININ.IceLib.Interactions.PhoneNumber.Extension"/> should be auto dialed; otherwise, <c>false</c>.</value>
            <remarks>
            <para><see cref="P:ININ.IceLib.Interactions.PhoneNumber.NormalizedText"/> will look like '+18004562354/^1234' when this property is set to true.</para>
            <para><see cref="P:ININ.IceLib.Interactions.PhoneNumber.NormalizedText"/> will look like '+18004562354^1234' when this property is set to false.</para>
            </remarks>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetailsAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs.#ctor(ININ.IceLib.Interactions.PhoneNumber[],System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="phoneNumbers">A <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> array.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <see langword="true"/> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs.PhoneNumbers">
            <summary>
            Gets the InteractionConference associated with the event.
            </summary>
            <value>The phone numbers.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueConferenceItem">
            <summary>
            Provides queue conference item details for <see cref="T:ININ.IceLib.Interactions.QueueContentsChangedEventArgs"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueConferenceItem.#ctor(ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueConferenceItem"/> class.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="conferenceItem">The conference item.</param>
            <param name="conferenceId">The interaction conference.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueConferenceItem.Interaction">
            <summary>
            Gets the interaction.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueConferenceItem.ConferenceItem">
            <summary>
            Gets the conference item.
            </summary>
            <value>The conference item.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueConferenceItem.ConferenceId">
            <summary>
            Gets the conference ID.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueConferenceItemAttributes">
            <summary>
            Provides queue conference item details for <see cref="T:ININ.IceLib.Interactions.QueueContentsChangedEventArgs"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueConferenceItemAttributes.#ctor(ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.ConferenceId,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueConferenceItemAttributes"/> class.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="conferenceItem">The conference item.</param>
            <param name="conferenceId">The interaction conference.</param>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueConferenceItemAttributes.InteractionAttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The interaction attribute names.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueContentsChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.QueueContentsChanged"/> event of a <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </summary>
            <doccompleted/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueContentsChangedEventArgs.#ctor(ININ.IceLib.Interactions.QueueContentsChanges)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueContentsChangedEventArgs"/> class with the specified values.
            </summary>
            <param name="queueContentsChanges">The queue contents changes.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueContentsChangedEventArgs.CreateSafeReadOnlyCollection``1(System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Creates a safe read only collection wrapper.
            </summary>
            <typeparam name="TItem">The collection item type.</typeparam>
            <param name="collection">The collection.</param>
            <returns>The safe collection.</returns>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChangedEventArgs.ItemsAdded">
            <summary>
            Gets the items added with this change event.
            </summary>
            <value>The items added.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChangedEventArgs.ItemsChanged">
            <summary>
            Gets the items changed with this change event.
            </summary>
            <value>The items changed.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChangedEventArgs.ItemsRemoved">
            <summary>
            Gets the items removed with this change event.
            </summary>
            <value>The items removed.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChangedEventArgs.ConferenceItemsAdded">
            <summary>
            Gets the conference items added with this change event.
            </summary>
            <value>The conference items added.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChangedEventArgs.ConferenceItemsChanged">
            <summary>
            Gets the conference items changed with this change event.
            </summary>
            <value>The conference items changed.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChangedEventArgs.ConferenceItemsRemoved">
            <summary>
            Gets the conference items removed with this change event.
            </summary>
            <value>The conference items removed.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueContentsChanges">
            <summary>
            Provides queue item details for <see cref="T:ININ.IceLib.Interactions.QueueContentsChangedEventArgs"/>.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueContentsChanges.AddItemAdded(ININ.IceLib.Interactions.QueueItemAttributes)">
            <summary>
            Adds an item added.
            </summary>
            <param name="itemAdded">The item added.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueContentsChanges.AddItemChanged(ININ.IceLib.Interactions.QueueItemAttributes)">
            <summary>
            Adds an item changed.
            </summary>
            <param name="itemChanged">The item changed.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueContentsChanges.AddItemRemoved(ININ.IceLib.Interactions.QueueItem)">
            <summary>
            Adds an item removed.
            </summary>
            <param name="itemRemoved">The item removed.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueContentsChanges.AddConferenceItemAdded(ININ.IceLib.Interactions.QueueConferenceItemAttributes)">
            <summary>
            Adds an conference item added.
            </summary>
            <param name="conferenceItemAdded">The conference item added.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueContentsChanges.AddConferenceItemChanged(ININ.IceLib.Interactions.QueueConferenceItemAttributes)">
            <summary>
            Adds an conference item changed.
            </summary>
            <param name="conferenceItemChanged">The conference item changed.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueContentsChanges.AddConferenceItemRemoved(ININ.IceLib.Interactions.QueueConferenceItem)">
            <summary>
            Adds an conference item removed.
            </summary>
            <param name="conferenceItemRemoved">The conference item removed.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsAdded">
            <summary>
            Gets the items added (can be <see langword="null"/>).
            </summary>
            <value>The items added, or <see langword="null"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.IncludesItemsAdded">
            <summary>
            Gets a value indicating whether the changes include <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsAdded"/>.
            </summary>
            <value>
            	<see langword="true"/> if includes <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsAdded"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsChanged">
            <summary>
            Gets the items changed (can be <see langword="null"/>).
            </summary>
            <value>The items changed, or <see langword="null"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.IncludesItemsChanged">
            <summary>
            Gets a value indicating whether the changes include <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsChanged"/>.
            </summary>
            <value>
            	<see langword="true"/> if includes <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsChanged"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsRemoved">
            <summary>
            Gets the items removed (can be <see langword="null"/>).
            </summary>
            <value>The items removed, or <see langword="null"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.IncludesItemsRemoved">
            <summary>
            Gets a value indicating whether the changes include <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsRemoved"/>.
            </summary>
            <value>
            	<see langword="true"/> if includes <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ItemsRemoved"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsAdded">
            <summary>
            Gets the conference items added (can be <see langword="null"/>).
            </summary>
            <value>The conference items added, or <see langword="null"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.IncludesConferenceItemsAdded">
            <summary>
            Gets a value indicating whether the changes include <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsAdded"/>.
            </summary>
            <value>
            	<see langword="true"/> if includes <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsAdded"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsChanged">
            <summary>
            Gets the conference items changed (can be <see langword="null"/>).
            </summary>
            <value>The conference items changed, or <see langword="null"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.IncludesConferenceItemsChanged">
            <summary>
            Gets a value indicating whether the changes include <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsChanged"/>.
            </summary>
            <value>
            	<see langword="true"/> if includes <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsChanged"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsRemoved">
            <summary>
            Gets the conference items removed (can be <see langword="null"/>).
            </summary>
            <value>The conference items removed, or <see langword="null"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueContentsChanges.IncludesConferenceItemsRemoved">
            <summary>
            Gets a value indicating whether the changes include <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsRemoved"/>.
            </summary>
            <value>
            	<see langword="true"/> if includes <see cref="P:ININ.IceLib.Interactions.QueueContentsChanges.ConferenceItemsRemoved"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueId">
            <summary>
            Identifies an <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> within the Interaction Center system.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.#ctor(ININ.IceLib.Interactions.QueueType,System.String)">
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueId"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueId"/> class with the specified values.
            </summary>
            <param name="queueType">The queue type enumeration value.</param>
            <param name="queueName">The queue name.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueId"/> class with the specified values.
            </summary>
            <param name="scopedName">The scoped queue name.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.Equals(System.Object)">
            <overloads>
            Determines whether two QueueId instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.Equals(ININ.IceLib.Interactions.QueueId)">
            <summary>
            Determines whether the specified QueueId is equal to the current QueueId.
            </summary>
            <param name="other">The QueueId to compare with the current QueueId.</param>
            <returns><see langword="true"/> if the specified QueueId is equal to the current QueueId; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.op_Equality(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.QueueId)">
            <summary>
            Determines whether two instances of <see cref="T:ININ.IceLib.Interactions.QueueId"/> are equal.
            </summary>
            <param name="a">The first <see cref="T:ININ.IceLib.Interactions.QueueId"/> to compare.</param>
            <param name="b">The second <see cref="T:ININ.IceLib.Interactions.QueueId"/> to compare.</param>
            <returns><see langword="true"/> if the instances are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.op_Inequality(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.QueueId)">
            <summary>
            Determines whether two instances of <see cref="T:ININ.IceLib.Interactions.QueueId"/> are not equal.
            </summary>
            <param name="a">The first <see cref="T:ININ.IceLib.Interactions.QueueId"/> to compare.</param>
            <param name="b">The second <see cref="T:ININ.IceLib.Interactions.QueueId"/> to compare.</param>
            <returns><see langword="true"/> if the instances are not equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.CompareTo(ININ.IceLib.Interactions.QueueId)">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueId.QueueType">
            <summary>
            Gets the type of Queue being identified.
            </summary>
            <value>The type of the queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueId.QueueName">
            <summary>
            Gets the name of the Queue being identified.
            </summary>
            <value>The name of the queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueId.ScopedName">
            <summary>
            Gets the scoped name of the Queue being identified.
            </summary>
            <value>The scoped name.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueItem">
            <summary>
            Provides queue item details for <see cref="T:ININ.IceLib.Interactions.QueueContentsChangedEventArgs"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueItem.#ctor(ININ.IceLib.Interactions.Interaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueItem"/> class.
            </summary>
            <param name="interaction">The interaction.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueItem.Interaction">
            <summary>
            Gets the interaction.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueItemAttributes">
            <summary>
            Provides queue item details for <see cref="T:ININ.IceLib.Interactions.QueueContentsChangedEventArgs"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueItemAttributes.#ctor(ININ.IceLib.Interactions.Interaction,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueItemAttributes"/> class.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The parameter array is empty.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueItemAttributes.InteractionAttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The interaction attribute names.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueType">
            <summary>
            Specifies constants indicating the type of an InteractionQueue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.None">
            <summary>The Queue type cannot be identified.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.MyInteractions">
            <summary>A special Queue that represents a interactions on a user's user or station queue.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.User">
            <summary>Represents a user's interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.Station">
            <summary>Represents a station's interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.Workgroup">
            <summary>Represents a workgroup's interactions. Interactions passed to a Workgroup queue can be picked 
            up by its member agents.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.Orbit">
            <summary>Represents an orbit queue's interactions. An <i>orbit queue</i> is a list of all calls parked to 
            specific locations (numbered orbits). This feature is especially helpful for Public Announcement system 
            operators who can park a call in Orbit, then page the recipient and relay that he or she has a call on a 
            specific Orbit (i.e. "John Doe, you have a call on Orbit 12", thus enabling John Doe to move to any station 
            and pick up the call).</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.Line">
            <summary>Represents a line's interactions. (This can be an expensive queue to watch.)</summary>
            <icversion>4.0</icversion>
        </member>
        <member name="T:ININ.IceLib.Interactions.RecorderInteraction">
            <summary>
            Represents a recorder interaction within the Interaction Center system.
            </summary>
            <remarks>Recorded interactions represent an interaction where a supervisor or another user is 
            recording another user's interaction.<br/><br/>
            <note>Accessing the properties of this class without an interaction watch in place raises the <see cref="T:ININ.IceLib.NotCachedException"/>.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.RecorderInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.RecorderInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.RecorderInteraction.RecordedInteractionId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedInteractionId"/>.
            </summary>
            <value>The recorded interaction ID.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.RecorderInteraction.RecordedInteractionType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedInteractionType"/>.
            </summary>
            <value>The type of recorded interaction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.RecorderInteraction.RecordedFileName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedFileName"/>.
            </summary>
            <value>The recorded file.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.RecorderInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with RecorderInteractions.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedInteractionId">
            <summary>The recorded interaction ID.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedInteractionType">
            <summary>The type of recorded interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedFileName">
            <summary>The recorded file.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.ScreenPop">
            <summary>
            This class serves as the main interface for tracking when DDE screen pops occur.
            </summary>
            <remarks>
            A ScreenPop object is used to receive notifications when a DDE screen pop is 
            received.  Upon receipt the <see cref="E:ININ.IceLib.Interactions.ScreenPop.ScreenPopCreated"/> event is triggered
            if this ScreenPop object has watching turned on.  Watching is turned on and off
            via the <see cref="M:ININ.IceLib.Interactions.ScreenPop.StartWatching"/> and <see cref="M:ININ.IceLib.Interactions.ScreenPop.StopWatching"/> functions.
            Screen pops are dde events that are triggered by the "Actions" item in 
            Interaction Administrator.
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPop.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ScreenPop"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPop.StartWatching">
            <summary>
            Starts watching for screen pops.
            </summary>
            <remarks>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ScreenPop.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ScreenPop.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPop.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching for screen pops.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.Interactions.ScreenPop.StartWatching"/> or <see cref="M:ININ.IceLib.Interactions.ScreenPop.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPop.IsWatching">
            <summary>
            Determines whether a screen pop watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a screen pop watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a screen pop watch is in place.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPop.StopWatching">
            <summary>
            Stops watching for screen pops.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPop.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching for screen pops.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <ininAsyncMethodNote />
            <ininHowWatchesWork />
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.ScreenPop.ScreenPopCreated">
            <summary>
            Occurs when a screen pop message is added to the system.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.ScreenPopCache">
            <summary>
            The ScreenPopCache allows multiple screen pops
            to register for events through a single communications
            point.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPopCache.#ctor(ININ.IceLib.Connection.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ScreenPopCache"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPopCache.StartWatching(ININ.IceLib.Interactions.ScreenPop)">
            <summary>
            Adds a screen pop to the watch list.
            </summary>
            <param name="screenPop">The list that is watching.</param>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPopCache.IsWatching(ININ.IceLib.Interactions.ScreenPop)">
            <summary>
            Determines whether a screen pop watch is active.
            </summary>
            <returns>
            	<see langword="true"/> if a screen pop watch is active; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method determines whether a screen pop watch is in place.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPopCache.StopWatching(ININ.IceLib.Interactions.ScreenPop)">
            <summary>
            Removes a list to the watch list.
            </summary>
            <param name="screenPop">The list to remove from watchers.</param>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ScreenPopCache.HandleScreenPop(ININ.IceLib.Interactions.Internal.Messages.ScreenPopEvent)">
            <summary>
            Handles a screen pop received.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.ScreenPopCache.Session">
            <summary>
            Session this object belongs to.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.ScreenPopEventArgs">
            <summary>
            Provides data for the screen pop events of <see cref="T:ININ.IceLib.Interactions.ScreenPop"/>.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.ScreenPopEventArgs.ScreenPopItem">
            <summary>
            Gets the screen pop item.
            </summary>
            <value>The screen pop item.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ScreenPopItem">
            <summary>
            This class contains the <see cref="T:ININ.IceLib.Interactions.ScreenPop"/> event data.
            </summary>
            <remarks>
            The ScreenPopItem object holds the data for a DDE command
            that is to be issued as a result of the
            <see cref="E:ININ.IceLib.Interactions.ScreenPop.ScreenPopCreated"/> event.
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="P:ININ.IceLib.Interactions.ScreenPopItem.InteractionId">
            <summary>
            Gets the interaction ID that triggered this screen pop.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ScreenPopItem.ActionName">
            <summary>
            Gets the name of this screen pop.
            </summary>
            <value>The name of the action.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ScreenPopItem.ExecutableName">
            <summary>
            Gets the name of the executable that the DDE command executes.
            </summary>
            <value>The name of the executable.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ScreenPopItem.ApplicationName">
            <summary>
            Gets the name of the application that the DDE command executes.
            </summary>
            <value>The name of the application.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ScreenPopItem.TopicName">
            <summary>
            Gets the DDE topic command name.
            </summary>
            <value>The name of the topic.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ScreenPopItem.Commands">
            <summary>
            Gets the list of DDE commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.SecureInputParameters">
            <summary>
            Provides details when initiating secure input via the <see cref="M:ININ.IceLib.Interactions.Interaction.InitiateSecureInput(ININ.IceLib.Interactions.SecureInputParameters)"/> method.
            </summary>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.SecureInputParameters.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.SecureInputParameters"/> class to 
            be used to initiate secure input.
            </summary>
            <param name="ivrHandlerName">The ivr handler name.</param>
            <param name="formFields">The name/value pairs from the form.</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="ivrHandlerName"/> or <paramref name="formFields"/> was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="ivrHandlerName"/> was an empty string or <paramref name="formFields"/>' collection was empty.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.SecureInputParameters.ToString">
            <summary>
            Gets the string representation of <see cref="T:ININ.IceLib.Interactions.SecureInputParameters"/>.
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.SecureInputParameters.IvrHandlerName">
            <summary>
            Gets the IVR handler name.
            </summary>
            <value>The IVR handler name.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.SecureInputParameters.FormFields">
            <summary>
            Gets the name/value pairs from the form.
            </summary>
            <value>The name/value pairs from the form.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.SecureRecordingPauseAction">
            <summary>
            Specifies the secure recording pause action that should be taken.
            </summary>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.None">
            <summary>
            Performs no action.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.PauseWithDefaultTimeout">
            <summary>
            Pauses a secure recording with the default time specified in Interaction Administrator.
            <note>
            If a timed secure recording pause is already in effect then this will reset the pause timer to the
            default value in Interaction Administrator. Pauses are not cumulative, so if 10 seconds were remaining on
            a current pause and the default was set at 15 seconds, the recording would only be paused for 15
            seconds following this request, not 25.
            </note>
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.PauseWithInfiniteTimeout">
            <summary>
            Pauses a secure recording indefinitely.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.PauseWithSpecifiedTimeout">
            <summary>
            Pauses a secure recording for a specified time.
            <note>
            If a timed secure recording pause is already in effect then this will reset the pause timer to the
            specified value in Interaction Administrator. Pauses are not cumulative, so if 10 seconds were remaining on
            a current pause and 15 seconds were specified for this pause, the recording would only be paused for 15
            seconds following this request, not 25.
            </note>
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.ResumeRecording">
            <summary>
            Restarts a secure recording on the interaction if it was paused. If a secure recording is not paused, this 
            action will have no effect and the recording will continue.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.SecureRecordingPauseParameters">
            <summary>
            Provides a mechanism to pass secure recording pause parameters. Used in 
            <see cref="M:ININ.IceLib.Interactions.Interaction.SecureRecordingPause(ININ.IceLib.Interactions.SecureRecordingPauseParameters)"/> and
            <see cref="M:ININ.IceLib.Interactions.Interaction.SecureRecordingPauseAsync(ININ.IceLib.Interactions.SecureRecordingPauseParameters,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.
            </summary>
            <icversion>4.0 SU 3</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.SecureRecordingPauseParameters.#ctor(ININ.IceLib.Interactions.SecureRecordingPauseAction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.SecureRecordingPauseParameters"/> class.
            </summary>
            <param name="action">The action to perform. If 
            <see cref="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.PauseWithSpecifiedTimeout"/> is desired, use 
            <see cref="M:ININ.IceLib.Interactions.SecureRecordingPauseParameters.#ctor(System.TimeSpan)"/> instead.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="action"/> was
            <see cref="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.None"/> or 
            <see cref="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.PauseWithSpecifiedTimeout"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.SecureRecordingPauseParameters.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.SecureRecordingPauseParameters"/> class. <see cref="P:ININ.IceLib.Interactions.SecureRecordingPauseParameters.Action"/>
            will be set to <see cref="F:ININ.IceLib.Interactions.SecureRecordingPauseAction.PauseWithSpecifiedTimeout"/>.
            </summary>
            <param name="timeout">The period of time for which a secure recording should be paused. Must be greater 
            than zero and <see cref="P:System.TimeSpan.TotalSeconds"/> must be less than <see cref="F:System.Int32.MaxValue"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout"/> was less than 1 or greater 
            than or equal to <see cref="F:System.Int32.MaxValue"/> seconds.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.SecureRecordingPauseParameters.Action">
            <summary>
            Gets the <see cref="T:ININ.IceLib.Interactions.SecureRecordingPauseAction"/> for this instance.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.SecureRecordingPauseParameters.Timeout">
            <summary>
            Gets the timeout for this instance.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionSegment">
            <summary>
            A segment of an <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <remarks>
            There are two types of segments: user segments and connection segments.  User segments are segments
            associated to a user via a user queue.  Connection segments are associated with a workgroup queue.  For example,
            in a conference call, there is one connection segment which represents the conference, and a user segment
            for each party that joins the conference.  
            </remarks>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionSegment"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionSegment.#ctor(ININ.IceLib.Interactions.InteractionId,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionSegment"/> class.
            </summary>
            <param name="interactionId">The interaction ID.</param>
            <param name="segmentId">The segment ID.</param>
            <param name="wrapUpRequired">if set to <see langword="true"/> a wrap up code is required for this segment.</param>
            <param name="userId">The user ID.</param>
            <param name="queueId">The queue ID.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionSegment.InteractionId">
            <summary>
            Gets the interaction ID.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionSegment.SegmentId">
            <summary>
            Gets the segment ID.
            </summary>
            <value>The segment ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionSegment.WrapUpRequired">
            <summary>
            Gets a value indicating whether a wrap up code is required for the segment.
            </summary>
            <value><see langword="true"/> if wrap up is required for this segment; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionSegment.UserId">
            <summary>
            Gets the user ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionSegment.QueueId">
            <summary>
            Gets the Queue ID for the interaction (i.e. the name of the workgroup/distribution queue).
            </summary>
            <value>The queue ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.SendAssistanceRequestParameters">
            <summary>
            Provides details when sending an assistance request via <see cref="M:ININ.IceLib.Interactions.InteractionsManager.SendAssistanceRequest(ININ.IceLib.Interactions.SendAssistanceRequestParameters)"/>.
            </summary>
            <icversion>4.0</icversion>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.SendAssistanceRequestParameters.#ctor(ININ.IceLib.Interactions.InteractionId,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ININ.IceLib.Interactions.SendAssistanceRequestParameters"/> with the specified parameters.
            </summary>
            <param name="interactionId">The interaction ID.</param>
            <param name="problemDescription">The problem description.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.SendAssistanceRequestParameters.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.SendAssistanceRequestParameters.InteractionId">
            <summary>
            Gets the interaction ID associated with the assistance request.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.SendAssistanceRequestParameters.ProblemDescription">
            <summary>
            Gets the text that describes the problem for the assistance request.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.SupervisorAssistanceList">
            <summary>
            This class represents a collection of assistance request items belonging to a supervisor.
            </summary>
            <seealso cref="T:ININ.IceLib.Interactions.AssistanceList"/>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.SupervisorAssistanceList.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.SupervisorAssistanceList"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.WatcherQueueContentsChanges">
            <summary>
            Tracks all the queue contents changes for all the watchers.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatcherQueueContentsChanges.GetWatcherChanges(ININ.IceLib.Interactions.InteractionQueue)">
            <summary>
            Gets the watcher changes, creating the changes object if necessary.
            </summary>
            <param name="watcher">The watcher.</param>
            <returns>The changes object for the specified watcher.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatcherQueueContentsChanges.AddPostEventAction(ININ.IceLib.Interactions.WatcherQueueContentsChanges.WatcherQueueContentsChangesPostEventActionDelegate)">
            <summary>
            Adds the post event action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatcherQueueContentsChanges.PerformPostEventActions">
            <summary>
            Performs the post event actions.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.WatcherQueueContentsChanges.AllChanges">
            <summary>
            Gets all changes.
            </summary>
            <value>All changes.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.WatcherQueueContentsChanges.WatcherQueueContentsChangesPostEventActionDelegate">
            <summary>
            Specifies a parameterless function for performing actions after <see cref="T:ININ.IceLib.Interactions.WatcherQueueContentsChanges"/> have been sent to event handlers.
            </summary>
            <seealso cref="M:ININ.IceLib.Interactions.WatcherQueueContentsChanges.AddPostEventAction(ININ.IceLib.Interactions.WatcherQueueContentsChanges.WatcherQueueContentsChangesPostEventActionDelegate)"/>
            <seealso cref="M:ININ.IceLib.Interactions.WatcherQueueContentsChanges.PerformPostEventActions"/>
        </member>
        <member name="T:ININ.IceLib.Interactions.WrapUpAssignment">
            <summary>
            Representation of an assignment of a wrap-up code to a segment of an interaction.
            </summary>
            <icversion>4.0</icversion>
        </member>
        <member name="M:ININ.IceLib.Interactions.WrapUpAssignment.#ctor(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InteractionId,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.WrapUpAssignment"/> class.
            </summary>
            <param name="interactionId">The <see cref="P:ININ.IceLib.Interactions.WrapUpAssignment.InteractionId"/> of the interaction that will receive the wrap-up code.</param>
            <param name="sourceInteractionId">The <see cref="P:ININ.IceLib.Interactions.WrapUpAssignment.InteractionId"/> of the interaction that contains the attribute requiring a wrap-up code.</param>
            <param name="segmentId">The segment ID.</param>
            <param name="wrapUpCode">The wrap up code.</param>
            <param name="timeStamp">The time stamp.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interactionId"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.WrapUpAssignment.InteractionId">
            <summary>
            Gets the interaction ID of the interaction on the user queue.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.WrapUpAssignment.SourceInteractionId">
            <summary>
            Gets the interaction ID of the source interaction on the user queue.
            This is the interaction that has the attribute requiring a wrap up code.
            This will frequently be the same as <see cref="P:ININ.IceLib.Interactions.WrapUpAssignment.InteractionId"/>, but could differ.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.WrapUpAssignment.SegmentId">
            <summary>
            Gets the segment ID at which the interaction was connected to the workgroup queue.
            </summary>
            <value>The segment ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.WrapUpAssignment.User">
            <summary>
            Gets the user name of the user that entered the wrap-up code.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.WrapUpAssignment.WrapUpCode">
            <summary>
            Gets the identifier for the wrap-up code entered by the user.
            </summary>
            <value>The wrap up code.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.WrapUpAssignment.Timestamp">
            <summary>
            Gets the time stamp, in UTC, at which the wrap-up was entered.
            </summary>
            <value>Time stamp, in UTC, at which the wrap-up was entered.</value>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailBody">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailBody.Body">
            <summary>
            Gets the Body.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailBody.ContentType">
            <summary>
            Gets the ContentType.
            </summary>
            <remarks>
            The default is text/plain because HTML email support was originally not supported, and text/plain was assumed.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailBody.Equals(System.Object)">
            <summary>
            Compares two Body objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailBody.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailBodyArrayList.Equals(System.Object)">
            <summary>
            Compares two Body lists (body ordering within the list is considered).
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailBodyArrayList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailEncryptionInfo">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailEncryptionInfo.EncryptionStatus">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailEncryptionInfo.EncryptionStatusText">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailEncryptionInfo.Algorithm">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailEncryptionInfo.IssuerSignature">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailFileAttachment">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailFileAttachment.Name">
            <summary>
            The name of the attachment.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailFileAttachment.Id">
            <summary>
            Attachment Id.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailFileAttachment.ContentId">
            <summary>
            The Content Id of an inline attachment.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailFileAttachment.Cookie">
            <summary>
            The cookie.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailFileAttachment.Equals(System.Object)">
            <summary>
            Compares two Attachment objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailFileAttachment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailFileAttachmentArrayList.Equals(System.Object)">
            <summary>
            Compares two Attachment lists (attachment ordering within the list is considered).
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailFileAttachmentArrayList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailMessage">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Id">
            <summary>
            Id of email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.EntityId">
            <summary>
            Id of email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Version">
            <summary>
            Version of email xml.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Subject">
            <summary>
            Subject of email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Sender">
            <summary>
            Sender of email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.DateReceived">
            <summary>
            Date email was received.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Body">
            <summary>
            Body of email message.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.EncryptionInfo">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailMessage.Equals(System.Object)">
            <summary>
            Compares two XmlEmailMessage objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailMessage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.Bodies">
            <summary>
            Array of bodies for MIME multipart email containing both text/html and text/plain parts.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.ToRecipients">
            <summary>
            Array of recipients for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.CcRecipients">
            <summary>
            Array of recipients for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.BccRecipients">
            <summary>
            Array of recipients for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.FileAttachments">
            <summary>
            Array of attachments for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.MessageAttachments">
            <summary>
            Array of message attachments for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.Signatures">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailMessageAttachment">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessageAttachment.Subject">
            <summary>
            The name of the attachment.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessageAttachment.Cookie">
            <summary>
            Attachment Id.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailMessageAttachment.Equals(System.Object)">
            <summary>
            Compares two Attachment objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailMessageAttachment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailMessageAttachmentArrayList.Equals(System.Object)">
            <summary>
            Compares two Attachment lists (attachment ordering within the list is considered).
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailMessageAttachmentArrayList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailReceiveTime">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailReceiveTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlEmailReceiveTime"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailReceiveTime.ReceiveTime">
            <summary>
            Gets the ReceiveTime.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailRecipient">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlEmailRecipient"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailRecipient.Name">
            <summary>
            Gets the Name.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailRecipient.Address">
            <summary>
            Gets the Address.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipient.Equals(System.Object)">
            <summary>
            Compares two Recipient objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipient.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipientArrayList.Equals(System.Object)">
            <summary>
            Compares two Recipient lists (recipient ordering within the list is considered).
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipientArrayList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailSignature">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailSignature.Status">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailSignature.StatusText">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailSignature.X509">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailSignatureArrayList.Equals(System.Object)">
            <summary>
            Compares two Signature lists (recipient ordering within the list is considered).
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailSignatureArrayList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailSubject">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailSubject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlEmailSubject"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailSubject.Subject">
            <summary>
            Gets the Subject.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.CallbackCompletionRequest">
            <summary>
            Callback Interaction Messages
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.PlayDigitsRequest">
            <summary>
            Call Interaction Messages
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.Internal.Messages.PlayWavAudioRequest.EnableDigits">
            <summary>
            Enable/disables playing of digits into the call to skip forward and backwards
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.ChatModifyMembersRequest">
            <summary>
            Chat Interaction Messages
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.EmailDownloadAttachmentRequest">
            <summary>
            Email Interaction Messages
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.EFaqRequest">
            <summary>
            EFaq Messages
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.EmailResolveNameRequest">
            <summary>
            Email Resolver
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.MakeStationConnectionRequest">
            <summary>
            Interactions Manager
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.Internal.Messages.GenericObjectCreateRequest.Attributes">
            <summary>
            These keys are not sent with AttributeKey approach.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.Internal.Messages.MakeCallRequest.Attributes">
            <summary>
            These keys are not sent with AttributeKey approach.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.WatchInteractionAlertRequest">
            <summary>
            Interaction Alerting Messages
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.InteractionAlertDetail">
            <summary>
            HACK the next 3 messages really should be combined with "If" support from the iMessage compiler
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.HistWatchCallHistoryRequest">
            <summary>
            Interactions History Messages
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.AttributeMonitorRequest">
            <summary>
            Interaction Attribute Monitor Messages
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.InteractionUpdatedEvent">
            <summary>
            Interaction Events
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.ScreenPopWatchRequest">
            <summary>
            DDE Events
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.QueueSetAlertingRequest">
            <summary>
            Monitored Queue Alerts
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.AttributeKeyMsg">
            <summary>
            message AttributeKeyAbstract
            {
            int32 KeyId;
            }
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.QueueEvent">
            <summary>
            Events
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.Internal.Messages.QueueEvent.QueueName">
            <summary>
            Scoped queue name.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.AgentHelpResponseRequest">
            <summary>
            Agent Help Messages
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.Internal.Messages.HelpRequestDetails">
            <summary>
            Events
            </summary>
        </member>
    </members>
</doc>
