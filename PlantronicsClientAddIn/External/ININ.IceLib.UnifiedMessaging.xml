<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ININ.IceLib.UnifiedMessaging</name>
    </assembly>
    <members>
        <member name="T:ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxPropertiesAsync(System.Int64,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs},System.Object)"/> <c>completedCallback</c>.
            </summary>
            <remarks>
            <para>
            Provide a <c>completedCallback.</c> delegate to be informed when a call to 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxPropertiesAsync(System.Int64,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs},System.Object)"/> has completed.
            </para>
            </remarks>  
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs.#ctor(ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties,System.Exception,System.Boolean,System.Object)">
            <summary>
            Returns the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties"/> in the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxPropertiesAsync(System.Int64,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs},System.Object)"/> 
            <c>completedCallback</c> delegate.
            </summary>
            <param name="faxEnvelopeProperties">The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties"/> to return.</param>
            <param name="error">Any exception if it occurs, <see langword="null"/> otherwise.</param>
            <param name="cancelled"><see langword="true"/> if the asynchronous operation is cancelled, <see langword="false"/> otherwise.</param>
            <param name="userState">The user-specified object provided to the asynchronous operation.</param>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs.FaxEnvelopeProperties">
            <summary>
            Gets the fax envelope properties.
            </summary>
            <value>The fax envelope properties.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.AsyncGetFaxServerSettingsCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxServerSettingsAsync(System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxServerSettingsCompletedEventArgs},System.Object)"/> <c>completedCallback</c>.
            </summary>
            <remarks>
            <para>
            Provide a <c>completedCallback.</c> delegate to be informed when a call to 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxServerSettingsAsync(System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxServerSettingsCompletedEventArgs},System.Object)"/> has completed.
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.AsyncGetFaxServerSettingsCompletedEventArgs.#ctor(ININ.IceLib.UnifiedMessaging.FaxServerSettings,System.Exception,System.Boolean,System.Object)">
            <summary>
            Returns the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings"/> in the 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxServerSettingsAsync(System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxServerSettingsCompletedEventArgs},System.Object)"/> 
            <c>completedCallback</c> delegate.
            </summary>
            <param name="faxServerSettings">The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings"/> to return.</param>
            <param name="error">Any exception if it occurs, <see langword="null"/> otherwise.</param>
            <param name="cancelled"><see langword="true"/> if the asynchronous operation is cancelled, <see langword="false"/> otherwise.</param>
            <param name="userState">The user-specified object provided to the asynchronous operation.</param>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.AsyncGetFaxServerSettingsCompletedEventArgs.FaxServerSettings">
            <summary>
            Gets or sets the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings"/>.
            </summary>
            <value>The Fax server settings.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/> event.
            </summary>
            <remarks>
            <para>
            Handle the <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/>
            event to be informed when a call to <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/> has completed.
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Boolean,System.Object)">
            <summary>
            Constructs an instance of AsyncSaveAsFileCompletedEventArgs.
            </summary>
            <param name="saveAsCompleted">Set from the result value of the <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/> method.</param>
            <param name="error">An exception thrown by the <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/> method.</param>
            <param name="cancelled">The cancelled state of the <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/> method.</param>
            <param name="userState">A user-defined object passed to <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/>.</param>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs.SaveAsCompleted">
            <summary>
            Indicates whether the SaveAs operation completed successfully.
            </summary>
            <value><see langword="true"/> if save as completed successfully; otherwise, <see langword="false"/>.</value>
            <ininAsyncCompletedParamException/>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFaxAsync(System.String,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs},System.Object)"/> <c>completedCallback</c>
            that occurs when the asynchronous operation completes.
            </summary>
            <remarks>
            <para>
            Provide a <c>completedCallback</c> delegate to be informed when a call 
            to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFaxAsync(System.String,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs},System.Object)"/> has completed.
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs.#ctor(ININ.IceLib.UnifiedMessaging.FaxResult,System.Exception,System.Boolean,System.Object)">
            <summary>
            Constructs a <see cref="T:ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs"/> object to be 
            returned in the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFaxAsync(System.String,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs},System.Object)"/> 
            <c>completedCallback</c> delegate.
            </summary>
            <param name="faxResult">The fax result.</param>
            <param name="error">The error.</param>
            <param name="cancelled">If set to <see langword="true"/> was cancelled.</param>
            <param name="userState"><ininAsyncStateParam/></param>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs.FaxResult">
            <summary>
            The result of the Send Fax operation.
            </summary>
            <value>The Fax result.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.AttributeEventArgs">
            <summary>
            Provides data for the Fax attribute change event.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ININ.IceLib.UnifiedMessaging.AttributeEventArgs"/> event is raised when any of the properties
            in a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/> instance have changed.
            </para>
            <para>
            This change notification can be used to help determine when the visual
            representation of a page in a Fax should be updated.
            </para>
            </remarks>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.AttributeEventArgs.#ctor(ININ.IceLib.UnifiedMessaging.EventAttributeType)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.AttributeEventArgs"/> class with the specified values.
            </summary>
            <param name="eventAttributeType">Type of the event attribute.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified value is not from the enumeration.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.AttributeEventArgs.EventAttributeType">
            <summary>
            Gets the EventAttributeType associated with the change. This indicates that a change in resolution, 
            orientation, rotation or color scheme has occurred.
            </summary>
            <value>The type of the event attribute.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.CallFailureType">
            <summary>
            Indicates the type of call failure occurring during fax transmission.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.CallFailureType.Busy">
            <summary>
            The phone line was busy.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.CallFailureType.NoAnswer">
            <summary>
            There was no answer from the recipient.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.CallFailureType.NoFax">
            <summary>
            No fax machine is present at this number.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.CompactionLevel">
            <summary>
            Compaction level for ITStorage interface objects.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.CompactionLevel.CompactData">
            <summary>
            Data compaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.CompactionLevel.CompactDataAndPath">
            <summary>
            Data and path level compaction.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ConvertTime.ToDateTime(System.UInt32)">
            <summary>
            Converts a Windows native time_t value to a .NET DateTime object.
            </summary>
            <remarks><c>time_t</c> is an unsigned int representing the number of seconds since Midnight UTC 1 Jan 1970 on the Gregorian Calendar.</remarks>
            <param name="time_t">Unsigned int in time_t format.</param>
            <returns>A DateTime representation of the value stored in the time_t.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ConvertTime.To_time_t(System.DateTime)">
            <summary>
            Converts a .NET DateTime object to a Windows native time_t value.
            </summary>
            <remarks><c>time_t</c> is an int representing the number of seconds since Midnight UTC 1 Jan 1970 on the Gregorian Calendar.</remarks>
            <param name="time">Object to convert to a time_t formatted unsigned int.</param>
            <returns>A time_t representation of the value stored in the DateTime.</returns>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.EventAttributeType">
            <summary>
            Indicates the attribute that changed to trigger an attribute change event.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.EventAttributeType.Resolution">
            <summary>
            Indicates a change in resolution.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.EventAttributeType.Orientation">
            <summary>
            Indicates a change in orientation.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.EventAttributeType.Rotation">
            <summary>
            Indicates a change in rotation.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.EventAttributeType.ColorScheme">
            <summary>
            Indicates a change in color scheme.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxAddressee">
            <summary>
            The addressee who will be receiving a Fax.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAddressee"/> class to define the recipient of a Fax
            to use in a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>.
            </para>
            <para>
            If a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate"/> has been provided in the
            <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/> then the information contained in the
            <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAddressee"/> is used to populate several fields in the
            generated cover page.  The exact fields used depend on the cover page
            template specified in the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.Name"/> property
            of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate"/>.
            </para>
            <br/>
            <note>
            The <see cref="P:ININ.IceLib.UnifiedMessaging.FaxAddressee.Fax"/> property is used to instruct the Fax server where to
            send a Fax and is required for a send operation to succeed. 
            </note>
            </remarks>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate"/>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxAddressee.#ctor">
            <summary>
            Constructs an empty fax addressee.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxAddressee.ToString">
            <summary>
            Override of <see cref="M:System.Object.ToString"/> that prints full addressee information.
            </summary>
            <returns>A formatted string describing the addressee.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxAddressee.#ctor(ININ.IceLib.UnifiedMessaging.FaxAddressee)">
            <summary>
            Protected copy constructor.
            </summary>
            <param name="addressee">Existing FaxAddressee object to use for value assignment.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxAddressee.Clone">
            <summary>
            Creates a duplicate of this addressee object by copying all members.
            </summary>
            <returns>The new addressee.</returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxAddressee.Name">
            <summary>
            Addressee's name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxAddressee.Company">
            <summary>
            Addressee's company name.
            </summary>
            <value>The company.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxAddressee.Fax">
            <summary>
            Fax number used to contact this addressee.
            </summary>
            <value>The fax.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxAddressee.Phone">
            <summary>
            Phone number used to contact this addressee.
            </summary>
            <value>The phone.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxAddressee.AccountCode">
            <summary>
            The account code used to bill this addressee.
            </summary>
            <value>The account code.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxAttachment">
            <summary>
            Represents an attachment (containing the actual Fax file) in a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage">See the documentation on <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> for how this class is used, and what information it contains.</seealso>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxAttachment.Equals(System.Object)">
            <summary>
            Compares two FaxAttachment objects.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxAttachment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxAttachment.Id">
            <summary>
            Gets the ID of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/>.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxAttachment.Moniker">
            <summary>
            Gets the moniker of this FaxAttachment.
            </summary>
            <value>The moniker.</value>
            <icversion>3.0 SU 15</icversion>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxAttachment.Name">
            <summary>
            Gets the filename of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxCache">
            <exclude /><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxCache.Clear">
            <summary>
            Clears the list of cached faxes.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxCache.Contains(ININ.IceLib.UnifiedMessaging.FaxMessage)">
            <summary>
            Determines if the specified fax exists in the cache.
            </summary>
            <param name="message">The fax to check.</param>
            <returns>
            	<see langword="true"/> if the message is cached; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxCache.RemoveMessagesExcept(ININ.IceLib.UnifiedMessaging.FaxMessage[])">
            <summary>
            Removes all messages except those in the provided list.
            </summary>
            <param name="keepMessages">The list of messages to preserve.</param>
            <returns>An array of FaxMessage that contains all the removed faxes.</returns>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxColorScheme">
            <summary>
            Indicates the color choice for displaying a Fax page.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxColorScheme.Normal">
            <summary>
            Standard black on white display.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxColorScheme.Inverted">
            <summary>
            Inverted white on black display.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate">
            <summary>
            The information used to control generation of a Fax cover page.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate"/> class to describe the cover page to attach to an outbound Fax.
            This class is used when configuring a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>.
            </para>
            <para>
            When the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.Name"/> has been set to a valid Fax cover
            page template the Fax server will use the other properties,
            along with any information in the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAddressee"/> to create a
            cover page image using that template.
            </para>
            <br/>
            <example>
            All known templates are stored on the IC server.  The following example
            demonstrates retrieving the list of templates available to a user.
            <code lang="C#">
            FaxServerSettings faxServerSettings;
            
            UnifiedMessagingManager umManager = UnifiedMessagingManager.GetInstance(IceLibSession);
            faxServerSettings = umManager.GetFaxServerSettings();
            
            ReadOnlyCollection&lt;string&gt; CoverPages = faxServerSettings.CoverPages;
            </code>
            </example>
            </remarks>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxAddressee"/>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.#ctor">
            <summary>
            Constructs an empty cover page template.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.ToString">
            <summary>
            Override of <see cref="M:System.Object.ToString"/> that prints full cover page information.
            </summary>
            <remarks>The formatted string contains named values separated by commas: "Type=, Name=, From=, Fax=, Phone=, Company=, Comments=".</remarks>
            <returns>A formatted string describing the cover page.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.#ctor(ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate)">
            <summary>
            Protected copy constructor.
            </summary>
            <param name="template">Existing cover page template object to use for value assignment.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.Clone">
            <summary>
            Creates a duplicate of this cover page template object by copying all members.
            </summary>
            <returns>The new cover page template.</returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.Type">
            <summary>
            The type of cover page this object represents.
            </summary>
            <remarks>Type represents type of file used to construct the cover page. Type is 0 for an Interaction Fax 
            format (.I3F file), 1 for bitmap files, or 2 for ActiveX printable documents. The ActiveX printable 
            documents that are compatible at this time are MS Word and MS PowerPoint files.</remarks>
            <value>The type of cover page.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.Name">
            <summary>
            Name of the Fax cover page template used to generate a cover page.
            </summary>
            <remarks>
            <para>IC includes four basic cover page templates that can be customized. By default, these files 
            appear in the \I3\IC\Resources\CoverPages directory on the IC server after installation. The cover page 
            files ship with IC are:</para>
            <para><list type="bullet">
            <item>FaxCoverConfidential1.i3c</item>
            <item>FaxCoverLetter1.i3c</item>
            <item>FaxCoverLetter2.i3c</item>
            <item>FaxCoverUrgent1.i3c</item>
            </list>
            </para>
            </remarks>
            <value>The name of the Fax cover page template.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.FromName">
            <summary>
            Sender information used to fill in the cover page template.
            </summary>
            <value>The name of the person sending the Fax.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.FromFax">
            <summary>
            Fax information used to fill in the cover page template.
            </summary>
            <value>The sender’s Fax number.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.FromPhone">
            <summary>
            Phone information used to fill in the cover page template.
            </summary>
            <value>The sender’s voice telephone number.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.FromCompany">
            <summary>
            Company information used to fill in the cover page template.
            </summary>
            <value>The sender’s company name.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate.Comments">
            <summary>
            Comment information used to fill in the cover page template.
            </summary>
            <value>Any introductory remarks or instructions that need to appear on the cover page.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification">
            <summary>
            Controls notifications about the delivery state of a Fax.
            </summary>
            <remarks>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification"/> class to define the notifications to send
            when the final delivery state of a Fax has been determined.  This class is used
            when configuring a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>.
            <para>
            The delivery mechanism for a Fax allows the Fax server to notify an interested party
            when a fax has been successfully sent or has failed all attempts at delivery.  The
            <see cref="T:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification"/> class allows you to define who is notified
            under each condition.
            </para>
            <para>
            When setting either <see cref="P:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.NotifyOnSuccess"/> or <see cref="P:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.NotifyOnFailure"/>
            to <see langword="true"/>, make sure to set the matching Email field to a valid address
            (<i>SMTP</i>, <i>Exchange</i>, etc.).
            </para>
            </remarks>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.#ctor">
            <summary>
            Constructs an empty delivery notification object.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.ToString">
            <summary>
            Override of <see cref="M:System.Object.ToString"/> that prints full notification information.
            </summary>
            <remarks>The formatted string is "NotifyOnSuccess=<i>value</i>, NotifyOnFailure=<i>value</i>, NotifyEmail=<i>value</i>, FailureEmail=<i>value</i>".</remarks>
            <returns>A formatted string describing the notification options.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.#ctor(ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification)">
            <summary>
            Protected copy constructor.
            </summary>
            <param name="notification">Existing notification object to use for value assignment.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.Clone">
            <summary>
            Creates a duplicate of this notification object by copying all members.
            </summary>
            <returns>The new delivery notification.</returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.NotifyOnSuccess">
            <summary>
            Notify via Email when Fax is sent.
            </summary>
            <value><see langword="true"/> if should notify on success; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.NotifyEmail">
            <summary>
            Email address to notify on success.
            </summary>
            <value>The notify email.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.NotifyOnFailure">
            <summary>
            Notify via email if Fax could not be sent.
            </summary>
            <value><see langword="true"/> if should notify on failure; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification.FailureEmail">
            <summary>
            Email address to notify on failure.
            </summary>
            <value>The failure Email.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule">
            <summary>
            Controls when a Fax will be delivered to an addressee.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule"/> class to tell the Fax server when
            to begin delivery attempts on a Fax.  This class is used when configuring a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>.
            </para>
            <br/>
            <note>
            Instances of this class should leave all values set at their defaults. The
            Fax server will always attempt to deliver Faxes as soon as possible
            according to the availability schedule established on the IC server.
            </note>
            </remarks>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule.ToString">
            <summary>
            Override of <see cref="M:System.Object.ToString"/> that prints full schedule information.
            </summary>
            <returns>A formatted string describing the schedule.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule.#ctor(ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule)">
            <summary>
            Protected copy constructor.
            </summary>
            <param name="schedule">Existing schedule object to use for value assignment.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule.Clone">
            <summary>
            Creates a duplicate of this schedule object by copying all members.
            </summary>
            <returns>The new delivery schedule.</returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule.Type">
            <summary>
            Gets or sets a value indicating when the Fax should be delivered.
            </summary>
            <remarks>Type is an enumeration that indicates when this Fax should be sent: immediately, 
            during off-peak hours, or in accordance with a schedule date and time.</remarks>
            <value>The Type. See <see cref="T:ININ.IceLib.UnifiedMessaging.FaxDeliveryType"/> enumeration.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule.OffPeakBegin">
            <summary>
            Gets the start of low-rate time period for FaxDeliveryType <see cref="F:ININ.IceLib.UnifiedMessaging.FaxDeliveryType.OffPeak"/>.
            </summary>
            <remarks>The fax will be sent during this range of off peak hours. The value is only populated when retrieving Fax status, not when sending new Faxes.</remarks>
            <value>The off peak begin.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule.OffPeakEnd">
            <summary>
            Gets the end of low-rate time period for FaxDeliveryType <see cref="F:ININ.IceLib.UnifiedMessaging.FaxDeliveryType.OffPeak"/>.
            </summary>
            <remarks>The fax will be sent during this range of off peak hours. The value is only populated when retrieving Fax status, not when sending new Faxes.</remarks>
            <value>The off peak end.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule.EarliestDelivery">
            <summary>
            Gets or sets the earliest time Fax should be transmitted for FaxDeliveryType <see cref="F:ININ.IceLib.UnifiedMessaging.FaxDeliveryType.Immediate"/>.
            </summary>
            <remarks>Send the Fax immediately, or as soon as a line is available.</remarks>
            <value>The earliest delivery.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxDeliveryType">
            <summary>
            Indicates when a fax should be delivered.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxDeliveryType.Immediate">
            <summary>
            Send immediately.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxDeliveryType.OffPeak">
            <summary>
            Send during off-peak hours.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxDeliveryType.Scheduled">
            <summary>
            Schedule a date and time for delivery.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope">
             <summary>
             Stores information related to the delivery of a Fax file.
             </summary>
             <remarks>
             Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/> class to define the recipient and delivery
             options for a Fax.  You can specify who receives a fax, when it
             should be delivered, what type of cover page it should have, and who should be
             notified after a send attempt. Where the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/> class defines the content
             of a Fax, the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/> defines all aspects of its delivery.<br/>
             <br/>
             <note>
             Each <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/> added to a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/>
             represents a single addressee that will receive the Fax.  If you will
             be sending a fax to multiple recipients, you must create a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/> for
             each recipient.
             </note>
             <br/>
             A <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/> is logically divided into a <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.CoverPage"/>,
             a <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Schedule"/>, a <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Recipient"/>,
             <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Options"/>, and <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Notification"/> preferences.  When
             creating a new <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>, these properties are all assigned default
             values that will allow a Fax to be successfully delivered with the exception of the
             <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Recipient"/>.  You must assign a number to the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxAddressee.Fax"/>
             property of the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Recipient"/> in order to have a destination for this envelope.<br/>
             <br/>
             In addition to providing an actual Fax number, you must assign a valid IC user name
             to the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.SenderId"/>. You should also set the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.TimeSent"/> to indicate
             when the envelope was finalized for delivery.<br/>
             <br/>
             The Fax delivery will fail if a <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.SenderId"/> is not provided or if the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxAddressee.Fax"/> 
             property is not set.<br/>
             <br/>
             <example> The following example demonstrates the creation of a default envelope and assignment of a 
             <see cref="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.SenderId"/> and Fax number.
             <code lang="C#">
             FaxEnvelope envelope = new FaxEnvelope();
            
             envelope.Recipient.Fax = destinationNumber;
             envelope.SenderId = icUser; // userId of IC user submitting the fax
             envelope.TimeSent = DateTime.Now;
             </code>
             </example>
             </remarks>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate"/>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule"/>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification"/>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions"/>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxAddressee"/>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelope.#ctor">
            <summary>
            Creates a new envelope with defaults for when, where, and how a Fax will be sent.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelope.#ctor(ININ.IceLib.UnifiedMessaging.FaxAddressee,ININ.IceLib.UnifiedMessaging.FaxCoverPageTemplate,ININ.IceLib.UnifiedMessaging.FaxDeliverySchedule,ININ.IceLib.UnifiedMessaging.FaxDeliveryNotification,ININ.IceLib.UnifiedMessaging.FaxTransmitOptions)">
            <summary>
            Creates a new envelope for when, where and how a Fax will be sent.
            </summary>
            <param name="recipient">The recipient of the Fax.</param>
            <param name="coverPage">Options used to generate a cover page on send.</param>
            <param name="schedule">The delivery schedule.</param>
            <param name="notification">Controls generation of a delivery receipt.</param>
            <param name="options">Controls the Fax device that will send a Fax.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelope.ToString">
            <summary>
            Override of <see cref="M:System.Object.ToString"/> that prints full Fax envelope information.
            </summary>
            <returns>A formatted string Fax envelope.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Serialize(System.IO.Stream)">
            <summary>
            Writes an Envelope object to an open stream.
            </summary>
            <param name="dataStream">An existing file stream that will receive the serialized envelope.</param>
            <exception cref="T:System.ObjectDisposedException">An attempt was made to write data to a closed stream.</exception>
            <exception cref="T:System.IO.IOException">General stream write error.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelope.FromStream(System.IO.Stream)">
            <summary>
            Constructs a new envelope by reading existing envelope data from a stream object.
            </summary>
            <param name="dataStream">The stream to read the envelope from.</param>
            <returns>A new envelope created from the stream.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">General stream read error.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelope.#ctor(ININ.IceLib.UnifiedMessaging.FaxEnvelope)">
            <summary>
            Protected copy constructor.
            </summary>
            <param name="envelope">Existing envelope object to use for value assignment.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Clone">
            <summary>
            Creates a duplicate of this Fax Envelope object by copying all members.
            </summary>
            <returns>The new Fax Envelope.</returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Version">
            <summary>
            The revision identifier of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>.
            </summary>
            <value>The version number.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.CoverPage">
            <summary>
            The information used to generate a cover page.
            </summary>
            <value>The cover page.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Schedule">
            <summary>
            The information used to control when a Fax is delivered.
            </summary>
            <value>The schedule.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Recipient">
            <summary>
            The information used to identify the recipient of a Fax.
            </summary>
            <value>The recipient.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Options">
            <summary>
            The information used to control how a Fax is sent.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.Notification">
            <summary>
            The information used to control delivery receipts.
            </summary>
            <value>The notification.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.TimeSent">
            <summary>
            The Date and Time a fax was sent.
            </summary>
            <value>The time sent.</value>
            <remarks>When sending a fax this field should be set prior to the envelope being serialized into the fax file.</remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelope.SenderId">
            <summary>
            The unique identifier for a user sending a fax. This is an IC User name or name of an IP handler.
            </summary>
            <value>The sender ID.</value>
            <remarks>When sending a fax this field should be set prior to the envelope being serialized into the fax file.</remarks>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties">
             <summary>
             Class to contain the properties of a fax in progress. An instance of <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties"/> is 
             created as a result of a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxProperties(System.Int64)"/> or <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxPropertiesAsync(System.Int64,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs},System.Object)"/>. In the 
             case of the latter this object is returned in the <see cref="T:ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs"/> object. Objects of 
             this class contain all of the important information about a fax and can be used whenever you want to display properties of an on-going fax.
             <example> The following example demonstrates getting the properties of an on-going fax.
             <code lang="C#">
              private void GetFaxProperties(FaxStatus status)
              {
                    if (_UnifiedMessagingManager != null)
                    {
                        _UnifiedMessagingManager.GetFaxPropertiesAsync(Convert.ToInt32(status.EnvelopeId), new EventHandler&lt;AsyncGetFaxPropertiesEventArgs&gt;(OnGetFaxPropertiesCompleted), null);
                    }
             }
             private void OnGetFaxPropertiesCompleted(object sender, AsyncGetFaxPropertiesEventArgs args)
            {
                if (args.Error != null)
                {
                    MessageBox.Show(this, args.Error.Message, "Fax Monitor", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                else
                {
                    //Do something here to display the fax properties data
                }
            }
             </code>
             </example>
             </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.ReadFromMessage(ININ.ThinBridge.NotifierReader)">
            <summary>
            Deserializes an instance of <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties"/> from a server message.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="reader"/> is <see langword="null"/>.</exception>
            <param name="reader">The <see cref="T:ININ.ThinBridge.NotifierReader"/>.</param>
            <returns>A new instance of <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties"/>.</returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.ToAddress">
            <summary>
            Gets recipient address information.
            </summary>
            <value>The recipient address information.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.DeliveryNotification">
            <summary>
            Gets the delivery notification data for this fax.
            </summary>
            <value>The delivery notification for this fax.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.Schedule">
            <summary>
            Gets the delivery schedule for this fax.
            </summary>
            <value>The delivery schedule for this fax.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.Options">
            <summary>
            Gets the transimssion options for this fax.
            </summary>
            <value>The transmission options for this fax.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.CoverPage">
            <summary>
            Gets the cover page template for this fax.
            </summary>
            <value>The cover page template for this fax.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.FaxId">
            <summary>
            Gets the fax ID.
            </summary>
            <value>The fax ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.EnvelopeId">
            <summary>
            Gets the envelope ID.
            </summary>
            <value>The envelope ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.DeviceError">
            <summary>
            Gets the device error.
            </summary>
            <value>The device error.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.UserError">
            <summary>
            Gets the user error.
            </summary>
            <value>The user error.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.RemoteCsid">
            <summary>
            Gets the remote CSID.
            </summary>
            <value>The remote CSID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.LocalCsid">
            <summary>
            Gets the local CSID.
            </summary>
            <value>The local CSID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.T30SubAddress">
            <summary>
            Gets the T30 subaddress.
            </summary>
            <value>The T30 subaddress.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.SenderId">
            <summary>
            The unique identifier for a user sending a fax. This is an IC User name or name of an IP handler.
            </summary>
            <value>The sender ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.FailedAttempts">
            <summary>
            Gets the count of failed attempts.
            </summary>
            <value>The count failed attempts.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.FaxDeviceName">
            <summary>
            Gets the name of the fax device from which the fax is recevied.
            </summary>
            <value>The name of the fax device from which the fax is received.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.TimeSent">
            <summary>
            Gets the time sent.
            </summary>
            <value>The time sent.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.CallId">
            <summary>
            Gets the call ID.
            </summary>
            <value>The call ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.Duration">
            <summary>
            Gets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.ActualTransmissionSpeed">
            <summary>
            Gets the actual transmission speed in bytes/sec.
            </summary>
            <value>The actual transmission speed.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.LineId">
            <summary>
            Gets the line ID.
            </summary>
            <value>The line ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.CallFailureType">
            <summary>
            Gets the type of the call failure.
            </summary>
            <value>The type of the call failure.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.RetryStrategy">
            <summary>
            Gets the retry strategy.
            </summary>
            <value>The retry strategy.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties.FromNumber">
            <summary>
            Gets the telephone number of the sender of the fax.
            </summary>
            <value>The telephone number of the sender of the fax.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewFax"/>,
            <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxDeleted"/>, and <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxUpdated"/> events.
            </summary>
            <remarks>
            <para>
            Handle the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewFax"/> event to be informed when a new
            Fax has been added to the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Faxes"/> list.<br/>
            Handle the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxDeleted"/> event to be informed when an existing
            Fax has been removed from the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Faxes"/> list.<br/>
            Handle the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxUpdated"/> event to be informed when an existing
            Fax in the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Faxes"/> list has been changed.<br/>
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxEventArgs.#ctor(ININ.IceLib.UnifiedMessaging.FaxMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEventArgs"/> class with the specified values.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxEventArgs.Message">
            <summary>
            Gets the Fax message associated with the event.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxFile">
             <summary>
             Provides an interface for manipulating Fax files on a file system in .i3f or .TIF format.
             </summary>
             <remarks>
             Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/> class to create, read from or write to a .TIF or .i3f
             formatted Fax file on a file system.  You can add, remove and update
             each <see cref="T:System.Drawing.Image"/> representing a page in a Fax
             and commit the changes to a .TIF or .i3f file on a file system.  All
             modifications are kept in memory until the <see cref="M:ININ.IceLib.UnifiedMessaging.FaxFile.SaveAs(System.String,ININ.IceLib.UnifiedMessaging.StorageFormat)"/> method is called.<br/>
             <br/>
             <note>
             Most fax terminals can't handle widths larger than 1728 pixels. If the width
             of the <see cref="T:System.Drawing.Image"/> will exceed 1728 pixels, it is recommended to
             store the image in portrait orientation and set the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
             instance to indicate that the image has been rotated.<br/>
             This can also be handled by specifying <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage"/> when adding or updating pages.
             This will cause the image to be scaled to fit on the page.  If <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage"/> is not
             specified, no resizing will be done and the image will be cropped.
             </note>
             <br/>
             The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/> class also provides methods for manipulating the envelopes
             necessary for submitting a Fax to an IC server.  Before an .i3f file can
             be submitted for sending, one or more envelopes must be added and the
             Fax file saved to the file system. Use <see cref="M:ININ.IceLib.UnifiedMessaging.FaxFile.AddEnvelope(ININ.IceLib.UnifiedMessaging.FaxEnvelope)"/> to add
             a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/> for each recipient who will receive a copy of the fax.<br/>
             <br/>
             <note>
             Envelopes are not generally considered part of a Fax and are used
             primarily for delivery purposes. It is recommended that you build the
             fax containing envelopes in a temporary location in the file system.
             That addressed Fax can then be deleted when the send
             operation is complete.<br/>
             </note>
             <br/>
             <example> The following example demonstrates the creation and delivery of a new <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/>.
             <code lang="C#">
             _faxFile = new ININ.IceLib.UnifiedMessaging.FaxFile();
            
             FaxPageAttributes pageAttributes = new FaxPageAttributes();
             pageAttributes.Resolution =
                 new PageResolution( Convert.ToInt32(faxPageImage.HorizontalResolution),
                                     Convert.ToInt32(faxPageImage.VerticalResolution));
            
             _faxFile.AddPage(faxPageImage, pageAttributes);
            
             // Gather information about the intended recipients, delivery schedule, etc. from a user
             ...
            
             DateTime submitTime = DateTime.Now;
             foreach (FaxAddressee recipient in dlg.Recipients)
             {
                 FaxEnvelope envelope = new FaxEnvelope(recipient,
                     dlg.CoverPageTemplate, dlg.DeliverySchedule,
                     dlg.DeliveryNotification, dlg.TransmitOptions);
                                     
                 envelope.SenderId = icUser; // userId of IC user submitting the fax
                 envelope.TimeSent = submitTime;
                                 
                 _faxFile.AddEnvelope(envelope);
             }
                             
             string tempFilename = System.IO.Path.GetTempFileName();
             _faxFile.SaveAs(tempFilename, StorageFormat.I3F);
                             
             UnifiedMessagingManager manager = UnifiedMessagingManager.GetInstance(IceLibSession);
             try
             {
                 manager.SendFax(tempFilename);
             }
             </code>
             </example>
             </remarks>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
             <seealso cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.#ctor">
            <summary>
            Constructs a new Fax file interface with an underlying empty temporary Fax file in the filesystem.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxFile._scratchFileName">
            <summary>
            Name of the working storage file that is actively being modified.
            <para>When an existing storage file is opened, we create this working file behind the scenes.</para>
            <para>All changes to the Fax file are committed immediately to this working file, and it will 
            replace the original file after a save operation.</para>
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.LoadFrom(System.String,ININ.IceLib.UnifiedMessaging.StorageFormat)">
            <summary>
            Populates this Fax object by copying all information found in the specified Fax file.
            </summary>
            <param name="fileName">Existing i3f or Tiff Fax file to retrieve information from.</param>
            <param name="storageFormat">The format that was used to store the Fax data.</param>
            <remarks>When a Tiff file is specified the file must contain only a valid 1bpp indexed Tiff image.</remarks>
            <exception cref="T:System.IO.FileLoadException">Thrown when the structure of an i3f file is incorrect.</exception>
            <exception cref="T:System.IO.IOException">General stream read error or there was an error creating a temporary file.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the API is unable to determine the storage format by extension.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.SaveAs(System.String,ININ.IceLib.UnifiedMessaging.StorageFormat)">
            <summary>
            Saves the working Fax file using the provided filename.
            </summary>
            <param name="fileName">The full pathname of the file to write the Fax information to. 
            If the destination file exists it will be overwritten.</param>
            <param name="storageFormat">The format used to store the Fax data.</param>
            <exception cref="T:System.ArgumentException">Thrown when the API is unable to determine the storage format by extension.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.GetEncoderInfo(System.String)">
            <summary>
            Searches the available Image encoders for one matching the requested MIME type.
            </summary>
            <remarks>Multipurpose Internet Mail Extensions (MIME) is an file encoding standard that supports text and 
            attachments in a variety of character sets. The MIME specification is specified in RFC 2045, RFC 2046, 
            and RFC 2047.</remarks>
            <param name="mimeType">MIME type encoder being requested.</param>
            <returns>Image codec info.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.AddEnvelope(ININ.IceLib.UnifiedMessaging.FaxEnvelope)">
            <summary>
            Adds a new envelope to the Fax.
            </summary>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>
            <param name="envelope">The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/> envelope.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxFile.StandardFaxImageWidth">
            <summary>
            The width, in pixels, of a standard fax image.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.AddPage(System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes)">
            <summary>
            Adds a new page to the Fax.
            </summary>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
            <param name="pageImage">The <see cref="T:System.Drawing.Image"/> image of the Fax page.</param>
            <param name="faxPageAttributes">The page attributes that describe the new Fax page.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>The image will be resized using <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage"/> and <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.MaintainAspectRatio"/>.
            The quality will be set to <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageQuality.Standard"/>.  The page size will be <see cref="F:ININ.IceLib.UnifiedMessaging.FaxPageSize.Letter"/>.
            If <paramref name="pageImage"/> is a multi-page <see cref="T:System.Drawing.Image">Image</see> a new page will be 
            appended to the Fax using only the first frame of the <c>Image</c>.</remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.AddPage(System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes,ININ.IceLib.UnifiedMessaging.FaxPageSettings)">
            <summary>
            Adds a new page to the Fax for each frame in the input image.
            </summary>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
            <param name="pageImage">The <see cref="T:System.Drawing.Image"/> image of the Fax page.</param>
            <param name="faxPageAttributes">The fax page attributes.</param>
            <param name="faxPageSettings">The fax page settings.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks>A new page will be appended to the Fax, in order, for each frame in <paramref name="pageImage"/>.</remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.InsertPage(System.Int32,System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes)">
            <summary>
            Inserts a new page into the Fax at the specified index.
            </summary>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
            <param name="pageIndex">The 0 based location of the page within the Fax.  A value of -1 indicates 
            that the page should be inserted at the end.</param>
            <param name="pageImage">The <see cref="T:System.Drawing.Image"/> image of the fax page.</param>
            <param name="faxPageAttributes">The page attributes that describe the new Fax page.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <c>pageIndex</c> is greater than the number of pages or an invalid value.</exception>
            <remarks>If <paramref name="pageImage"/> is a multi-page <see cref="T:System.Drawing.Image">Image</see> a new page will be inserted
            in the Fax using the first frame of the <c>Image</c>.</remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.InsertPage(System.Int32,System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes,ININ.IceLib.UnifiedMessaging.FaxPageSettings)">
            <summary>
            Inserts a new page in the fax, starting at the specified index.
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
            </summary>
            <param name="pageIndex">The 0 based location of the page within the Fax.  A value of -1 indicates
            that the page should be inserted at the end.</param>
            <param name="faxPageImage">The <see cref="T:System.Drawing.Image"/> image of the fax page.</param>
            <param name="faxPageAttributes">The page attributes that describe the new Fax page.</param>
            <param name="faxPageSettings">The fax page settings that control how <paramref name="faxPageImage"/> will be added to the fax page.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <c>pageIndex</c> is greater than the number of pages or an invalid value.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.InsertPageImpl(System.Int32,System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes,ININ.IceLib.UnifiedMessaging.FaxPageSettings)">
            <summary>
            Inserts a new page into the Fax at the specified index.
            </summary>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
            <param name="pageIndex">The 0 based location of the page within the Fax.  A value of -1 indicates
            that the page should be inserted at the end.</param>
            <param name="pageImage">The <see cref="T:System.Drawing.Image"/> image of the fax page.</param>
            <param name="pageAttributes">The page attributes that describe the new Fax page.</param>
            <param name="faxPageSettings">The fax page settings used to describe the page size and how to process the input image.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <c>pageIndex</c> is greater than the number of pages or an invalid value.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.UpdatePage(System.Int32,System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes)">
            <summary>
            Updates the page image and attributes for a specified page.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The page to update does not exist.</exception>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <param name="pageIndex">The 0 based page number of the page being updated.</param>
            <param name="pageImage">The new image for the page.</param>
            <param name="faxPageAttributes">The new attributes for the page.</param>
            <note>The first frame of the <see cref="T:System.Drawing.Image"/> object will be the image used to update the page if the 
            <c>Image</c> has multiple frames.</note>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.UpdatePage(System.String,System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes)">
            <summary>
            Updates the page image and attributes for a specified page.
            </summary>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The specified page does not exist.</exception>
            <param name="pageId">The ID of the Fax page that is being removed.</param>
            <param name="pageImage">The new image for the page.</param>
            <param name="faxPageAttributes">The new attributes for the page.</param>
            <note>The first frame of the <see cref="T:System.Drawing.Image"/> object will be used to update the page if the 
            <c>Image</c> has multiple frames.</note>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.UpdatePage(System.String,System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes,ININ.IceLib.UnifiedMessaging.FaxPageSettings)">
            <summary>
            Updates the page image and attributes for a specified page.
            </summary>
            <param name="pageId">The ID of the Fax page that is being removed.</param>
            <param name="pageImage">The new image for the page.</param>
            <param name="faxPageAttributes">The fax page attributes.</param>
            <param name="faxPageSettings">The fax page settings.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The specified page does not exist.</exception>
            <note>If the <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.AddAllFrames"/> flag is set, it will be ignored.  The first frame of the <see cref="T:System.Drawing.Image"/> object will be used to update the page if the
            <c>Image</c> has multiple frames.  To insert several pages from a multi-frame image, use <see cref="M:ININ.IceLib.UnifiedMessaging.FaxFile.InsertPage(System.Int32,System.Drawing.Image,ININ.IceLib.UnifiedMessaging.FaxPageAttributes,ININ.IceLib.UnifiedMessaging.FaxPageSettings)"/></note>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.RemoveEnvelope(System.String)">
            <summary>
            Remove an envelope from the Fax.
            </summary>
            <param name="envelopeId">The identifier of the envelope being removed.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.RemoveEnvelope(System.Int32)">
            <summary>
            Remove an envelope from the Fax.
            </summary>
            <param name="envelopeIndex">The 0 based envelope number of the envelope that is being removed.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.RemovePage(System.String)">
            <summary>
            Removes a page and it's associated page information from the Fax.
            </summary>
            <param name="pageId">The ID of the Fax page that is being removed.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.RemovePage(System.Int32)">
            <summary>
            Remove a page and it's associated page information from the Fax.
            </summary>
            <param name="pageIndex">The 0 based page number of the Fax page that is being removed.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.MovePage(System.Int32,System.Int32)">
            <summary>
            Moves a page up or down in the page ordering by index.
            </summary>
            <param name="pageIndex">The 0 based page number of the Fax page that is being moved.</param>
            <param name="newIndex">The 0 based page number to move in front of.  A value of -1 indicates that the 
            page should be moved to the end.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <c>pageIndex</c> or <c>newIndex</c> is greater than the number of pages.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.PageAttributes(System.String)">
            <summary>
            Returns the attribute information for a specific page in a Fax.
            </summary>
            <param name="pageId">The ID of the Fax page whose information is being requested.</param>
            <returns>A FaxPageAttributes object describing the Fax page image.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.PageAttributes(System.Int32)">
            <summary>
            Returns the information for a specific page in a Fax.
            </summary>
            <param name="pageIndex">The 0 based page number of the Fax page whose information is being requested.</param>
            <returns>A FaxPageAttributes object describing the Fax page image.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.PageImage(System.String)">
            <summary>
            Returns a Bitmap object representing a Fax page.
            </summary>
            <param name="pageId">The page identifier of the Fax page whose image is being requested.</param>
            <returns>Bitmap object representing the Fax page.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.PageImage(System.Int32)">
            <summary>
            Returns a Bitmap object representing a Fax page.
            </summary>
            <param name="pageIndex">The 0 based page number in the Fax whose image is being requested.</param>
            <returns>Bitmap object representing the Fax page.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.Envelope(System.Int32)">
            <summary>
            Returns a Fax Envelope object representing delivery details for a Fax.
            </summary>
            <param name="envelopeIndex">The 0 based envelope number in the Fax whose object is being requested.</param>
            <returns>Fax Envelope object representing the delivery details.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.PageId(System.Int32)">
            <summary>
            Returns the identifier for a page image.  IDs are typically a TIFF filename with the extension .TIF.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the ID is requested for a page that doesn't exist.</exception>
            <param name="pageIndex">The 0 based page number of the page whose ID is being requested.</param>
            <returns>The string name used to identify the page image.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.EnvelopeId(System.Int32)">
            <summary>
            Returns the identifier for an envelope.  IDs are typically an 8 character filename with the extension ENV.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the ID is requested for an envelope that doesn't exist.</exception>
            <param name="envelopeIndex">The 0 based envelope number of the envelope whose ID is being requested.</param>
            <returns>The string name used to identify the envelope data.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.NextPageId">
            <summary>
            Generates an 8.3 TIF filename to use as a page identifier.
            </summary>
            <returns>The unique Fax page identifier.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.NextEnvelopeId">
            <summary>
            Generates an 8.3 ENV filename to use as a page identifier.
            </summary>
            <returns>The unique Fax envelope identifier.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.CreateScratchStorage">
            <summary>
            Creates a temporary file in the filesystem that is used to reflect changes to this fax object.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.DeleteScratchStorage">
            <summary>
            Attempts to remove the temporary file in the filesystem that is used by this object.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.DisposePageImages">
            <summary>
            Disposes the image objects that are associated with any Fax page images.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.Dispose(System.Boolean)">
            <summary>
            Internal implementation for the Dispose, allowing it to be called by a finalizer if desired.
            </summary>
            <param name="disposing">Indicates if the object is being disposed.  <see langword="false"/> indicates the object is being finalized.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.Dispose">
            <summary>
            Releases all stored image objects and removes the scratch file from the filesystem.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxFile.PageCount">
            <summary>
            Returns a count of the number of pages in this Fax.
            </summary>
            <value>The page count.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxFile.EnvelopeCount">
            <summary>
            Returns a count of the number of envelopes in this Fax.
            </summary>
            <value>The envelope count.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxFile.StorageTracker">
            <summary>
            Abstract class allowing management of a dirty state for any object.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxFile.FaxAttributesTracker">
            <summary>
            Keeps track of a dirty state for FaxPageAttributes that are in-memory.
            </summary>
            <remarks>
            Dirty FaxPageAttributes will generally need to be committed to the external Fax file storage.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.FaxPageImageTracker.FloydSteinbergDither1bpp(System.Drawing.Image)">
            <summary>
            Applies Floyd-Steinberg dithering to convert an image to 1 bit per pixel index color 
            so that it can be faxed.
            </summary>
            <param name="image">The image to convert.</param>
            <returns>A black and white dithered version of <c>image</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.FaxPageImageTracker.InitDitheringArray(System.Int32,System.Int32,System.Drawing.Bitmap,System.Int32[0:,0:]@)">
            <exclude/>
            <summary>
            Initializes the dithering array with the pixels in BmpCopy.
            </summary>
            <param name="width">The width of the array.</param>
            <param name="height">The height of the array.</param>
            <param name="bitmap">The bitmap from which the array will be populated.</param>
            <param name="ditheringArray">The dithering array.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxFile.FaxPageImageTracker.InitDitheringArrayFast(System.Int32,System.Int32,System.Drawing.Bitmap,System.Int32[0:,0:]@)">
            <exclude/>
             <summary>
             Initializes the dithering array with the pixels in BmpCopy.  This method is optimized for
             certain depths.
             </summary>
             <param name="width">The width of the array.</param>
             <param name="height">The height of the array.</param>
             <param name="bitmap">The bitmap with which to populate the array.</param>
             <param name="ditheringArray">The dithering array.</param>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxFile.FaxEnvelopeTracker">
            <summary>
            Keeps track of a dirty state for FaxEnvelope objects that are in-memory.
            </summary>
            <remarks>
            Dirty FaxEnvelope objects will generally need to be committed to the external Fax file storage.
            </remarks>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxImageQuality">
            <summary>
            Specifies the resolutions that can be used for the fax image.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxImageQuality.Standard">
            <summary>
            Standard fax resolution (204x98 pixels per inch).
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxImageQuality.Fine">
            <summary>
            Fine fax resolution (204x196 pixels per inch).
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxImageSettings">
            <summary>
            Provides flags indicating how an image should be processed in preparation for faxing.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage">
            <summary>
            The image should be stretched to fit the page.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.MaintainAspectRatio">
            <summary>
            The width and height of the image should be scaled by the same factor. This flag is only valid in conjunction with the <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage"/> flag.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.AddAllFrames">
            <summary>
            If this flag is set each frame of the image will be used, otherwise only the first frame will be used.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.All">
            <summary>
            Every flag in the enum is set. Used for parameter checking, etc.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxMessage">
            <summary>
            Represents a Fax message within the Interaction Center system.
            </summary>
            <remarks>
            <para>All <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>s are accessible through the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Faxes"/> 
            property of the <see cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/> instance. The <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Faxes"/> 
            list is not automatically kept current.  It must be refreshed by calling <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCache(System.Int32)"/> 
            or <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. In addition to referencing the entire list, 
            code can be informed of changes to the list by subscribing to the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewFax"/>,
            <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxDeleted"/>, and <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxUpdated"/> events.
            </para>
            <para>A <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> contains various pieces of information about the Fax itself (for example: 
            <see cref="P:ININ.IceLib.UnifiedMessaging.FaxMessage.From"/>, <see cref="P:ININ.IceLib.UnifiedMessaging.FaxMessage.To"/>, <see cref="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Subject"/>, <see cref="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Body"/>), 
            as well as a list of actual Fax file attachments to the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.  A <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> 
            may contain zero or more <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/>s (available from the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Attachments"/> 
            property), each one representing a Fax file added to the Fax message at any given time. In typical scenarios 
            there will only be one attachment which is the Fax itself, but it is possible for users to group several 
            Fax files together into a single fax message.</para>
            <para>Currently, <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>s may not be changed and saved.<br/><br/></para>
            <note>Although this is not typical, each <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/> may not necessarily contain a Fax file.  
            It is possible for a user to attach any file they wish to a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.</note>
            <example>
            <para>The following example demonstrates saving a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/> to the file system.<br/><br/></para>
            <code lang="C#">
            ...
            UnifiedMessagingManager manager = UnifiedMessagingManager.GetInstance(_session);
            manager.RefreshFaxCache(-1);
            if (manager.Faxes.Count &gt; 0)
            {
                FaxMessage msg = manager.Faxes[0];
                if ((msg.Attachments.Count &gt; 0) &amp;&amp; (IsFaxFileExtension(msg.Attachments[0].Name))
                {
                    string fileName = System.IO.Path.GetTempFileName();
                    msg.SaveAsFile(msg.Attachments[0], fileName, true);
                }
            }
            ...
            </code>
            </example>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.Delete">
            <summary>
            Issues a synchronous request to delete this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.DeleteAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to delete this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.CancelSaveAsFile(ININ.IceLib.UnifiedMessaging.FaxAttachment)">
            <summary>
            Cancels the current downloading to a file.
            </summary>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean)">
            <summary>
            Downloads this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> into a specified file.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/> of this message to download.</param>
            <param name="fileName">The path and name of a local file to save the fax into.</param>
            <param name="markAsRead">Mark this message as read.</param>
            <returns><see langword="true"/> if the file was saved successfully.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="fileName"/> length is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously downloads this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> into a specified file.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/> of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> to download.</param>
            <param name="fileName">The path and name of a local file to save the fax into.</param>
            <param name="markAsRead">Mark this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> as read.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="fileName"/> length is zero.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveToStream(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.IO.Stream,System.Boolean)">
            <summary>
            Downloads this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> into a specified stream.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/> of this message to download.</param>
            <param name="stream">The stream to save the fax into.</param>
            <param name="markAsRead">Mark this message as read.</param>
            <returns><see langword="true"/> if the file was saved successfully.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveToStreamAsync(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.IO.Stream,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously downloads this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> into a specified stream.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/> of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> to download.</param>
            <param name="stream">The stream to save the fax into.</param>
            <param name="markAsRead">Mark this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> as read.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
            <icversion>4.0 SU 2</icversion>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.Dispose">
            <summary>
            Releases resources held by this instance.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMessage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ININ.IceLib.Connection.AuthSettings"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">Indicates whether the control is in the process of being disposed of.</param>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.FaxMessage.DownloadProgressChanged">
            <summary>
            Occurs when the progress of downloading a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> changes.
            </summary>
            <remarks>
            This event will only occur when saving a fax as a file. To save a fax as a file call the 
            <see cref="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean)"/> method or the <see cref="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean)"/> or <see cref="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/>.</note>
            </remarks>
            <seealso cref="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean)"/>
            <seealso cref="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.FaxMessage.PlaybackComplete">
            <summary>
            Occurs when playback to a remote number or station has completed.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.From">
            <summary>
            Gets the sender of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.To">
            <summary>
            Gets the list of recipients for this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The 'to' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Cc">
            <summary>
            Gets the list of recipients carbon-copied on this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The 'cc' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Attachments">
            <summary>
            Gets the list of attachments on this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Subject">
            <summary>
            Gets the subject of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.DateReceived">
            <summary>
            Gets the <see cref="T:System.DateTime"/> this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> was received.
            </summary>
            <value>The date received.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Importance">
            <summary>
            Gets the importance level of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The importance.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Sensitivity">
            <summary>
            Gets the sensitivity level of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The sensitivity.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.HasBeenRead">
            <summary>
            Gets a flag indicating whether this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> is marked as read or unread.
            </summary>
            <value>
            	<see langword="true"/> if this instance has been read; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Id">
            <summary>
            Gets the ID of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Moniker">
            <summary>
            Gets the moniker of this FaxMessage.
            </summary>
            <value>The moniker.</value>
            <icversion>3.0 SU 15</icversion>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMessage.Body">
            <summary>
            Gets the body text of this <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <value>The body.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxMonitorUpdateEventArgs">
            <summary>
            Provides the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxMonitorUpdateEventArgs.FaxStatus"/> for the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxMonitorUpdate"/> event.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMonitorUpdateEventArgs"/> class contains a single
            property <see cref="P:ININ.IceLib.UnifiedMessaging.FaxMonitorUpdateEventArgs.FaxStatus"/> that encapsulates all of the information
            necessary to communicate the current progress of an individual Fax.  Each
            Fax in progress will periodically generate a new <see cref="P:ININ.IceLib.UnifiedMessaging.FaxMonitorUpdateEventArgs.FaxStatus"/>
            that will be broadcast to all registered listeners through the
            <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxMonitorUpdate"/> event.
            </para>
            <para>
            See <see cref="N:ININ.IceLib.UnifiedMessaging"/> for an example of responding to a <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxMonitorUpdate"/> event.
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxMonitorUpdateEventArgs.#ctor(ININ.IceLib.UnifiedMessaging.FaxStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMonitorUpdateEventArgs"/> class with the specified values.
            </summary>
            <param name="faxStatus">The Fax status.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxMonitorUpdateEventArgs.FaxStatus">
            <summary>
            Gets the Fax status associated with the change.
            </summary>
            <value>The Fax status.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxOrientation">
            <summary>
            Indicates orientation for a Fax page (horizontal and vertical).
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxOrientation.Normal">
            <summary>
            No Orientation applied.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxOrientation.HorizontalFlip">
            <summary>
            Page is flipped horizontal (upside-down).
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxOrientation.VerticalFlip">
            <summary>
            Page is flipped vertical (backwards).
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes">
            <summary>
            Specifies display preferences used to render a Fax page image.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/> to indicate to an application
            how the image representing a Fax page should be presented.
            </para>
            <para>
            Fax page images stored in an .i3f or .tif file are kept in an orientation
            and color scheme that is appropriate for ensuring successful delivery of
            a Fax through the IC server.  In most cases this storage format is
            portrait orientation with black text on a white background for the color scheme.
            These attributes may not be the best choice for displaying a page of a fax
            to an end user. The separation of page image from page attributes allows
            the image to be stored in the correct format for sending to the Fax
            server, while also allowing it to be adjusted and presented appropriately
            on-screen.
            </para>
            <para>
            When adding or updating a page image in a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/>, make sure you
            set the properties of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/> to correctly
            indicate the viewing preferences of that page.
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.#ctor">
            <summary>
            Constructs a new FaxPageAttributes object.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.FromStream(System.IO.Stream)">
            <summary>
            Constructs a new FaxPageAttributes object by reading from an existing file stream.
            </summary>
            <param name="dataStream">An existing file stream containing attribute information.</param>
            <returns>A new FaxPageAttributes object.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.Serialize(System.IO.Stream)">
            <summary>
            Writes a FaxPageAttributes object to an open stream.
            </summary>
            <param name="dataStream">An existing file stream that will receive the serialized attributes.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.ToString">
            <summary>
            Override of <see cref="M:System.Object.ToString"/> that prints full attribute information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.#ctor(ININ.IceLib.UnifiedMessaging.FaxPageAttributes)">
            <summary>
            Protected copy constructor.
            </summary>
            <param name="pageAttributes">Existing attributes object to use for value assignment.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.Clone">
            <summary>
            Clones the FaxPageAttributes object by making a deep copy of all member values.
            </summary>
            <returns>A new cloned object.</returns>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.AttributeChange">
            <summary>
            Indicates that a change in one of the attributes of a Fax Page has occurred.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.ColorScheme">
            <summary>
            Determines the display colors used for a Fax page.
            </summary>
            <value>The color scheme.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.Resolution">
            <summary>
            Determines the resolution settings for a Fax page.
            </summary>
            <value>The resolution.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.Orientation">
            <summary>
            Determines the orientation settings for a Fax page.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageAttributes.Rotation">
            <summary>
            Determines the rotation settings for a Fax page.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxPageSettings">
            <summary>
            Stores information on how a fax page is to be formatted when it is sent.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxPageSettings.#ctor(ININ.IceLib.UnifiedMessaging.FaxImageSettings,ININ.IceLib.UnifiedMessaging.FaxImageQuality,ININ.IceLib.UnifiedMessaging.FaxPageSize)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxPageSettings"/> class.
            </summary>
            <param name="faxImageSettings">The fax image settings.</param>
            <param name="faxImageQuality">The fax image quality.</param>
            <param name="faxPageSize">Size of the fax page.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxPageSettings.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.FaxImageSettings">
            <summary>
            Gets or sets the fax image settings.
            </summary>
            <value>The fax image settings.</value>
            <remarks>The <see cref="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.FaxImageSettings"/> flags indicate how an image should be transformed into a fax page.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified invalid flags for the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.FaxImageSettings"/> enum.</exception>
            <exception cref="T:System.ArgumentException">An invalid combination of flags was specified. See <see cref="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.FaxImageSettings"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.FaxImageQuality">
            <summary>
            Gets or sets the fax image quality.
            </summary>
            <value>The fax image quality.</value>
            <seealso cref="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.FaxImageQuality"/>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.FaxPageSize">
            <summary>
            Gets or sets the paper size of the fax page.
            </summary>
            <value>The size of the fax page.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.PageWidth">
            <summary>
            Gets the width of the page, in inches.
            </summary>
            <value>The width of the page.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxPageSettings.PageHeight">
            <summary>
            Gets the height of the page, in inches.
            </summary>
            <value>The height of the page.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxPageSize">
            <summary>
            Enumerates various paper sizes that can be used for faxing.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxPageSize.Letter">
            <summary>
            Letter-sized paper (8.5x11 inches).
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxPageSize.Legal">
            <summary>
            Legal-sized paper (8.5x14 inches).
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxPageSize.A4">
            <summary>
            A4-sized paper (8.26x11.69 inches).
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxRecipient">
            <summary>
            Represents a recipient of a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxRecipient.Equals(System.Object)">
            <summary>
            Compares two FaxRecipient objects.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxRecipient.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxRecipient.Name">
            <summary>
            Gets the display name of this recipient.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxRecipient.Address">
            <summary>
            Gets the address of this recipient.
            </summary>
            <value>The address.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxResult">
            <summary>
            Represents the result of a send Fax operation.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxResult"/> links the full local pathname of a Fax file
            to an ID resulting from a <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFax(System.String)"/> operation. 
            When an asynchronous send operation such as 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFaxAsync(System.String,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs},System.Object)"/> is used, the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxResult.FaxFile"/> property
            allows you to perform validation against the specified filename if desired.
            </para>
            <br/>
            <note>
            The <see cref="P:ININ.IceLib.UnifiedMessaging.FaxResult.FaxId"/> returned is not guaranteed to be unique.
            </note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxResult.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxResult.FaxId">
            <summary>
            Gets the ID that was assigned to the faxed file during the send operation.
            </summary>
            <value>The Fax ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxResult.FaxFile">
            <summary>
            Gets the full pathname of the file that was submitted for faxing.
            </summary>
            <value>The Fax file.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxRotation">
            <summary>
            Indicates direction of rotation for a Fax page.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxRotation.Normal">
            <summary>
            No rotation applied.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxRotation.Right90">
            <summary>
            Page is rotated 90° to the right (clockwise).
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxRotation.Rotate180">
            <summary>
            Page is rotated 180° (upside-down).
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxRotation.Left90">
            <summary>
            Page is rotated 90° to the left (counter-clockwise).
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings">
            <summary>
            Represents the Fax configuration settings on an IC server.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings"/> to retrieve the set of Fax-related
            behavior settings defined on the IC server.
            </para>
            <para>
            The properties available in this class represent the defaults established
            by the IC server administrator for items such as the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.DefaultCoverPage">default cover page
            template</see> and values used to populate that page, as well as the
            delivery behavior (<see cref="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RetryAttempts"/>, <see cref="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RetryDelay"/>).
            </para>
            <para>
            Before using any of the properties exposed through this class you should
            check to see if the settings are valid.  Each of the integer-based
            properties like <see cref="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RetryAttempts"/> have a matching property with a
            "Valid" extension that indicates if the property contains a valid value
            (<see cref="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RetryAttemptsValid"/>).  String properties can be compared against
            <see langword="null"/> to determine their validity.
            </para>
            <br/>
            <note>
            The properties exposed through the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings"/> class are
            <b>read-only</b>.  Changes to these values may only be made by an IC administrator.
            </note>
            <br/>
            <example>
            The following example demonstrates retrieving the list of Fax groups visible to a user.
            <code lang="C#">
            FaxServerSettings faxServerSettings;
            
            UnifiedMessagingManager umManager = UnifiedMessagingManager.GetInstance(IceLibSession);
            faxServerSettings = umManager.GetFaxServerSettings();
            
            ReadOnlyCollection&lt;string&gt; FaxGroups = faxServerSettings.FaxGroups;
            </code>
            </example>
            </remarks>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.HEADER">
            <summary>
            I3_ATTR_FAX_OPTION_HEADER, "Header"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.STATION_ID">
            <summary>
            I3_ATTR_FAX_OPTION_STATION_ID, "Station ID"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.FROM_NAME">
            <summary>
            I3_ATTR_FAX_OPTION_FROM_NAME, "From Name"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.FROM_COMPANY">
            <summary>
            I3_ATTR_FAX_OPTION_FROM_COMPANY, "From Compnay"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.FROM_PHONE_FAX">
            <summary>
            I3_ATTR_FAX_OPTION_FROM_PHONE_FAX, "From Phone Fax"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.FROM_PHONE_VOICE">
            <summary>
            I3_ATTR_FAX_OPTION_FROM_PHONE_VOICE, "From Phone Voice"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.COVER_PAGE">
            <summary>
            I3_ATTR_FAX_OPTION_COVER_PAGE, "Cover Page"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.FAX_SPEED">
            <summary>
            I3_ATTR_FAX_OPTION_FAX_SPEED, "Fax Speed"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.FAX_GROUP">
            <summary>
            I3_ATTR_FAX_OPTION_FAX_GROUP, "Fax Group"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RETRIES">
            <summary>
            I3_ATTR_FAX_OPTION_RETRIES, "Retries"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RETRY_DELAY">
            <summary>
            I3_ATTR_FAX_OPTION_RETRY_DELAY, "Retry Delay"
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxServerSettings.ANSWER_TIMEOUT">
            <summary>
            I3_ATTR_FAX_OPTION_NO_ANSWER_TIMEOUT, "No Answer Timeout"
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.CoverPages">
            <summary>
            The names of all cover page templates defined on the server.
            </summary>
            <value>The cover pages.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.FaxGroups">
            <summary>
            The names of all Fax groups defined on the server.
            </summary>
            <remarks>A Fax group is a named group of Fax resources dedicated for a particular purpose.</remarks>
            <value>The Fax groups.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.PageHeader">
            <summary>
            The text displayed at the top of all Faxed pages.
            </summary>
            <value>The page header.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.StationId">
            <summary>
            The station number displayed on the receiving Fax station’s display window and Fax log.
            </summary>
            <value>The station ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.DefaultFromName">
            <summary>
            The name used to identify the originating party of a Fax.
            </summary>
            <value>The default from name.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.DefaultFromCompany">
            <summary>
            The company of the originating party sending a Fax.
            </summary>
            <value>The default from company.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.DefaultFromFax">
            <summary>
            The Fax number of the originating party sending a Fax.
            </summary>
            <value>The default from Fax.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.DefaultFromVoice">
            <summary>
            The voice number of the originating party sending a Fax.
            </summary>
            <value>The default from voice.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.DefaultCoverPage">
            <summary>
            The cover page template used to generate a cover page for all outgoing faxes.
            </summary>
            <value>The default cover page.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.TransmissionSpeed">
            <summary>
            The maximum transmission rate to use when executing Fax send operations.
            </summary>
            <value>The transmission speed.</value>
            <remarks>The TransmissionSpeedValid property should always be checked before attempting to 
            access this property.</remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.TransmissionSpeedValid">
            <summary>
            Indicates if a value is actually specified for the TransmissionSpeed property.
            </summary>
            <value>
            	<see langword="true"/> if the transmission speed is valid; otherwise, <see langword="false"/>.
            </value>
            <remarks>This property should always be checked before attempting to access the TransmissionSpeed property.</remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.DefaultFaxGroup">
            <summary>
            The Fax group used when sending outgoing Faxes.
            </summary>
            <value>The default Fax group.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RetryAttempts">
            <summary>
            The maximum number of times a send operation should be tried if the initial attempt fails.
            </summary>
            <value>The retry attempts.</value>
            <remarks>The RetryAttemptsValid property should always be checked before attempting to access this property.</remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RetryAttemptsValid">
            <summary>
            Indicates if a value is actually specified for the RetryAttempts property.
            </summary>
            <value><see langword="true"/> if the retry attempts is valid; otherwise, <see langword="false"/>.</value>
            <remarks>This property should always be checked before attempting to access the RetryAttempts property.</remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RetryDelay">
            <summary>
            The number of seconds the server will wait before trying a failed send operation again.
            </summary>
            <value>The retry delay.</value>
            <remarks>The RetryDelayValid property should always be checked before attempting to access this property.</remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.RetryDelayValid">
            <summary>
            Indicates if a value is actually specified for the RetryDelay property.
            </summary>
            <value><see langword="true"/> if the retry delay is valid; otherwise, <see langword="false"/>.</value>
            <remarks>This property should always be checked before attempting to access the RetryDelay property.</remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.AnswerTimeout">
            <summary>
            The number of seconds the server will wait for an answer from a remote Fax machine before marking 
            a send operation as failed.
            </summary>
            <value>The answer timeout.</value>
            <remarks>The AnswerTimeoutValid property should always be checked before attempting to access 
            this property.</remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxServerSettings.AnswerTimeoutValid">
            <summary>
            Indicates if a value is actually specified for the AnswerTimeout property.
            </summary>
            <value><see langword="true"/> if the answer timeout is valid; otherwise, <see langword="false"/>.</value>
            <remarks>This property should always be checked before attempting to access the AnswerTimeout property.</remarks>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxStatus">
            <summary>
            Represent the progress of a Fax that was submitted for delivery.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxStatus"/> class represents the progress information received
            from an IC server about a Fax submitted by a user.
            </para>
            <para>
            The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxStatus"/> is wrapped into a
            <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxMonitorUpdate"/> event and broadcast
            to any registered listeners when monitoring has been turned on through a
            call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/>.
            </para>
            <para>
            See <see cref="N:ININ.IceLib.UnifiedMessaging"/> for an example of responding to a <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxMonitorUpdate"/> event.
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxStatus.ToDateTime(System.UInt32)">
            <summary>
            Converts a Windows native time_t value to a .NET <see cref="T:System.DateTime"/> object.
            </summary>
            <remarks>time_t is an unsigned int representing the number of seconds since Midnight UTC 1 Jan 1970 on the Gregorian Calendar.</remarks>
            <param name="time_t">Unsigned int in time_t format.</param>
            <returns>a <see cref="T:System.DateTime"/> representation of the value stored in the time_t.</returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.EnvelopeId">
            <summary>
            Gets the identifier of the Fax being processed.
            </summary>
            <value>The envelope ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.Code">
            <summary>
            Gets the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxStatusCode"/> that described the current status of the Fax.
            </summary>
            <value>The status code indicates whether this Fax is queued for sending, currently transmitting, etc.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.Details">
            <summary>
            Gets details about the current status of the Fax.
            </summary>
            <value>The details.</value>
            <remarks>
            <p>The meaning of this field is dependent on the value of the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxStatus.Code"/> property</p>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Holding"/></b> - Details of last failure if <see cref="P:ININ.IceLib.UnifiedMessaging.FaxStatus.RetryCount"/> &gt; 0<br/>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.QueuedForSend"/></b> - Details of last failure if RetryCount &gt; 0<br/>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Connecting"/></b> - Connecting Information (Phone number, IP address etc.)<br/>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Transmitting"/></b> - Connection Info (rate if available, remote station ID)<br/>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Successful"/></b> - Call Subscriber ID (CSID)<br/>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Failed"/></b> - Failure Information<br/>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.DetailsExtended">
            <summary>
            Gets additional details about the current status of the Fax.
            </summary>
            <value>The extended details.</value>
            <remarks>
            <p>The meaning of this field is dependent on the value of the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxStatus.Code"/> property.</p>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Holding"/></b> - Device details (if any) of last failure if <see cref="P:ININ.IceLib.UnifiedMessaging.FaxStatus.RetryCount"/> &gt; 0<br/>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.QueuedForSend"/></b> - Device details (if any) of last failure if RetryCount &gt; 0<br/>
            <b><see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Failed"/></b> - Device details (if any) of failure<br/>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.PagesTransmitted">
            <summary>
            Gets the number of pages transmitted so far.
            </summary>
            <value>The number of pages transmitted.</value>
            <remarks>
            <p>For the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxStatus.Code"/> property values of
            <see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Transmitting"/>,
            <see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Successful"/>, and
            <see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Failed"/>, the number of pages transmitted.</p>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.HoldingUntilTime">
            <summary>
            Gets the time until the fax will be sent, if holding.
            </summary>
            <value>The holding until time.</value>
            <remarks>
            <p>For the <see cref="P:ININ.IceLib.UnifiedMessaging.FaxStatus.Code"/> property value of <see cref="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Holding"/>,
            the time envelope will be queued for send.</p>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.RetryCount">
            <summary>
            Gets the number of attempts made to send the Fax.
            </summary>
            <value>The retry count.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.RecipientName">
            <summary>
            Gets the intended recipient of the Fax.
            </summary>
            <value>The name of the recipient.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.RecipientFax">
            <summary>
            Gets fax number used to contact the recipient.
            </summary>
            <value>The recipient Fax.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxStatus.TimeSent">
            <summary>
            Gets the Date and Time a Fax was sent.
            </summary>
            <value>The time sent.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxStatusCode">
            <summary>
            Indicates the current status of a fax.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.None">
            <summary>
            The fax is in an unknown or invalid status.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Holding">
            <summary>
            The fax is currently waiting to be placed in the send queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.QueuedForSend">
            <summary>
            The fax has been queued for sending.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Connecting">
            <summary>
            The fax device is currently negotiating a connection with a remote fax.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Transmitting">
            <summary>
            The fax device is currently transmitting the fax to the remote fax.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Successful">
            <summary>
            The fax was delivered successfully.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.FaxStatusCode.Failed">
            <summary>
            The fax was not delivered.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions">
            <summary>
            Represents Fax device configuration information.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions"/> class to tell the Fax server how the
            Fax device should behave when sending a Fax.  This class is used when
            configuring a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>.
            </para>
            <para>
            The properties contained in this class may be used to override several
            of the default behaviors that have been configured for Fax devices by
            your IC administrator.
            </para>
            <para>
            Accepting the default values for an instance of this class will instruct
            the Fax server to use the settings defined by the administrator. If
            additional control over the behavior is desired, then the default values
            may be read from the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings"/> and modified as
            necessary.
            </para>
            <br/>
            <note>
            When setting <see cref="P:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.DeviceGroup"/>, the value <b>*</b> (the default)
            is a wildcard used to indicate any available device group.
            </note>
            </remarks>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings"/>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.#ctor">
            <summary>
            Constructs an object with all transmission options defaulted.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.ToString">
            <summary>
            Override of <see cref="M:System.Object.ToString"/> that prints full fax options information.
            </summary>
            <returns>A formatted string describing the options.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.#ctor(ININ.IceLib.UnifiedMessaging.FaxTransmitOptions)">
            <summary>
            Protected copy constructor.
            </summary>
            <param name="options">Existing options object to use for value assignment.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.Clone">
            <summary>
            Creates a duplicate of this transmit options object by copying all members.
            </summary>
            <returns>The new transmit options.</returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.PageHeader">
            <summary>
            Included in the header line of each Fax page.
            </summary>
            <value>The page header.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.Retries">
            <summary>
            Retries before returning error report.
            </summary>
            <value>The number of retries.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.RetryDelay">
            <summary>
            Delay between retries (seconds).
            </summary>
            <value>The retry delay interval, in seconds.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.MaxTransmissionRate">
            <summary>
            Maximum BPS rate to use in Fax transmission.
            </summary>
            <value>The maximum transmission rate, expressed in bits per second.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.DeviceGroup">
            <summary>
            Fax port group name used to send Fax.
            </summary>
            <value>The device group.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.ResendCoverOnRetry">
            <summary>
            Boolean that indicates whether the cover page be sent again when re-attempting a failed Fax send operation.
            </summary>
            <value><see langword="true"/> if should resend cover on retry; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FaxTransmitOptions.StationId">
            <summary>
            Identification string to display to a remote station receiving a Fax.
            </summary>
            <value>The station ID.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.FileObject">
            <summary>
            Represents a single file embedded inside a structured file.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileObject"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.Close">
            <summary>
            Closes the handle to the file object and commits any changes.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.Flush">
            <summary>
            Commits any changes to the open file.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the open file.
            </summary>
            <param name="buffer">Buffer to read file bytes into.</param>
            <param name="offset">Offset in the file to start reading from.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>A count of the bytes read.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.ReadFromFile">
            <summary>
            Reads all bytes from the open file and returns them as a text string.
            </summary>
            <returns>The file contents.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.Save(System.String)">
            <summary>
            Saves the file using the provided file name.
            </summary>
            <param name="FileName">The filename to save this file under.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks to a particular location within the file.
            </summary>
            <param name="offset">The number of bytes from the origin to seek.</param>
            <param name="origin">The starting location for the seek operation.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.SetLength(System.Int64)">
            <summary>
            Sets the length of the file stream.
            </summary>
            <param name="Value">The new size to assign.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.FileObject.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the open file.
            </summary>
            <param name="buffer">Buffer to write file bytes from.</param>
            <param name="offset">Offset in the file to start writing at.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.CanRead">
            <summary>
            Indicates if the file can be read from.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.CanSeek">
            <summary>
            Indicates if the file supports seeking.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.CanWrite">
            <summary>
            Indicates if the file can be written to.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.FilePath">
            <summary>
            The full path of the file.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.FileStorage">
            <summary>
            The <see cref="T:ININ.IceLib.UnifiedMessaging.IStorage"/> interface for the file.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.FileStream">
            <summary>
            The <see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/> stream for the file.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.FileType">
            <summary>
            The type of data contained in this file.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.FileUrl">
            <summary>
            The URL to the file in the structured storage object.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.Length">
            <summary>
            The number of bytes contained in the file.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.FileObject.Position">
            <summary>
            The cursor position within the file.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper">
            <summary>
            Base class for implementing storage interface objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.#ctor">
            <summary>
            Constructs a new storage wrapper and initializes it's collection of file objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.FindObject(System.String,ININ.IceLib.UnifiedMessaging.StgElementType)">
            <summary>
            Searches the known objects residing in this storage file.
            </summary>
            <param name="pathName">Specifies the full pathname of the object being requested.</param>
            <param name="type">Specifies the type of the object being requested.</param>
            <returns>The requested object or <see langword="null"/> if the object doesn't exist.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.CreateStorage(System.String)">
            <summary>
            Creates a directory path by adding new storage objects into the existing structured storage file.
            </summary>
            <param name="pathName">The path of the storage to be created.  This path is specified using the directory separator '\'.</param>
            <remarks>Each path segment name cannot be longer than 31 characters.  This is a limitation of the IStorage interfaces.</remarks>
            <returns>The object containing the requested storage.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a segment of the path exceeds 31 characters.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.CreateStream(System.String)">
            <summary>
            Adds a new storage stream into the existing structured storage file.
            </summary>
            <param name="pathName">The full path and name of the storage to be created.</param>
            <remarks>Each path segment name (including the stream name) cannot be longer than 31 characters.  This is a limitation of the IStorage interfaces.</remarks>
            <returns>The object containing the new stream.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a segment of the path exceeds 31 characters or the path specifies a storage directory that doesn't exist.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.DestroyStream(ININ.IceLib.UnifiedMessaging.FileObject)">
            <summary>
            Removes a storage stream from the existing structured storage file.
            </summary>
            <param name="targetObj">The object that identifies the stream to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the target object specified is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the target object specified is not a valid stream.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.EnumIStorageObject(ININ.IceLib.UnifiedMessaging.IStorage)">
            <summary>
            Enumerates all storage and stream objects contained within the specified structured file.  Each IStorage and IStream object found is opened with exclusive access and added to the internal collection of objects.
            </summary>
            <param name="stgArgument">The IStorage structured file to search for objects.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.EnumIStorageObject(ININ.IceLib.UnifiedMessaging.IStorage,System.String)">
            <summary>
            Enumerates all storage and stream objects contained within the specified structured file.  Each IStorage and IStream object found is opened with exclusive access and added to the internal collection of objects.
            </summary>
            <param name="stgArgument">The IStorage structured file to search for objects.</param>
            <param name="BasePath">The file path within the structured file where a specific storage or stream object is located.  An empty string indicated that the object resides at the root of the structured storage.</param>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.foCollection">
            <summary>
            The file objects stored in the wrapped structured file.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.storage">
            <summary>
            The internal IStorage object contained within this wrapper.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.Dispose(System.Boolean)">
            <summary>
            Internal implementation for the Dispose, allowing it to be called by a finalizer if desired.
            </summary>
            <param name="disposing">Indicates if the object is being disposed.  <see langword="false"/> indicates the object is being finalized.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.Dispose">
            <summary>
            Commits changes and closes all open file objects and the managed IStorage.
            </summary>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.IBaseStorageWrapper.BaseUrl">
            <summary>
            The base URL for accessing objects in this structured file.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.IEnumSTATSTG">
            <summary>
            Import for COM IEnumSTATSTG interface that enumerates an array of STATSTG structures. These structures contain statistical data about open storage, stream, or byte array objects. IEnumSTATSTG has the same methods as all enumerator interfaces: Next, Skip, Reset, and Clone.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IEnumSTATSTG.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32@)">
            <summary>
            Gets a specified number of STATSTG structures.
            </summary>
            <param name="celt">The number of STATSTG structures requested.</param>
            <param name="rgVar">An array of STATSTG structures returned.</param>
            <param name="pceltFetched">The number of STATSTG structures retrieved in the rgVar parameter.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IEnumSTATSTG.Skip(System.Int32)">
            <summary>
            Skips a specified number of STATSTG structures in the enumeration sequence.
            </summary>
            <param name="celt"> The number of STATSTG structures to skip.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IEnumSTATSTG.Reset">
            <summary>
            Resets the enumeration sequence to the beginning of the STATSTG structure array.
            </summary>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IEnumSTATSTG.Clone(ININ.IceLib.UnifiedMessaging.IEnumSTATSTG@)">
            <summary>
            Creates a new enumerator that contains the same enumeration state as the current STATSTG structure enumerator.
            </summary>
            <param name="newEnum">Receives the IEnumSTATSTG interface pointer. If the method is unsuccessful, the value of the ppenum parameter is undefined.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.ILockBytes">
            <summary>
            Import for COM ILockBytes interface used by a COM compound file storage object to give its root storage access to the physical device, while isolating the root storage from the details of accessing the physical storage.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ILockBytes.ReadAt(System.Int64,System.IntPtr@,System.Int32)">
            <summary>
            Reads a specified number of bytes starting at a specified offset from the beginning of the byte array.
            </summary>
            <param name="ulOffset">Specifies the starting point from the beginning of the byte array for reading data.</param>
            <param name="pv">Pointer to the buffer into which the byte array is read. The size of this buffer is contained in cb.</param>
            <param name="cb">Specifies the number of bytes of data to attempt to read from the byte array.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ILockBytes.WriteAt(System.Int64,System.IntPtr,System.Int32)">
            <summary>
            Writes a specified number of bytes to a specified location in the byte array.
            </summary>
            <param name="ulOffset">Specifies the starting point from the beginning of the byte array for the data to be written.</param>
            <param name="pv">Pointer to the buffer containing the data to be written.</param>
            <param name="cb">Specifies the number of bytes of data to attempt to write into the byte array.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ILockBytes.Flush">
            <summary>
            Ensures that any internal buffers maintained by the byte array object are written out to the backing storage.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ILockBytes.SetSize(System.Int64)">
            <summary>
            Changes the size of the byte array.
            </summary>
            <param name="cb">Specifies the new size of the byte array as a number of bytes.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ILockBytes.LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Restricts access to a specified range of bytes in the byte array.
            </summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Specifies, in bytes, the length of the range to be restricted.</param>
            <param name="dwLockType">Specifies the type of restrictions being requested on accessing the range. This parameter uses one of the values from the LOCKTYPE enumeration.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ILockBytes.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Removes the access restriction on a range of bytes previously restricted with ILockBytes::LockRegion.
            </summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Specifies, in bytes, the length of the range that is restricted.</param>
            <param name="dwLockType">Specifies the type of access restrictions previously placed on the range. This parameter uses a value from the LOCKTYPE enumeration.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ILockBytes.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>
            Retrieves a STATSTG structure for this byte array object.
            </summary>
            <param name="pstatstg">A STATSTG structure in which this method places information about this byte array object. The pointer is <see langword="null"/> if an error occurs.</param>
            <param name="grfStatFlag">Specifies whether this method should supply the pwcsName member of the STATSTG structure through values taken from the STATFLAG enumeration. If the STATFLAG_NONAME is specified, the pwcsName member of STATSTG is not supplied, thus saving a memory-allocation operation. The other possible value, STATFLAG_DEFAULT, indicates that all members of the STATSTG structure be supplied.</param>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.IStorage">
            <summary>
            Import for COM IStorage interface.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.CreateStream(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and opens a stream object with the specified name contained in this storage object. The name must not exceed 31 characters in length.
            </summary>
            <param name="pwcsName">String that contains the name of the newly created stream.</param>
            <param name="grfMode">Specifies the access mode to use when opening the newly created stream.</param>
            <param name="reserved1">Reserved for future use; must be zero.</param>
            <param name="reserved2">Reserved for future use; must be zero.</param>
            <returns>A new IStream managed wrapper. This is only valid if the operation is successful. When an error occurs, this parameter is set to NULL.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.OpenStream(System.String,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Opens an existing stream object within this storage object using the specified access permissions in grfMode. The name must not exceed 31 characters in length.
            </summary>
            <param name="pwcsName">String that contains the name of the stream to open.</param>
            <param name="reserved1">Reserved for future use; must be zero.</param>
            <param name="grfMode">Specifies the access mode to be assigned to the open stream.</param>
            <param name="reserved2">Reserved for future use; must be zero.</param>
            <returns>A new IStream managed wrapper. This is only valid if the operation is successful. When an error occurs, this parameter is set to NULL.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.CreateStorage(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and opens a new storage object within this storage object. The name must not exceed 31 characters in length.
            </summary>
            <param name="pwcsName">String that contains the name of the newly created storage object. The name can be used later to reopen the storage object. The name must not exceed 31 characters in length.</param>
            <param name="grfMode">A value that specifies the access mode to use when opening the newly created storage object.</param>
            <param name="reserved1">Reserved for future use; must be zero.</param>
            <param name="reserved2">Reserved for future use; must be zero.</param>
            <returns>IStorage pointer to the newly created storage object. This parameter is set to NULL if an error occurs.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.OpenStorage(System.String,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Opens an existing storage object with the specified name according to the specified access mode. The name must not exceed 31 characters in length.
            </summary>
            <param name="pwcsName">String that contains the name of the storage object to open.</param>
            <param name="pstgPriority">Must be NULL. A non-NULL value will return STG_E_INVALIDPARAMETER.</param>
            <param name="grfMode">Specifies the access mode to use when opening the storage object.</param>
            <param name="snbExclude">Must be NULL. A non-NULL value will return STG_E_INVALIDPARAMETER.</param>
            <param name="reserved">Reserved for future use; must be zero.</param>
            <returns>IStorage pointer to the opened storage object. This parameter is set to NULL if an error occurs.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.CopyTo(System.Int32,System.Guid[],System.IntPtr,ININ.IceLib.UnifiedMessaging.IStorage)">
            <summary>
            Copies the entire contents of this open storage object into another storage object. The layout of the destination storage object may differ.
            </summary>
            <param name="ciidExclude">The number of elements in the array pointed to by rgiidExclude. If rgiidExclude is NULL, then ciidExclude is ignored.</param>
            <param name="rgiidExclude">An array of interface identifiers (IIDs) that either the caller knows about and does not want copied or that the storage object does not support, but whose state the caller will later explicitly copy. The array can include IStorage, indicating that only stream objects are to be copied, and IStream, indicating that only storage objects are to be copied. An array length of zero indicates that only the state exposed by the IStorage object is to be copied; all other interfaces on the object are to be ignored. Passing NULL indicates that all interfaces on the object are to be copied.</param>
            <param name="snbExclude">A string name block (refer to SNB) that specifies a block of storage or stream objects that are not to be copied to the destination. These elements are not created at the destination. If IID_IStorage is in the rgiidExclude array, this parameter is ignored.</param>
            <param name="pstgDest">A pointer to the open storage object into which this storage object is to be copied. The destination storage object can be a different implementation of the IStorage interface from the source storage object. Thus, IStorage::CopyTo can use only publicly available methods of the destination storage object. If pstgDest is open in transacted mode, it can be reverted by calling its IStorage::Revert method.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.MoveElementTo(System.String,ININ.IceLib.UnifiedMessaging.IStorage,System.String,System.Int32)">
            <summary>
            Copies or moves a substorage or stream from this storage object to another storage object.
            </summary>
            <param name="pwcsName">String that contains the name of the element in this storage object to be moved or copied.</param>
            <param name="pstgDest">IStorage pointer to the destination storage object.</param>
            <param name="pwcsNewName">String that contains the new name for the element in its new storage object.</param>
            <param name="grfFlags">Specifies whether the operation should be a move (STGMOVE_MOVE) or a copy (STGMOVE_COPY).</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.Commit(System.Int32)">
            <summary>
            Reflects changes for a transacted storage object to the parent level.
            </summary>
            <param name="grfCommitFlags">Controls how the changes are committed to the storage object.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.Revert">
            <summary>
            Discards all changes that have been made to the storage object since the last commit operation.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.EnumElements(System.Int32,System.IntPtr,System.Int32,ININ.IceLib.UnifiedMessaging.IEnumSTATSTG@)">
            <summary>
            Returns an enumerator object that can be used to enumerate the storage and stream objects contained within this storage object.
            </summary>
            <param name="reserved1">Reserved for future use; must be zero.</param>
            <param name="reserved2">Reserved for future use; must be zero.</param>
            <param name="reserved3">Reserved for future use; must be zero.</param>
            <param name="ppenum">IEnumSTATSTG variable that receives the interface pointer to the new enumerator object.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.DestroyElement(System.String)">
            <summary>
            Removes the specified storage or stream from this storage object.
            </summary>
            <param name="pwcsName">String that contains the name of the storage or stream to be removed.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.RenameElement(System.String,System.String)">
            <summary>
            Renames the specified storage or stream in this storage object.
            </summary>
            <param name="pwcsOldName">String that contains the name of the substorage or stream to be changed.</param>
            <param name="pwcsNewName">String that contains the new name for the specified substorage or stream.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.SetElementTimes(System.String,System.Runtime.InteropServices.ComTypes.FILETIME,System.Runtime.InteropServices.ComTypes.FILETIME,System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>
            Sets the modification, access, and creation times of the indicated storage element, if supported by the underlying file system.
            </summary>
            <param name="pwcsName">The name of the storage object element whose times are to be modified. If NULL, the time is set on the root storage rather than one of its elements.</param>
            <param name="pctime">Either the new creation time for the element or NULL if the creation time is not to be modified.</param>
            <param name="patime">Either the new access time for the element or NULL if the access time is not to be modified.</param>
            <param name="pmtime">Either the new modification time for the element or NULL if the modification time is not to be modified.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.SetClass(System.Guid@)">
            <summary>
            Assigns the specified CLSID to this storage object.
            </summary>
            <param name="clsid">The CLSID that is to be associated with the storage object.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.SetStateBits(System.Int32,System.Int32)">
            <summary>
            Stores up to 32 bits of state information in this storage object.
            </summary>
            <param name="grfStateBits">Specifies the new values of the bits to set. No legal values are defined for these bits; they are all reserved for future use and must not be used by applications.</param>
            <param name="grfMask">A binary mask indicating which bits in grfStateBits are significant in this call.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorage.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>
            Returns the STATSTG structure for this open storage object.
            </summary>
            <param name="pStatStg">a STATSTG structure where this method places information about the open storage object. This parameter is NULL if an error occurs.</param>
            <param name="grfStatFlag">Specifies that some of the members in the STATSTG structure are not returned, thus saving a memory allocation operation.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.IStorageWrapper">
            <summary>
            Native wrapper for accessing an IStorage structured file object.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorageWrapper.Open(System.String,System.Boolean)">
            <summary>
            Constructs a new IStorageWrapper object by opening an existing structured storage file.
            </summary>
            <param name="workPath">Full path for the structured storage file to open.</param>
            <param name="readOnly">Indicates if the storage object should be opened in read-only mode.</param>
            <returns>A new <see cref="T:ININ.IceLib.UnifiedMessaging.IStorageWrapper"/> object containing the contents of the specified file.</returns>
            <remarks>Read-only mode should generally be used when opening the storage object with the intent to copy its contents to another object.  When read-only mode is not specified the open operation will be attempted with exclusive access which could prevent it from opening successfully.</remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorageWrapper.Create(System.String)">
            <summary>
            Constructs a new IStorageWrapper object by building a new empty structured storage file.
            </summary>
            <param name="workPath">Full path for the structured storage file to create.</param>
            <returns>A new empty <see cref="T:ININ.IceLib.UnifiedMessaging.IStorageWrapper"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.IStorageWrapper.CopyTo(ININ.IceLib.UnifiedMessaging.IStorageWrapper)">
            <summary>
            Copys the contents of the open managed IStorage object to the destination wrapper.
            </summary>
            <remarks>When copying a stream on top of an existing stream with the same name, the existing stream is first removed and then replaced with the source stream. When copying a storage on top of an existing storage with the same name, the existing storage is not removed. As a result, after the copy operation, the destination IStorage contains older elements, unless they were replaced by newer ones with the same names.</remarks>
            <param name="dest">The destination <see cref="T:ININ.IceLib.UnifiedMessaging.IStorageWrapper"/> to copy to.</param>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.ITS_Control_Data">
            <summary>
            ITStorage control data structure.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.ITStorage">
            <summary>
            Import for COM ITStorage interface.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.StgCreateDocfile(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new compound file storage object using the COM-provided compound file implementation for the IStorage interface.
            </summary>
            <param name="pwcsName">A null-terminated Unicode string name for the compound file being created. It is passed uninterpreted to the file system. This can be a relative name or NULL. If NULL, a temporary compound file is allocated with a unique name.</param>
            <param name="grfMode">Specifies the access mode to use when opening the new storage object.</param>
            <param name="reserved">Reserved for future use; must be zero.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.StgCreateDocfileOnILockBytes(ININ.IceLib.UnifiedMessaging.ILockBytes,System.Int32,System.Int32)">
            <summary>
            Creates and opens a new compound file storage object on top of a byte-array object provided by the caller.
            </summary>
            <param name="plkbyt">ILockBytes interface on the underlying byte-array object on which to create a compound file.</param>
            <param name="grfMode">Specifies the access mode to use when opening the new compound file.</param>
            <param name="reserved">Reserved for future use; must be zero.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.StgIsStorageFile(System.String)">
            <summary>
            Indicates whether a particular disk file contains a storage object.
            </summary>
            <param name="pwcsName">The null-terminated Unicode string name of the disk file to be examined.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.StgIsStorageILockBytes(ININ.IceLib.UnifiedMessaging.ILockBytes)">
            <summary>
            Indicates whether the specified byte array contains a storage object.
            </summary>
            <param name="plkbyt">ILockBytes pointer to the byte array to be examined.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.StgOpenStorage(System.String,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Opens an existing root storage object in the file system.
            </summary>
            <param name="pwcsName">The path of the null-terminated Unicode string file that contains the storage object to open.</param>
            <param name="pstgPriority">Most often NULL. If not NULL, this parameter is used instead of the pwcsName parameter to specify the pointer to the IStorage interface on the storage object to open.</param>
            <param name="grfMode">Specifies the access mode to use to open the storage object.</param>
            <param name="snbExclude">If not NULL, pointer to a block of elements in the storage to be excluded as the storage object is opened.</param>
            <param name="reserved">Indicates reserved for future use; must be zero.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.StgOpenStorageOnILockBytes(ININ.IceLib.UnifiedMessaging.ILockBytes,ININ.IceLib.UnifiedMessaging.IStorage,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Opens an existing storage object that does not reside in a disk file, but instead has an underlying byte array provided by the caller.
            </summary>
            <param name="plkbyt">ILockBytes pointer to the underlying byte array object that contains the storage object to be opened.</param>
            <param name="pStgPriority">Most often NULL. If not NULL, this parameter is used instead of the plkbyt parameter to specify the storage object to open.</param>
            <param name="grfMode">Specifies the access mode to use to open the storage object.</param>
            <param name="snbExclude">Can be NULL. If not NULL, this parameter points to a block of elements in this storage that are to be excluded as the storage object is opened.</param>
            <param name="reserved">Indicates reserved for future use; must be zero.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.StgSetTimes(System.String,System.Runtime.InteropServices.ComTypes.FILETIME,System.Runtime.InteropServices.ComTypes.FILETIME,System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>
            Sets the creation, access, and modification times of the indicated file, if supported by the underlying file system.
            </summary>
            <param name="lpszName">Name of the file to be changed.</param>
            <param name="pctime">New value for the creation time.</param>
            <param name="patime">New value for the access time.</param>
            <param name="pmtime">New value for the modification time.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.SetControlData(ININ.IceLib.UnifiedMessaging.ITS_Control_Data)">
            <summary>
            See the Windows API documenation for more information.
            </summary>
            <param name="pControlData">The control data.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.DefaultControlData(ININ.IceLib.UnifiedMessaging.ITS_Control_Data)">
            <summary>
            See the Windows API documenation for more information.
            </summary>
            <param name="ppControlData">The control data.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.ITStorage.Compact(System.String,ININ.IceLib.UnifiedMessaging.CompactionLevel)">
            <summary>
            Compacts a strcutured storage file.  See the windows API documentation for more information.
            </summary>
            <param name="pwcsName">The name.</param>
            <param name="iLev">The compaction level.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.Localization">
            <summary>
            Helper class for accessing string from resource files.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.Localization.LoadString(ININ.IceLib.Connection.Session,System.String)">
            <summary>
            Loads a string resource, localized according to the cultureInfo associated with <paramref name="session"/>.
            </summary>
            <param name="session">The session for which to load the resource.</param>
            <param name="resourceId">The resource ID.</param>
            <returns>The localized string resource.</returns>
            <seealso cref="T:ININ.IceLib.Connection.Session"/>
            <seealso cref="P:ININ.IceLib.Connection.SessionSettings.IsoLanguage"/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.Localization.LoadString(System.Globalization.CultureInfo,System.String)">
            <summary>
            Loads a string resource, localized according to <paramref name="cultureInfo"/>.
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <param name="resourceId">The resource ID.</param>
            <returns>The localized string resource.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.Localization.LoadStringWithThreadCulture(System.String)">
            <summary>
            Don't use this if <see cref="M:ININ.IceLib.UnifiedMessaging.Localization.LoadString(ININ.IceLib.Connection.Session,System.String)"/> can be used instead!
            </summary>
            <param name="resourceId">The resource ID.</param>
            <returns>The localized string resource.</returns>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.NamespaceDoc">
            <summary>
            <para>The <B>ININ.IceLib.UnifiedMessaging</B> namespace contains classes for 
            manipulating and managing Interaction Center Voicemails and Faxes.</para>
            <para>
            <B><FONT size="+1">Working with Voicemails</FONT></B>
            </para>
            <para>
            The voicemail functionality is implemented by classes that allow you to 
            manage and playback voice messages received by an IC server as well as to 
            monitor for new incoming messages.
            </para>
            <para><B>Voicemail Retrieval</B></para>
            <para>
            A list of current voicemail messages can be retrieved via the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Voicemails"/> property on the <see cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/> class.
            To populate this list, the local Voicemail Cache must first be refreshed by calling <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/>.  A call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/>
            can be made at any time.  Refreshing the cache will cause the following events to be fired, if applicable:  <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewVoicemail"/>, <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdated"/>, or <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailDeleted"/>.
            </para>
            <para><B>Voicemail Playback</B></para>
            <para>
            The primary playback functionality is available through the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> class.
            This class allows a developer to play a voice message to any of the following locations:
            <list type="bullet">
            <item>
            <term>Telephone Handset (<see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToHandset(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Boolean)"/>)</term>
            <description>
            The handset associated with the station a user is currently logged into. 
            In the case of SIP audio this handset would be speakers or headphones.
            In a traditional phone setup the handset is typically a phone receiver.</description>
            </item>
            <item>
            <term>Number (<see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToNumber(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)"/>)</term>
            <description>A remote phone number</description>
            </item>
            <item>
            <term>Station (<see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToStation(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)"/>)</term>
            <description>A station defined in IC</description>
            </item>
            </list>
            </para>
            <para>
            An instance of a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> contains zero or more <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> items.
            Each <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> represents an attachment to the voicemail
            that can be downloaded to a local file by calling <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean)"/>.<br/><br/>
            </para>
            <note>A <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/>
            may <I>(or may not)</I> reference an audio file. When unified messaging is employed such that voicemails 
            are stored within email messages, other arbitrary files can be added to the email (and show up as 
            a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/>).</note>
            <example>
            <para>The example below iterates the list of available voicemail messages and downloads each 
            message to a new local file. It is <B>not</B> recommended to use synchronous methods in client applications,
            nor is it recommended to download all voicemail files in this manner. This is purely a syntax usage example only.<br/><br/></para>
            <code lang="C#">
            // "session" is a valid ININ.IceLib.Connection.Session instance.
            UnifiedMessagingManager manager = UnifiedMessagingManager.GetInstance(session);
            manager.RefreshVoicemailCache(-1);
            foreach (VoicemailMessage message in manager.Voicemails)
            {
              foreach (VoicemailAttachment attachment in message.Attachments)
              {
                string fileName = System.IO.Path.GetTempFileName();
                message.SaveAsFile(attachment, fileName, false /* Don't mark as read */);
              }
            }
            </code>
            </example>
            <para>
            <B><FONT size="+1">Working with Faxes</FONT></B>
            </para>
            <para>
            The Fax functionality consists of a set of classes that allow you to manipulate
            and submit Faxes to an IC server for delivery, monitor all outgoing Fax activity
            for a logged-in user, and manage and download Fax messages received by an IC server.
            </para>
            <para><B>Fax Retrieval</B></para>
            <para>
            A list of current Fax messages can be retrieved via the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Faxes"/> property on the <see cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/> class.
            To populate this list, the local Fax Cache must first be refreshed by calling <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCache(System.Int32)"/>.  A call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCache(System.Int32)"/>
            can be made at any time.  Refreshing the cache will cause the following events to be fired, if applicable:  <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewFax"/>, <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxUpdated"/>, or <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxDeleted"/>.
            </para>
            <para>
            An instance of a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxMessage"/> contains zero or more <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/> items.
            Each <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/> represents an attachment to the Fax message
            that can be downloaded to a local file by calling <see cref="M:ININ.IceLib.UnifiedMessaging.FaxMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.FaxAttachment,System.String,System.Boolean)"/>.<br/><br/>
            </para>
            <note>A <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/>
            may <I>(or may not)</I> reference a Fax file. When unified messaging is employed such that Faxes 
            are stored within email messages, other arbitrary files can be added to the Email (and show up as 
            a <see cref="T:ININ.IceLib.UnifiedMessaging.FaxAttachment"/>).</note>
            <example>
            The example below iterates the list of available Fax messages and downloads each 
            message to a new local file. It is <B>not</B> recommended to use synchronous methods in client applications,
            nor is it recommended to download all Fax files in this manner. This is purely a syntax usage example only.<br/><br/>
            <code lang="C#">
            // "session" is a valid ININ.IceLib.Connection.Session instance.
            UnifiedMessagingManager manager = UnifiedMessagingManager.GetInstance(session);
            manager.RefreshFaxCache(-1);
            foreach (FaxMessage message in manager.Faxes)
            {
              foreach (FaxAttachment attachment in message.Attachments)
              {
                string fileName = System.IO.Path.GetTempFileName();
                message.SaveAsFile(attachment, fileName, false /* Don't mark as read */);
              }
            }
            </code>
            </example>
            <para><B>Fax Sending and Monitoring</B></para>
            <para>
            Functionality that includes sending and monitoring Interaction Faxes are separated into a collection of <see cref="T:System.Drawing.Image">Images</see>, 
            <see cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes">Attributes</see> and <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope">Envelopes</see> all available through a central class, <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/>.
            </para>
            <para>
            In addition to the viewing and editing capability exposed through the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/>,
            you also have the ability to send a Fax through the IC server.  Faxes are addressed by
            using the <see cref="M:ININ.IceLib.UnifiedMessaging.FaxFile.AddEnvelope(ININ.IceLib.UnifiedMessaging.FaxEnvelope)"/> method on the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/> to add a
            new <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelope"/>. Once a Fax has been assigned one or more envelopes, it is
            ready to be used in a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFax(System.String)"/>
            to have it submitted to the IC server for delivery.
            </para>
            <para>
            Monitoring the status of outgoing Faxes is enabled through a call to
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/>. An application that
            has enabled monitoring for an IC user will periodically receive
            <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxMonitorUpdate"/> events to indicate the
            state of each Fax being processed on the IC server on behalf of that user.
            </para>
            <br/>
            <example> The following example demonstrates the processing of an incoming <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxMonitorUpdate"/> event.<br/><br/>
            <code lang="C#">
            ...
            private delegate void UpdateStatusListDel(FaxStatus statusUpdate);
            
            private void FaxMonitorUpdateHandler(object sender, FaxMonitorUpdateEventArgs e)
            {
            	if (this.InvokeRequired)
            	{
            		UpdateStatusListDel del = new UpdateStatusListDel(UpdateStatusList);
            		this.BeginInvoke(del, new object[]{e.FaxStatus});
            	}
            	else
            	{
            		UpdateStatusList(e.FaxStatus);
            	}
            }
            
            private void UpdateStatusList(FaxStatus statusUpdate)
            {
            	if (statusUpdate.Code == FaxStatusCode.None)
            	{
            		// Ignoring update for invalid status.
            		return;
            	}
            
            	// Search for a row containing the envelope ID.  If we don't find it
            	// then add a new row, otherwise update the current line
            	ListViewItem newItem = null;
            	BuildListItem(statusUpdate, out newItem);
            
            	int nItemIdx = FindEnvelopeInList(statusUpdate.EnvelopeId);
            	if (nItemIdx != -1)
            	{
            		// Replacing envelope at nItemIdx with new item
            		statusList.Items[nItemIdx] = newItem;
            	}
            	else
            		statusList.Items.Add(newItem);
            }
            
            private int FindEnvelopeInList(Int64 searchId)
            {
            	int nEnvelopeIndex = -1;
            	lock (statusList.Items)
            	{
            		foreach (ListViewItem currentItem in this.statusList.Items)
            		{
            			Int64 envelopeId = (Int64)currentItem.Tag;
            			if (searchId == envelopeId)
            			{
            				nEnvelopeIndex = this.statusList.Items.IndexOf(currentItem);
            				break;
            			}
            		}
            	}
            
            	return nEnvelopeIndex;
            }
            </code>
            </example>
            </summary>
            <doccompleted/>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.NativeMethods">
            <summary>
            Class wrapper for imported Win32 API functions.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.NativeMethods.StgOpenStorage(System.String,ININ.IceLib.UnifiedMessaging.IStorage,System.Int32,System.IntPtr,System.Int32,ININ.IceLib.UnifiedMessaging.IStorage@)">
            <summary>
            Opens an existing root storage object in the file system. Use this function to open compound files. Do not use it to open directories, files, or summary catalogs. Nested storage objects can only be opened using their parent IStorage::OpenStorage method.
            </summary>
            <param name="wcsName">String that contains the storage object to open. This parameter is ignored if the pstgPriority parameter is not NULL.</param>
            <param name="pstgPriority">Most often NULL. If not NULL, this parameter is used instead of the pwcsName parameter to specify the pointer to the IStorage interface on the storage object to open. It points to a previous opening of a root storage object, most often one that was opened in priority mode.</param>
            <param name="grfMode">Specifies the access mode to use to open the storage object.</param>
            <param name="snbExclude">If not NULL, pointer to a block of elements in the storage to be excluded as the storage object is opened. The exclusion occurs regardless of whether a snapshot copy happens on the open. Can be NULL.</param>
            <param name="reserved">Indicates reserved for future use; must be zero.</param>
            <param name="storage">A IStorage pointer variable that receives the interface pointer to the opened storage.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.NativeMethods.StgCreateDocfile(System.String,System.Int32,System.Int32,ININ.IceLib.UnifiedMessaging.IStorage@)">
            <summary>
            Creates a new compound file storage object using the COM-provided compound file implementation for the IStorage interface.
            </summary>
            <param name="wcsName">String name for the compound file being created.</param>
            <param name="grfMode">Specifies the access mode to use when opening the new storage object.</param>
            <param name="reserved">Indicates reserved for future use; must be zero.</param>
            <param name="storage">A pointer to the location of the IStorage pointer to the new storage object.</param>
            <returns>COM HRESULT.</returns>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.PageResolution">
            <summary>
            Represent the vertical and horizontal resolution of a Fax Page.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.PageResolution.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new PageResolution structure with the provided resolution.
            </summary>
            <param name="horizontal">The horizontal resolution (pixels-per-inch).</param>
            <param name="vertical">The vertical resolution (pixels-per-inch).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">A parameter value was invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.PageResolution.Vertical">
            <summary>
            The vertical resolution (pixels-per-inch).
            </summary>
            <value>The vertical resolution.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.PageResolution.Horizontal">
            <summary>
            The horizontal resolution (pixels-per-inch).
            </summary>
            <value>The horizontal resolution.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.RateLimitedException">
            <summary>
            The exception that is thrown when requests to refresh a voicemail or fax have been sent too frequently.
            </summary>
            <remarks>
            <para>
            This exception is thrown when requests to refresh a voicemail or fax are being sent too frequently.
            </para>
            <para>Like all IceLib-specific exceptions, this object derives from <see cref="T:ININ.IceLib.IceLibException"/>,
            allowing consistent exception handling for all such exceptions.
            </para>
            </remarks>
            <doccompleted/>
            <icversion>4.0 SU 4</icversion>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.RateLimitedException.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/> class.
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/> class with default settings.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.RateLimitedException.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/> class with default settings.
            </summary>
            <param name="cultureInfo">The culture info for which to load the resource.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.RateLimitedException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/> class with a specified error message.
            </summary>
            <param name="innerException">
            The exception that is the cause of the current exception. If the <paramref name="innerException"/> 
            parameter is not <see langword="null"/>, the current exception is raised in a <b>catch</b> block that 
            handles the inner exception.
            </param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.RateLimitedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.RateLimitedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not <see langword="null"/>, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.RateLimitedException.#ctor(System.Globalization.CultureInfo,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/> class with a 
            specified error message.
            </summary>
            <param name="cultureInfo">The culture info for which to load the resource.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the <paramref name="innerException"/> 
            parameter is not <see langword="null"/>, the current exception is raised in a <b>catch</b> block that 
            handles the inner exception.
            </param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.RateLimitedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/> class with a 
            specified error message.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data 
            about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.RateLimitedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.RetryStrategyType">
            <summary>
            Determines the strategy employed on how a fax should be resent.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.RetryStrategyType.All">
            <summary>
            Resend all pages.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.RetryStrategyType.Incomplete">
            <summary>
            Resend only incomplete pages.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.StgAccessMode">
            <summary>
            The StgAccessMode values are used in the creation or opening of structured storage files to specify access rights, file sharing, etc.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgAccessMode.Read">
            <summary>
            Indicates that the object is read-only, meaning that modifications cannot be made.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgAccessMode.ReadWrite">
            <summary>
            Lets you both access and modify object data.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgAccessMode.ShareExclusive">
            <summary>
            Prevents others from subsequently opening the object in any mode.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgAccessMode.ShareDenyWrite">
            <summary>
            Prevents others from subsequently opening the object in write mode.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgAccessMode.ShareDenyNone">
            <summary>
            Specifies that subsequent openings of the object are not denied read or write access.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgAccessMode.Create">
            <summary>
            Indicates that an existing storage object or stream should be removed before the new object replaces it. A new object is created when this flag is specified only if the existing object has been successfully removed.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgAccessMode.Direct">
            <summary>
            In direct mode, each change to a storage or stream element is written as it occurs. This is the default if neither Direct nor Transacted is specified.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgAccessMode.DeleteOnRelease">
            <summary>
            Indicates that the underlying file is to be automatically destroyed when the root storage object is released. This feature is most useful for creating temporary files.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.StgElementType">
            <summary>
            Indicates the type of a storage element.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgElementType.Storage">
            <summary>
            Indicates that the storage element is a storage object.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgElementType.Stream">
            <summary>
            Indicates that the storage element is a stream object.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgElementType.LockBytes">
            <summary>
            Indicates that the storage element is a byte-array object.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgElementType.Property">
            <summary>
            Indicates that the storage element is a property storage object.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.StgErrors">
            <summary>
            Common IStorage interface error definitions.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgErrors.None">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgErrors.FileNotFound">
            <summary>
            The file was not found.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StgErrors.InvalidName">
            <summary>
            The name is invalid.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.StorageFormat">
            <summary>
            Indicates the storage format used when loading or saving Fax data in files.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StorageFormat.ByExtension">
            <summary>
            Use the file extension to determine the file format.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StorageFormat.I3F">
            <summary>
            I3F encoded fax.
            </summary>
        </member>
        <member name="F:ININ.IceLib.UnifiedMessaging.StorageFormat.Tiff">
            <summary>
            Multipage Tiff encoded fax.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager">
            <summary>
            Provides access to the UnifiedMessaging namespace.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/> class to access the functionality
            found in the <see cref="N:ININ.IceLib.UnifiedMessaging"/> namespace.
            </para>
            <para>
            The <see cref="N:ININ.IceLib.UnifiedMessaging"/> namespace includes all functionality for manipulating
            Fax and voicemail data managed by an IC server.  Most features provided in
            the <see cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/> are available in synchronous and
            asynchronous versions, allowing you to choose the model that best suits your
            needs.
            </para>
            <br/>
            <example>
            All "manager" classes found in the IceLib library are designed as
            singletons. To begin working with any of the functionality provided in
            the <see cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/> you must obtain the instance
            through a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetInstance(ININ.IceLib.Connection.Session)"/>.<br/><br/>
            <code lang="C#">
            Session session = new Session();
            session.Connect(...);
            UnifiedMessagingManager unifiedMessagingManager = UnifiedMessagingManager.GetInstance(session);
            </code>
            </example>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetInstance(ININ.IceLib.Connection.Session)">
            <summary>
            Gets a UnifiedMessagingManager.
            </summary>
            <param name="session">The Session with which it is associated.</param>
            <returns>The UnifiedMessagingManager.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)">
            <summary>
            Issues an synchronous request to enable or disable monitoring of Fax server events.
            </summary>
            <param name="enabled">Should monitoring be turned on.</param>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to enable or disable monitoring of Fax server events.
            </summary>
            <param name="enabled">Should monitoring be turned on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks><ininAsyncMethodNote /></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFax(System.String)">
            <summary>Issues a synchronous request to send a Fax.</summary>
            <param name="fileName">The file name of the Fax to send.</param>
            <returns>A <see cref="T:ININ.IceLib.UnifiedMessaging.FaxResult"/> object with the results of the SendFax method.</returns>
            <exception cref="T:System.ArgumentException">If a <c>fileName</c> of length zero.</exception>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <ConnectionExceptions/>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/> class to create a .TIF or .i3f
            formatted Fax file in the file system before sending.
            </para>
            <para><note>
            Most fax terminals can't handle widths larger than 1728 pixels. If the width
            of the <see cref="T:System.Drawing.Image"/> will exceed 1728 pixels, it is recommended to
            store the image in portrait orientation and set the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
            instance to indicate that the image has been rotated.<br/>
            This can also be handled by specifying <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage"/> when adding or updating pages.
            This will cause the image to be scaled to fit on the page.  If <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage"/> is not
            specified, no resizing will be done and the image will be cropped.
            </note></para>
            </remarks>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFaxAsync(System.String,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSendFaxCompletedEventArgs},System.Object)">
            <summary>
            Issues an asynchronous request to send a Fax.
            </summary>
            <param name="fileName">The file name of the Fax to send.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If a <c>fileName</c> of length zero.</exception>
            <remarks>
            <para>
            Use the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/> class to create a .TIF or .i3f
            formatted Fax file in the file system before sending.
            </para>
            <para><note>
            Most fax terminals can't handle widths larger than 1728 pixels. If the width
            of the <see cref="T:System.Drawing.Image"/> will exceed 1728 pixels, it is recommended to
            store the image in portrait orientation and set the <see cref="T:ININ.IceLib.UnifiedMessaging.FaxPageAttributes"/>
            instance to indicate that the image has been rotated.<br/>
            This can also be handled by specifying <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage"/> when adding or updating pages.
            This will cause the image to be scaled to fit on the page.  If <see cref="F:ININ.IceLib.UnifiedMessaging.FaxImageSettings.FitToPage"/> is not
            specified, no resizing will be done and the image will be cropped.
            </note></para>
            <ininAsyncMethodNote/>
            </remarks>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.FaxFile"/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.SendFaxInternal(System.String)">
            <summary>
            Sends a Fax.
            </summary>
            <param name="fileName">The full local pathname of the file to submit for Faxing.</param>
            <returns>The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxResult"/> that was returned.</returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.BeginSendFax(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to send a Fax.
            </summary>
            <param name="fileName">The full local pathname of the file to submit for Faxing.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state"><ininAsyncStateParam/></param>
            <returns>
            An IAsyncResult that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EndSendFax(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous request to send a Fax.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined 
            data for this asynchronous operation.</param>
            <returns>The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxResult"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxServerSettings">
            <summary>
            Issues a synchronous request to retrieve the Fax configuration settings on the IC server.
            </summary>
            <returns>A <see cref="T:ININ.IceLib.UnifiedMessaging.FaxServerSettings"/> object with the Fax 
            configuration settings on the IC server.</returns>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxServerSettingsAsync(System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxServerSettingsCompletedEventArgs},System.Object)">
            <summary>
            Issues an asynchronous request to retrieve the Fax configuration settings on the IC server.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks><ininAsyncMethodNote /></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.CancelFax(System.Int64)">
            <summary>
            Issues a synchronous request to cancel a fax.
            </summary>
            <param name="envelopeId">The envelope ID of the fax.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument isn't in the expected range.</exception>
            <icversion>3.0 SU 1</icversion>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.CancelFaxAsync(System.Int64,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to cancel a fax.
            </summary>
            <param name="envelopeId">The envelope ID of the fax.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument isn't in the expected range.</exception>
            <icversion>3.0 SU 1</icversion>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxProperties(System.Int64)">
            <summary>
            Issues a synchronous request to get the fax envelope properties for a fax in progress.
            </summary>
            <param name="envelopeId">The envelope ID of the fax.</param>
            <returns>The <see cref="T:ININ.IceLib.UnifiedMessaging.FaxEnvelopeProperties"/> for this fax.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument isn't in the expected range.</exception>
            <icversion>3.0 SU 1</icversion>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.GetFaxPropertiesAsync(System.Int64,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncGetFaxPropertiesEventArgs},System.Object)">
            <summary>
            Issues an asynchronous request to get the envelope properties of a fax in progress.
            </summary>
            <param name="envelopeId">The envelope ID of the fax for which properties are requested.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument isn't in the expected range.</exception>
            <icversion>3.0 SU 1</icversion>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCache(System.Int32)">
            <summary>
            Issues a synchronous request to refresh the fax cache.
            </summary>
            <remarks>
            Any subsequent calls to this method or its async version (<see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>) within a 5 second period will be rejected with a <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/>.
            This restriction is per message type, a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCache(System.Int32)"/> followed by a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/> or <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> within a 5 second period will be successful.
            </remarks>
            <param name="maxMessages">The number of messages to refresh, -1 to refresh them all.</param>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">There was an error refreshing the list or this method was called more than once within a 5 second period.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to refresh the fax cache.
            </summary>
            <remarks>
            Any subsequent calls to this method or its synchronous version (<see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCache(System.Int32)"/>) within a 5 second period will be rejected with a <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/>.
            This restriction is per message type, a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> followed by a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/> or <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> within a 5 second period will be successful.
            </remarks>
            <param name="maxMessages">The number of messages to refresh, -1 to refresh them all.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting">
            <summary>
            Issues a synchronous request to watch for waiting voicemails.
            </summary>
            <remarks>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to watch for waiting voicemails.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks>
            <ininAsyncMethodNote/>
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StopWatchingVoicemailWaiting">
            <summary>
            Issues a synchronous request to stop watching for waiting voicemails.
            </summary>
            <remarks>
            <ininHowWatchesWork/>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StopWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to stop watching for waiting voicemails.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <ininAsyncMethodNote />
            <ininHowWatchesWork />
            </remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StopVoicemailHandsetPlayback">
            <summary>
            Issues a synchronous request to stop voicemail playback on the handset.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StopVoicemailHandsetPlaybackAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asychronous request to stop voicemail playback on the handset.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks>
            <ininAsyncMethodNote />
            </remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)">
            <summary>
            Issues a synchronous request to refresh the voicemail cache.
            </summary>
            <remarks>
            Any subsequent calls to this method or its async version (<see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>) within a 5 second period will be rejected with a <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/>.
            This restriction is per message type, a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/> followed by a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCache(System.Int32)"/> or <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> within a 5 second period will be successful.
            </remarks>
            <param name="maxMessages">The number of messages to refresh, -1 to refresh them all.</param>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">There was an error refreshing the list or this method was called more than once within a 5 second period.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to refresh the voicemail cache.
            </summary>
            <remarks>
            Any subsequent calls to this method or its synchronous version (<see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/>) within a 5 second period will be rejected with a <see cref="T:ININ.IceLib.UnifiedMessaging.RateLimitedException"/>.
            This restriction is per message type, a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> followed by a call to <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCache(System.Int32)"/> or <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshFaxCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> within a 5 second period will be successful.
            </remarks>
            <param name="maxMessages">The number of messages to refresh, -1 to refresh them all.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.UpdateMessageWaitingIndicator(System.Int32)">
            <summary>
            Issues a synchronous request to update the message waiting indicator.
            </summary>
            <param name="actualMessageCount">The count of messages, or -1 to force the server to compute the count.</param>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.UpdateMessageWaitingIndicatorAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to update the message waiting indicator.
            </summary>
            <param name="actualMessageCount">The count of messages, or -1 to force the server to compute the count.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam /></param>
            <remarks><ininAsyncMethodNote /></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.XML_UnknownNode(System.Object,System.Xml.Serialization.XmlNodeEventArgs)">
            <summary>
            Handler for XML parser when an Unknown Node is encountered.
            </summary>
            <param name="sender">The object sending the event message.</param>
            <param name="e">XML Node data for the Unknown Node event.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.XML_UnknownAttribute(System.Object,System.Xml.Serialization.XmlAttributeEventArgs)">
            <summary>
            Handler for XML parser when an Unknown Attribute is encountered.
            </summary>
            <param name="sender">The object sending the event message.</param>
            <param name="e">XML Node data for the Unknown Attribute event.</param>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Session">
            <summary>
            Gets the Session with which this UnifiedMessagingManager is associated.
            </summary>
            <value>The session.</value>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxMonitorUpdate">
            <summary>
            Occurs when monitoring is turned on and a Fax event is detected.
            </summary>
            <remarks>
            This event will only occur if faxes are being monitored. To start monitoring
            faxes call either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewFax">
            <summary>
            Occurs when a new fax is received.
            </summary>
            <remarks>
            This event will only occur if faxes are being monitored. To start monitoring
            faxes call either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxDeleted">
            <summary>
            Occurs when a fax is deleted.
            </summary>
            <remarks>
            This event will only occur if faxes are being monitored. To start monitoring
            faxes call either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.FaxUpdated">
            <summary>
            Occurs when a fax is modified.
            </summary>
            <remarks>
            This event will only occur if faxes are being monitored. To start monitoring
            faxes call either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoring(System.Boolean)"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.EnableFaxMonitoringAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Faxes">
            <summary>
            Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of all FaxMessages.
            </summary>
            <value>The fax messages.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailWaiting">
            <summary>
            Gets the existence of waiting (unread) voicemails.
            </summary>
            <remarks>
            <ininWatchRequired/>
            </remarks>
            <value><see langword="true"/> if a voicemail is waiting; otherwise, <see langword="false"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">VoicemailWaiting not being watched.</exception>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailWaitingChanged">
            <summary>
            Occurs when the VoicemailWaiting value changes.
            </summary>
            <remarks>
            This event will only occur if voicemails are being watched. To start watching
            voicemails either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewVoicemail">
            <summary>
            Occurs when a new voicemail is received.
            </summary>
            <remarks>
            This event will only occur if voicemails are being watched. To start watching
            voicemails either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailDeleted">
            <summary>
            Occurs when a voicemail is deleted.
            </summary>
            <remarks>
            This event will only occur if voicemails are being watched. To start watching
            voicemails either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdated">
            <summary>
            Occurs when a voicemail is modified.
            </summary>
            <remarks>
            This event will only occur if voicemails are being watched. To start watching
            voicemails either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdateStarted">
            <summary>
            Occurs when an operation begins updating the list of voicemails.
            </summary>
            <remarks><para>This event occurs when an operation, such as <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/>, 
            begins updating the local list of voicemails. A corresponding <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdateCompleted"/> event will
            will occur when the operation completes.</para>
            This event will only occur if voicemails are being watched. To start watching
            voicemails either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdateCompleted">
            <summary>
            Occurs when an operation finishes updating the list of voicemails.
            </summary>
            <remarks><para>This event occurs when an operation, such as <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/>, 
            finishes updating the local list of voicemails. A corresponding <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdateStarted"/> event
            occurs when the operation begins.</para>
            This event will only occur if voicemails are being watched. To start watching
            voicemails either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailServerPlayResult">
            <summary>
            Occurs when the server has completed playing a voicemail to the user.
            </summary>
            <remarks>
            This event will only occur if voicemails are being watched. To start watching
            voicemails either the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> method or
            the <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method.
            <note>All event handlers should be added before calling
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaiting"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.StartWatchingVoicemailWaitingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            <ininHowWatchesWork/>
            <para>This event will only occur when <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToHandset(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Boolean)"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToHandsetAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> is invoked.</para>
            </remarks>
            <seealso cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToHandset(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Boolean)"/>
            <seealso cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToHandsetAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Voicemails">
            <summary>
            Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of
            all VoicemailMessages.
            </summary>
            <remarks>
            <note>The Voicemails property will not be populated until after either the 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/> method or the 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method has been called and the 
            <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewVoicemail"/> event has fired.</note>
            </remarks>
            <value>The voicemail messages.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.AsyncUnifiedMessagingManagerState">
            <summary>
            Private class to store the internal state of a Unified Messaging operation during asynchronous processing.
            </summary>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment">
            <summary>
            Represents an attachment (containing the actual Voicemail message) in a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <seealso cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage">See the documentation on VoicemailMessage for how this class is used, and what information it contains.</seealso>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailAttachment.Equals(System.Object)">
            <summary>
            Compares two VoicemailAttachment objects.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailAttachment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailAttachment.Id">
            <summary>
            Gets the ID of this VoicemailAttachment.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailAttachment.Name">
            <summary>
            Gets the filename of this VoicemailAttachment.
            </summary>
            <value>The filename.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.VoiceMailCache">
            <exclude /><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoiceMailCache.Clear">
            <summary>
            Clears the list of cached voicemails.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoiceMailCache.Contains(ININ.IceLib.UnifiedMessaging.VoicemailMessage)">
            <summary>
            Determines if the specified voicemail exists in the cache.
            </summary>
            <param name="message">The voicemail to check.</param>
            <returns>
            	<see langword="true"/> if the message is cached; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoiceMailCache.RemoveMessagesExcept(ININ.IceLib.UnifiedMessaging.VoicemailMessage[])">
            <summary>
            Removes all messages except those in the provided list.
            </summary>
            <param name="keepMessages">The list of messages to preserve.</param>
            <returns>An array of VoicemailMessage that contains all the removed voicemails.</returns>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.VoicemailEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewVoicemail"/>,
            <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailDeleted"/>, and <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdated"/> events.
            </summary>
            <remarks>
            <para>
            Handle the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewVoicemail"/> event to be informed when a new
            voicemail has been added to the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Voicemails"/> list.<br/>
            Handle the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailDeleted"/> event to be informed when an existing
            voicemail has been removed from the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Voicemails"/> list.<br/>
            Handle the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdated"/> event to be informed when an existing
            voicemail in the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Voicemails"/> list has been changed.<br/>
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailEventArgs.#ctor(ININ.IceLib.UnifiedMessaging.VoicemailMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailEventArgs"/> class with the specified values.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailEventArgs.Message">
            <summary>
            Gets the Voicemail message associated with the event.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage">
            <summary>
            Represents a Voicemail message within the Interaction Center system.
            </summary>
            <remarks>
            <para>
            All <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>s are accessible through the <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Voicemails"/> property of the 
            <see cref="T:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager"/> instance. The <see cref="P:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.Voicemails"/> list is not automatically 
            kept current.  It must be refreshed by calling <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCache(System.Int32)"/> or 
            <see cref="M:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.RefreshVoicemailCacheAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. In addition to referencing the entire list, code can be informed
            of changes to the list by subscribing to the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.NewVoicemail"/>,
            <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailDeleted"/>, and <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailUpdated"/> events.
            </para>
            A <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> contains various pieces of information about the voicemail itself (for example: <see cref="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.From"/>,
            <see cref="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.To"/>, <see cref="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Subject"/>, <see cref="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Body"/>), as well as a list of actual audio attachments
            to the voicemail.  A <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> may contain zero or more <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/>s (available from the <see cref="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Attachments"/> property), 
            each one representing some portion of audio added to the voicemail at any given time. This can include the original voicemail message, comments that
            have been attached and forwarded, etc.
            <br/><br/>
            <note>
            Although this is not typical, each <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> may not necessarily contain audio data.  
            It is possible for a user to attach any file they wish to a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </note>
            <para>
            A <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> can be played to a target (<see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToHandset(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Boolean)"/>, 
            <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToNumber(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)"/>, <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToStation(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)"/>), or downloaded 
            as a file (<see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean)"/>) for local playback/manipulation.
            <br/><br/>
            <note>
            Currently, <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>s may not be changed and saved.
            </note>
            </para>
            <example>
            The following example demonstrates playing back a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to the logged in station's handset.
            <code lang="C#">
            ...
            UnifiedMessagingManager manager = UnifiedMessagingManager.GetInstance(_session);
            manager.RefreshVoicemailCache(-1);
            if (manager.Voicemails.Count &gt; 0)
            {
                VoicemailMessage msg = manager.Voicemails[0];
                if ((msg.Attachments.Count &gt; 0) &amp;&amp; (IsWavFileExtension(msg.Attachments[0].Name))
                {
                    msg.PlayToHandset(msg.Attachments[0], true);
                }
            }
            ...
            </code>
            </example>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Delete">
            <summary>
            Issues a synchronous request to delete this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.DeleteAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to delete this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <ConnectionExceptions/>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.StopPlayToStation">
            <summary>
            Issues a synchronous request to stop playing a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to a station.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.StopPlayToStationAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to stop playing a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to a station.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.StopPlayToNumber">
            <summary>
            Issues a synchronous request to stop playing a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to a remote number.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.StopPlayToNumberAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to stop playing a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to a remote number.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToHandset(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Boolean)">
            <summary>Issues a synchronous request to play a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> to the handset of the current logged-in station.</summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> to play.</param>
            <param name="markAsRead">Mark this message as read.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">If playback is already in progress.</exception>
            <ConnectionExceptions/>
            <remarks>When playback is complete, <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailServerPlayResult"/> will be invoked.</remarks>
            <seealso cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailServerPlayResult"/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToHandsetAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to play a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> to the handset of the current logged-in station.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> to play.</param>
            <param name="markAsRead">Mark this voicemail message as read.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">If playback is already in progress.</exception>
            <remarks>
            <ininAsyncMethodNote/>
            <para>When playback is complete, <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailServerPlayResult"/> will be invoked.</para>
            </remarks>
            <seealso cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailServerPlayResult"/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToNumber(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)">
            <summary>Issues a synchronous request to play a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to a specified target number.</summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> to play.</param>
            <param name="target">The telephone number of the specified target.</param>
            <param name="markAsRead">Marks this message as read.</param>
            <param name="enableDigits">Enables the playing of digits to skip around the message.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">If playback is already in progress.</exception>
            <ConnectionExceptions/>
            <remarks>
            When playback completes, <see cref="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete"/> will be invoked.
            </remarks>
            <seealso cref="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete"/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToNumberAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to play a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> to a specified target number.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> to play.</param>
            <param name="target">The telephone number of the specified target.</param>
            <param name="markAsRead">Marks this message as read.</param>
            <param name="enableDigits">Enables the playing of digits to skip around the message.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">If playback is already in progress.</exception>
            <remarks><ininAsyncMethodNote/><para>When playback completes, <see cref="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete"/> will be invoked.</para></remarks>
            <seealso cref="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete"/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToStation(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)">
            <summary>Issues an synchronous request to play this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to a specified station.</summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> of this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to play.</param>
            <param name="stationName">The station name to play to.</param>
            <param name="markAsRead">Mark this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> as read.</param>
            <param name="enableDigits">Enable playing of digits to skip forward or back in voicemail. The user must have appropriate permissions for this to work, otherwise the entire playback will fail.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">If playback is already in progress.</exception>
            <ConnectionExceptions/>
            <remarks>
            When playback completes, <see cref="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete"/> will be invoked.
            </remarks>
            <seealso cref="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete"/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToStationAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Issues an asynchronous request to play this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to a specified station.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> of this message to play.</param>
            <param name="stationName">The station name to play to.</param>
            <param name="markAsRead">Mark this message as read.</param>
            <param name="enableDigits">Enable playing of digits to skip forward or back in voicemail. The user must have appropriate permissions for this to work, otherwise the entire playback will fail.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">If playback is already in progress.</exception>
            <remarks><ininAsyncMethodNote/><para>When playback completes, <see cref="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete"/> will be invoked.</para></remarks>
            <seealso cref="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete"/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.CancelSaveAsFile(ININ.IceLib.UnifiedMessaging.VoicemailAttachment)">
            <summary>
            Cancels the current downloading to a file.
            </summary>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean)">
            <summary>
            Downloads this message into a specified file.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> of this message to download.</param>
            <param name="fileName">The path and name of a local file to save the voicemail into.</param>
            <param name="markAsRead">Mark this message as read.</param>
            <returns><see langword="true"/> if the file was saved successfully.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="fileName"/> length is zero.</exception>
            <ConnectionExceptions/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously downloads this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> into a specified file.
            </summary>
            <param name="attachment">The <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> of this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> to download.</param>
            <param name="fileName">The path and name of a local file to save the voicemail into.</param>
            <param name="markAsRead">"&gt;Mark this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> as read.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState"><ininAsyncStateParam/></param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="fileName"/> length is zero.</exception>
            <remarks><ininAsyncMethodNote/></remarks>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Dispose">
            <summary>
            Releases resources held by this instance.
            </summary>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ININ.IceLib.Connection.AuthSettings"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">Indicates whether the control is in the process of being disposed of.</param>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.DownloadProgressChanged">
            <summary>
            Occurs when the progress of downloading a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> changes.
            </summary>
            <remarks>
            <para>This event will only occur if a download has been started. (See 
            <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToNumber(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)"/>, <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToNumberAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
            <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToStation(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)"/>, <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToStationAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
            <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFile(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean)"/>, or <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.SaveAsFileAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.EventHandler{ININ.IceLib.UnifiedMessaging.AsyncSaveAsFileCompletedEventArgs},System.Object)"/>.)</para>
            <note>All event handlers should be added before the download is started.</note>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlaybackComplete">
            <summary>
            Occurs when playback to a remote number or station has completed.
            </summary>
            <remarks>
            This event will only occur when a playback action has completed.
            <note>All event handlers should be added before calling <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToNumber(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)"/>, <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToNumberAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
            <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToStation(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean)"/>, or <see cref="M:ININ.IceLib.UnifiedMessaging.VoicemailMessage.PlayToStationAsync(ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</note>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.From">
            <summary>
            Gets the sender of the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.To">
            <summary>
            Gets the list of recipients for this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The 'to' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Cc">
            <summary>
            Gets the list of recipients carbon-copied on this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The 'cc' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Attachments">
            <summary>
            Gets the list of attachments on this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Subject">
            <summary>
            Gets the subject of the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.DateReceived">
            <summary>
            Gets the <see cref="T:System.DateTime"/> this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> was received.
            </summary>
            <value>The date received.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Importance">
            <summary>
            Gets the importance level of this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The importance. On most Email systems, the importance of the message is "Low", "Normal", or "High".</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Sensitivity">
            <summary>
            Gets the sensitivity level of this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <remarks>Sensitivity indicates the confidentiality of the message ("Normal", "Personal", "Private", 
            or "Confidential"). The default is "Normal".</remarks>
            <value>The sensitivity.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.HasBeenRead">
            <summary>
            Gets a flag indicating whether this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> is marked as read or unread.
            </summary>
            <value>
            	<see langword="true"/> if this instance has been read; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Id">
            <summary>
            Gets the ID of this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailMessage.Body">
            <summary>
            Gets the body text of this <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The body.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.VoicemailRecipient">
            <summary>
            Represents both a recipient and sender of a <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailRecipient.Equals(System.Object)">
            <summary>
            Compares two VoicemailRecipient objects.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailRecipient.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailRecipient.Name">
            <summary>
            Gets the display name of this recipient.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailRecipient.Address">
            <summary>
            Gets the Internet address of this recipient. This value is typically an Email address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.VoicemailServerPlayResultEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailServerPlayResult"/> event.
            </summary>
            <remarks>
            <para>
            Handle the <see cref="E:ININ.IceLib.UnifiedMessaging.UnifiedMessagingManager.VoicemailServerPlayResult"/> event to
            be informed when playback to the server of a voicemail has completed.  
            The <see cref="P:ININ.IceLib.UnifiedMessaging.VoicemailServerPlayResultEventArgs.Result"/> property identifies the
            voicemail message that completed playing, in addition to a result code and message.
            </para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoicemailServerPlayResultEventArgs.#ctor(ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailServerPlayResultEventArgs"/> class with the specified values.
            </summary>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoicemailServerPlayResultEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult">
            <summary>
            The result sent back from the server when a Voicemail was played to the user.
            </summary>
            <remarks>
            The <see cref="T:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult"/> contains information about the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>
            and <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> that was played to the user, as well as the <see cref="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.ResultCode"/>
            that specifies the server's return code, and <see cref="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.ResultText"/> that specifies an error or success
            message generated by the server.
            <br/><br/>
            <note>
            Compare the <see cref="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.ResultCode"/> value to <see cref="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.PlaybackAbortedResultCode"/>
            to evaluate if the user explicitly stopped the playback.
            </note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.#ctor(ININ.IceLib.UnifiedMessaging.VoicemailMessage,ININ.IceLib.UnifiedMessaging.VoicemailAttachment,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="attachment">The attachment.</param>
            <param name="resultCode">The result code.</param>
            <param name="resultText">The result text.</param>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.Message">
            <summary>
            Gets the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/> that was played.
            </summary>
            <value>The Voicemail message.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.Attachment">
            <summary>
            Gets the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailAttachment"/> that was played.
            </summary>
            <value>The Voicemail attachment.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.ResultCode">
            <summary>
            Gets the result code from playing the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The result code.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.ResultText">
            <summary>
            Gets the result text (error or success) of playing the <see cref="T:ININ.IceLib.UnifiedMessaging.VoicemailMessage"/>.
            </summary>
            <value>The result text.</value>
        </member>
        <member name="P:ININ.IceLib.UnifiedMessaging.VoiceMessageServerPlayResult.PlaybackAbortedResultCode">
            <summary>
            Result code returned when playback is stopped by user.
            </summary>
            <value>The result code.</value>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlFaxList">
            <exclude/><summary>For internal use only.</summary>
            <remarks>
            FaxReport is a container for zero or more Voicemails
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlFaxList.Messages">
            <summary>
            Fax messages contained in this report.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlFaxList.AllMessages">
            <summary>
            Gets all messages in this report.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlMessage">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessage.Subject">
            <summary>
            Subject of message.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessage.DateReceived">
            <summary>
            Date message was received.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessage.Importance">
            <summary>
            Importance level of message.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessage.Sensitivity">
            <summary>
            Sensitivity level of message.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessage.ReadFlag">
            <summary>
            Whether message is marked as read or unread.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessage.Id">
            <summary>
            ID of message.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessage.Body">
            <summary>
            Body of message.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessage.Equals(System.Object)">
            <summary>
            Compares two XmlMessage objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlMessage.Recipients">
            <summary>
            Array of recipients for this message.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlMessage.Attachments">
            <summary>
            Array of attachments for this message.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlMessage.AllRecipients">
            <summary>
            Gets an array of all recipients for this message.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlMessage.AllAttachments">
            <summary>
            Gets an array of all attachments for this Message.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessageArrayList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlMessageArrayList"/> class.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlMessageAttachment">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessageAttachment.Name">
            <summary>
            The name of the attachment.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessageAttachment.Id">
            <summary>
            Attachment ID.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessageAttachment.DownloadLocation">
            <summary>
            Attachment download location
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessageAttachment.Equals(System.Object)">
            <summary>
            Compares two Attachment objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessageAttachment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessageAttachmentArrayList.Equals(System.Object)">
            <summary>
            Compares two Attachment lists (attachment ordering within the list is considered).
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlMessageRecipient">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessageRecipient.Type">
            <summary>
            Type of recipient.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessageRecipient.Name">
            <summary>
            Name of recipient.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlMessageRecipient.Address">
            <summary>
            Address of recipient.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessageRecipient.Equals(System.Object)">
            <summary>
            Compares two Recipient objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessageRecipient.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlMessageRecipientArrayList.Equals(System.Object)">
            <summary>
            Compares two Recipient lists (recipient ordering within the list is considered).
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlVoicemailList">
            <exclude/><summary>For internal use only.</summary>
            <remarks>
            VoicemailReport is a container for zero or more Voicemails
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlVoicemailList.Messages">
            <summary>
            Voicemail messages contained in this report.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlVoicemailList.AllMessages">
            <summary>
            Gets all messages in this report.
            </summary>
        </member>
    </members>
</doc>
